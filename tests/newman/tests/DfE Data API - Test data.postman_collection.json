{
	"info": {
		"_postman_id": "1d659858-24d8-4789-9d48-2d1dd704030e",
		"name": "DfE Data API - Test data",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Meta",
			"item": [
				{
					"name": "Themes",
					"item": [
						{
							"name": "Themes Meta",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "483030fb-1db1-4380-99d6-d2fda32e3497",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Number of themes should be correct\", function () {",
											"    pm.expect(respJson.length).to.equal(2); ",
											"});",
											"",
											"pm.test(\"Pupils and schools theme should exist\", function () {",
											"    var foundTheme = false;",
											"    for(var i = 0; i < respJson.length; i++) {",
											"        if(respJson[i].title == \"Pupils and schools\") {",
											"            foundTheme = true;",
											"            pm.expect(respJson[i].id).to.equal(\"ee1855ca-d1e1-4f04-a795-cbd61d326a1f\");",
											"            pm.expect(respJson[i].slug).to.equal(\"pupils-and-schools\");",
											"            pm.expect(respJson[i].topics.length).to.equal(1);",
											"            pm.expect(respJson[i].topics[0].title).to.equal(\"Pupil absence\");",
											"            pm.expect(respJson[i].topics[0].publications.length).to.equal(1);",
											"            pm.expect(respJson[i].topics[0].publications[0].title).to.equal(\"Pupil absence in schools in England\");",
											"        }",
											"    }",
											"    pm.expect(foundTheme).to.equal(true, 'Pupils and schools theme should be in response!');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{data_api_url}}/meta/themes",
									"host": [
										"{{data_api_url}}"
									],
									"path": [
										"meta",
										"themes"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Subject",
					"item": [
						{
							"name": "Pupil absence in schools in England",
							"item": [
								{
									"name": "Subject Meta - Abs by char",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "483030fb-1db1-4380-99d6-d2fda32e3497",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.Characteristic\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.SchoolType\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceFields\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceByReason\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceForPersistentAbsentees\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthority\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthorityDistrict\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});",
													"",
													"pm.test(\"totalValues should be correct\", function () {",
													"    pm.expect(respJson.filters.Characteristic.totalValue).to.equal(pm.globals.get('1F_Char__Total'));",
													"    pm.expect(respJson.filters.SchoolType.totalValue).to.equal(pm.globals.get('1F_SchoolType__Total'));",
													"    pm.expect(respJson.filters.YearBreakdown.totalValue).to.equal(\"\");",
													"});",
													"",
													"pm.test(\"Should be correct number of characteristics\", function () { ",
													"    pm.expect(Object.keys(respJson.filters.Characteristic.options).length).to.equal(10);",
													"});",
													"",
													"pm.test(\"Each characteristic should have correct number\", function () {",
													"    pm.expect(respJson.filters.Characteristic.options.Total.options.length).to.equal(1);",
													"    pm.expect(respJson.filters.Characteristic.options.Gender.options.length).to.equal(2);",
													"    pm.expect(respJson.filters.Characteristic.options.EthnicGroupMajor.options.length).to.equal(8);",
													"    pm.expect(respJson.filters.Characteristic.options.EthnicGroupMinor.options.length).to.equal(19);",
													"    pm.expect(respJson.filters.Characteristic.options.NCYear.options.length).to.equal(14);",
													"    pm.expect(respJson.filters.Characteristic.options.FSM.options.length).to.equal(3);",
													"    pm.expect(respJson.filters.Characteristic.options.FSMEver6.options.length).to.equal(3);",
													"    pm.expect(respJson.filters.Characteristic.options.SENProvision.options.length).to.equal(8);",
													"    pm.expect(respJson.filters.Characteristic.options.SENPrimaryNeed.options.length).to.equal(14);",
													"    pm.expect(respJson.filters.Characteristic.options.FirstLanguage.options.length).to.equal(4);",
													"});",
													"",
													"pm.test(\"Number of school type default options should be correct\", function () { ",
													"    pm.expect(Object.keys(respJson.filters.SchoolType.options.Default.options).length).to.equal(4);",
													"});",
													"",
													"pm.test(\"Number of time periods options should be correct\", function() {",
													"    pm.expect(respJson.timePeriod.options.length).to.equal(5); ",
													"});",
													"",
													"pm.test(\"Number of location options should be correct\", function() {",
													"    pm.expect(respJson.locations.country.options.length).to.equal(1);",
													"    pm.expect(respJson.locations.localAuthority.options.length).to.equal(152);",
													"    pm.expect(respJson.locations.localAuthorityDistrict.options.length).to.equal(326);",
													"});",
													"",
													"pm.test(\"Expect indicators to have correct properties\", function () {",
													"    pm.expect(respJson.indicators.AbsenceFields.options.length).to.equal(10);",
													"    pm.expect(respJson.indicators.AbsenceByReason.options.length).to.equal(16);",
													"    pm.expect(respJson.indicators.AbsenceForPersistentAbsentees.options.length).to.equal(7);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{data_api_url}}/meta/subject/1",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subject Meta - Absence by geographic level",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "57af4ba4-ee78-438f-a4df-b8d1926dc80c",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.SchoolType\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceFields\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceForPersistentAbsentees\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceByReason\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthority\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.region\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});",
													"",
													"pm.test(\"Filters totalValues should be correct\", function () {",
													"    pm.expect(respJson.filters.SchoolType.totalValue).to.equal(pm.globals.get('2F_SchoolType__Total'));",
													"    pm.expect(respJson.filters.YearBreakdown.totalValue).to.equal(\"\");",
													"});",
													"",
													"pm.test(\"Number of school type default options should be correct\", function () { ",
													"    pm.expect(Object.keys(respJson.filters.SchoolType.options.Default.options).length).to.equal(4);",
													"});",
													"",
													"pm.test(\"Number of time periods options should be correct\", function() {",
													"    pm.expect(respJson.timePeriod.options.length).to.equal(11); ",
													"});",
													"",
													"pm.test(\"Number of location options should be correct\", function() {",
													"    pm.expect(respJson.locations.country.options.length).to.equal(1);",
													"    pm.expect(respJson.locations.region.options.length).to.equal(10);",
													"    ",
													"    pm.expect(respJson.locations.localAuthority.options.length).to.equal(156);",
													"});",
													"",
													"pm.test(\"Expect indicators to have correct properties\", function () {",
													"    pm.expect(respJson.indicators.AbsenceFields.options.length).to.equal(11);",
													"    pm.expect(respJson.indicators.AbsenceByReason.options.length).to.equal(16);",
													"    pm.expect(respJson.indicators.AbsenceForPersistentAbsentees.options.length).to.equal(7);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{data_api_url}}/meta/subject/2",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject",
												"2"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subject Meta - Abs by term",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a523c41a-6b1e-4a9b-9f93-32dd1af9874b",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.SchoolType\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceFields\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceByReason\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthority\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.region\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});",
													"",
													"pm.test(\"Number of school type default options should be correct\", function () { ",
													"    pm.expect(Object.keys(respJson.filters.SchoolType.options.Default.options).length).to.equal(3);",
													"});",
													"",
													"pm.test(\"Number of time periods options should be correct\", function() {",
													"    pm.expect(respJson.timePeriod.options.length).to.equal(5); ",
													"});",
													"",
													"pm.test(\"Number of location options should be correct\", function() {",
													"    pm.expect(respJson.locations.country.options.length).to.equal(1);",
													"    pm.expect(respJson.locations.region.options.length).to.equal(10);",
													"    pm.expect(respJson.locations.localAuthority.options.length).to.equal(152);",
													"});",
													"",
													"pm.test(\"Expect indicators to have correct properties\", function () {",
													"    pm.expect(respJson.indicators.AbsenceFields.options.length).to.equal(7);",
													"    pm.expect(respJson.indicators.AbsenceByReason.options.length).to.equal(16);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{data_api_url}}/meta/subject/3",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject",
												"3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subject Meta - Abs for four YO",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e2295ce7-38c1-45c6-996b-4ce026c97c1a",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.SchoolType\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceFields\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthority\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.region\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{data_api_url}}/meta/subject/4",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject",
												"4"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subject Meta - Abs in PRUs",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1fad1b97-df53-4082-87b4-986fad0ba79f",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.SchoolType\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceFields\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceByReason\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthority\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.region\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"))",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"))",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"))",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{data_api_url}}/meta/subject/5",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject",
												"5"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subject Meta - Abs num miss at least one session",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4b0060fe-f9a2-459c-b9b9-eab8c748eb49",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.SchoolType\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceFields\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceByReason\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthority\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.region\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{data_api_url}}/meta/subject/6",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject",
												"6"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subject Meta - Abs rate % bands",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f422cd8a-6b27-49d0-b9e6-3668bc4a0717",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.SchoolType\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.AbsencePercentageBand\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.EnrolmentsByAbsencePercentageBand\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{data_api_url}}/meta/subject/7",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject",
												"7"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subject Meta - Invalid Subject",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f422cd8a-6b27-49d0-b9e6-3668bc4a0717",
												"exec": [
													"pm.test(\"Status code is 404\", function () { pm.response.to.have.status(404); });",
													"",
													"pm.test(\"Response text should be correct\", function () {",
													"   pm.expect(pm.response.text()).to.contain(\"Subject does not exist\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{data_api_url}}/meta/subject/99999",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject",
												"99999"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subject Meta - Abs by char - Bark&Dag, Adur",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "08c7178b-9b71-4fb9-8c3e-9770e6d90e49",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.Characteristic\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.SchoolType\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.YearBreakdown\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceFields\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceByReason\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceForPersistentAbsentees\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthority\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthorityDistrict\"));",
													"    pm.expect(pm.response.to.not.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.not.have.jsonBody(\"locations.region\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});",
													"",
													"pm.test(\"Number of characteristic options should be correct\", function () { ",
													"    pm.expect(Object.keys(respJson.filters.Characteristic.options).length).to.equal(10);",
													"    pm.expect(respJson.filters.Characteristic.options.Total.options.length).to.equal(1);",
													"    pm.expect(respJson.filters.Characteristic.options.Gender.options.length).to.equal(2);",
													"    pm.expect(respJson.filters.Characteristic.options.EthnicGroupMajor.options.length).to.equal(8);",
													"    pm.expect(respJson.filters.Characteristic.options.EthnicGroupMinor.options.length).to.equal(19);",
													"    pm.expect(respJson.filters.Characteristic.options.NCYear.options.length).to.equal(14);",
													"    pm.expect(respJson.filters.Characteristic.options.FSM.options.length).to.equal(3);",
													"    pm.expect(respJson.filters.Characteristic.options.FSMEver6.options.length).to.equal(3);",
													"    pm.expect(respJson.filters.Characteristic.options.SENProvision.options.length).to.equal(7);",
													"    pm.expect(respJson.filters.Characteristic.options.SENPrimaryNeed.options.length).to.equal(14);",
													"    pm.expect(respJson.filters.Characteristic.options.FirstLanguage.options.length).to.equal(4);",
													"});",
													"",
													"pm.test(\"Number of school type default options should be correct\", function () { ",
													"    pm.expect(Object.keys(respJson.filters.SchoolType.options.Default.options).length).to.equal(4);",
													"});",
													"",
													"pm.test(\"Number of time periods options should be correct\", function() {",
													"    pm.expect(respJson.timePeriod.options.length).to.equal(5); ",
													"});",
													"",
													"pm.test(\"Number of location options should be correct\", function() {",
													"    pm.expect(respJson.locations.localAuthority.options.length).to.equal(1);",
													"    pm.expect(respJson.locations.localAuthority.options[0].label).to.equal(\"Barking and Dagenham\");",
													"    ",
													"    pm.expect(respJson.locations.localAuthorityDistrict.options.length).to.equal(1);",
													"    pm.expect(respJson.locations.localAuthorityDistrict.options[0].label).to.equal(\"Adur\");",
													"});",
													"",
													"pm.test(\"Expect indicators to have correct properties\", function () {",
													"    pm.expect(respJson.indicators.AbsenceFields.options.length).to.equal(10);",
													"    pm.expect(respJson.indicators.AbsenceByReason.options.length).to.equal(16);",
													"    pm.expect(respJson.indicators.AbsenceForPersistentAbsentees.options.length).to.equal(7);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6db8370e-6078-4279-94d7-438d85a476f7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"subjectId\": 1,\n    \"localAuthority\": [\"E09000002\"],\n    \"localAuthorityDistrict\": [\"E07000223\"]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/meta/subject",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subject Meta - Abs by char - Eng, Bark&Dag, Adur - 2013-2015",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "08c7178b-9b71-4fb9-8c3e-9770e6d90e49",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.Characteristic\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.SchoolType\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.YearBreakdown\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceFields\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceByReason\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceForPersistentAbsentees\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthority\"));",
													"    pm.expect(pm.response.to.not.have.jsonBody(\"locations.localDistrictAuthority\"));",
													"    pm.expect(pm.response.to.not.have.jsonBody(\"locations.region\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});",
													"",
													"pm.test(\"Number of characteristic options should be correct\", function () { ",
													"    pm.expect(Object.keys(respJson.filters.Characteristic.options).length).to.equal(10);",
													"    pm.expect(respJson.filters.Characteristic.options.Total.options.length).to.equal(1);",
													"    pm.expect(respJson.filters.Characteristic.options.Gender.options.length).to.equal(2);",
													"    pm.expect(respJson.filters.Characteristic.options.EthnicGroupMajor.options.length).to.equal(8);",
													"    pm.expect(respJson.filters.Characteristic.options.EthnicGroupMinor.options.length).to.equal(19);",
													"    pm.expect(respJson.filters.Characteristic.options.NCYear.options.length).to.equal(14);",
													"    pm.expect(respJson.filters.Characteristic.options.FSM.options.length).to.equal(3);",
													"    pm.expect(respJson.filters.Characteristic.options.FSMEver6.options.length).to.equal(3);",
													"    pm.expect(respJson.filters.Characteristic.options.SENProvision.options.length).to.equal(8);",
													"    pm.expect(respJson.filters.Characteristic.options.SENPrimaryNeed.options.length).to.equal(14);",
													"    pm.expect(respJson.filters.Characteristic.options.FirstLanguage.options.length).to.equal(4);",
													"});",
													"",
													"pm.test(\"Number of school type default options should be correct\", function () { ",
													"    pm.expect(Object.keys(respJson.filters.SchoolType.options.Default.options).length).to.equal(4);",
													"});",
													"",
													"pm.test(\"Number of time periods options should be correct\", function() {",
													"    pm.expect(respJson.timePeriod.options.length).to.equal(3); ",
													"});",
													"",
													"pm.test(\"Locations should be correct\", function() {",
													"    pm.expect(respJson.locations.localAuthority.options.length).to.equal(1);",
													"    pm.expect(respJson.locations.localAuthority.options[0].label).to.equal(\"Barking and Dagenham\");",
													"    ",
													"    pm.expect(respJson.locations.country.options.length).to.equal(1);",
													"    pm.expect(respJson.locations.country.options[0].label).to.equal(\"England\");",
													"});",
													"",
													"pm.test(\"Expect indicators to have correct properties\", function () {",
													"    pm.expect(respJson.indicators.AbsenceFields.options.length).to.equal(10);",
													"    pm.expect(respJson.indicators.AbsenceByReason.options.length).to.equal(16);",
													"    pm.expect(respJson.indicators.AbsenceForPersistentAbsentees.options.length).to.equal(7);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6db8370e-6078-4279-94d7-438d85a476f7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"localAuthority\": [\"E09000002\"],\n\t\"localAuthorityDistrict\":[\"E07000223\"],\n\t\"country\":[\"E92000001\"],\n\t\"subjectId\":\"1\",\n\t\"timePeriod\": {\n\t\t\"startYear\":2013,\n\t\t\"startCode\":\"AY\",\n\t\t\"endYear\":2015,\n\t\t\"endCode\":\"AY\"\n\t}\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/meta/subject",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subject Meta - Abs by char - Eng - 2016",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "483030fb-1db1-4380-99d6-d2fda32e3497",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.Characteristic\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.SchoolType\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceFields\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceByReason\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceForPersistentAbsentees\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});",
													"",
													"pm.test(\"Number of characteristic options should be correct\", function () { ",
													"    pm.expect(Object.keys(pm.response.json().filters.Characteristic.options).length).to.equal(10);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.Total.options.length).to.equal(1);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.Gender.options.length).to.equal(2);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.EthnicGroupMajor.options.length).to.equal(8);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.EthnicGroupMinor.options.length).to.equal(16);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.NCYear.options.length).to.equal(13);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.FSM.options.length).to.equal(3);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.FSMEver6.options.length).to.equal(3);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.SENProvision.options.length).to.equal(4);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.SENPrimaryNeed.options.length).to.equal(14);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.FirstLanguage.options.length).to.equal(3);",
													"});",
													"",
													"pm.test(\"Number of school type default options should be correct\", function () { ",
													"    pm.expect(Object.keys(pm.response.json().filters.SchoolType.options.Default.options).length).to.equal(4);",
													"});",
													"",
													"pm.test(\"Number of time periods options should be correct\", function() {",
													"    pm.expect(pm.response.json().timePeriod.options.length).to.equal(1);",
													"    pm.expect(pm.response.json().timePeriod.options[0].year).to.equal(2016);",
													"});",
													"",
													"pm.test(\"Number of location options should be correct\", function() {",
													"    pm.expect(pm.response.json().locations.country.options.length).to.equal(1);",
													"    pm.expect(pm.response.json().locations).to.not.have.property(\"Region\");",
													"    pm.expect(pm.response.json().locations).to.not.have.property(\"LocalAuthority\");",
													"    pm.expect(pm.response.json().locations).to.not.have.property(\"LocalAuthorityDistrict\");",
													"});",
													"",
													"pm.test(\"Expect indicators to have correct properties\", function () {",
													"    pm.expect(pm.response.json().indicators.AbsenceFields.options.length).to.equal(10);",
													"    pm.expect(pm.response.json().indicators.AbsenceByReason.options.length).to.equal(16);",
													"    pm.expect(pm.response.json().indicators.AbsenceForPersistentAbsentees.options.length).to.equal(7);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"subjectId\": 1,\n\t\"timePeriod\": {\n\t\tstartYear: 2016,\n\t\tstartCode: \"AY\",\n\t\tendYear: 2016,\n\t\tendCode: \"AY\",\n\t},\n\t\"country\":[\"E92000001\"]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/meta/subject",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subject Meta - Abs by char - All LAs - 2016",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "483030fb-1db1-4380-99d6-d2fda32e3497",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.Characteristic\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.SchoolType\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceFields\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceByReason\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceForPersistentAbsentees\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthority\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});",
													"",
													"pm.test(\"Number of characteristic options should be correct\", function () { ",
													"    pm.expect(Object.keys(pm.response.json().filters.Characteristic.options).length).to.equal(10);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.Total.options.length).to.equal(1);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.Gender.options.length).to.equal(2);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.EthnicGroupMajor.options.length).to.equal(8);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.EthnicGroupMinor.options.length).to.equal(16);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.NCYear.options.length).to.equal(13);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.FSM.options.length).to.equal(3);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.FSMEver6.options.length).to.equal(3);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.SENProvision.options.length).to.equal(4);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.SENPrimaryNeed.options.length).to.equal(14);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.FirstLanguage.options.length).to.equal(3);",
													"});",
													"",
													"pm.test(\"Number of school type default options should be correct\", function () { ",
													"    pm.expect(Object.keys(pm.response.json().filters.SchoolType.options.Default.options).length).to.equal(4);",
													"});",
													"",
													"pm.test(\"Number of time periods options should be correct\", function() {",
													"    pm.expect(pm.response.json().timePeriod.options.length).to.equal(1);",
													"    pm.expect(pm.response.json().timePeriod.options[0].year).to.equal(2016);",
													"});",
													"",
													"pm.test(\"Number of location options should be correct\", function() {",
													"    pm.expect(pm.response.json().locations.localAuthority.options.length).to.equal(152);",
													"    pm.expect(pm.response.json().locations).to.not.have.property(\"LocalAuthorityDistrict\");",
													"});",
													"",
													"pm.test(\"Expect indicators to have correct properties\", function () {",
													"    pm.expect(pm.response.json().indicators.AbsenceFields.options.length).to.equal(10);",
													"    pm.expect(pm.response.json().indicators.AbsenceByReason.options.length).to.equal(16);",
													"    pm.expect(pm.response.json().indicators.AbsenceForPersistentAbsentees.options.length).to.equal(7);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\tsubjectId: 1,\n\ttimePeriod: {\n\t\tstartYear: 2016,\n\t\tstartCode: \"AY\",\n\t\tendYear: 2016,\n\t\tendCode: \"AY\",\n\t},\n\tgeographicLevel: \"LocalAuthority\"\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/meta/subject",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subject Meta - Abs by geog - City of London - 2014",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "483030fb-1db1-4380-99d6-d2fda32e3497",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.SchoolType\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceFields\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceByReason\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceForPersistentAbsentees\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthority\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});",
													"",
													"pm.test(\"Characteristics property shouldn't exist\", function () {",
													"    pm.expect(pm.response.json()).to.not.have.property(\"Characteristic\");",
													"});",
													"",
													"pm.test(\"Number of school type default options should be correct\", function () { ",
													"    pm.expect(pm.response.json().filters.SchoolType.options.Default.options.length).to.equal(2);",
													"});",
													"",
													"pm.test(\"Time periods options should be correct\", function() {",
													"    pm.expect(pm.response.json().timePeriod.options.length).to.equal(1);",
													"    pm.expect(pm.response.json().timePeriod.options[0].year).to.equal(2014);",
													"});",
													"",
													"pm.test(\"Number of location options should be correct\", function() {",
													"    pm.expect(pm.response.json().locations.localAuthority.options.length).to.equal(1);",
													"    pm.expect(pm.response.json().locations).to.not.have.property(\"LocalAuthorityDistrict\");",
													"});",
													"",
													"pm.test(\"Expect indicators to have correct properties\", function () {",
													"    pm.expect(pm.response.json().indicators.AbsenceFields.options.length).to.equal(11);",
													"    pm.expect(pm.response.json().indicators.AbsenceByReason.options.length).to.equal(16);",
													"    pm.expect(pm.response.json().indicators.AbsenceForPersistentAbsentees.options.length).to.equal(7);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\tsubjectId: 2,\n\ttimePeriod: {\n\t\tstartYear: 2014,\n\t\tstartCode: \"AY\",\n\t\tendYear: 2014,\n\t\tendCode: \"AY\",\n\t},\n\tlocalAuthority: [\"E09000001\"]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/meta/subject",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subject Meta - Abs rate % bands - 2012-2014",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "483030fb-1db1-4380-99d6-d2fda32e3497",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.SchoolType\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.AbsencePercentageBand\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.EnrolmentsByAbsencePercentageBand\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});",
													"",
													"pm.test(\"Number of school type default options should be correct\", function () { ",
													"    pm.expect(pm.response.json().filters.SchoolType.options.Default.options.length).to.equal(4);",
													"});",
													"",
													"pm.test(\"Number of AbsencePercentageBand options should be correct\", function () { ",
													"    pm.expect(pm.response.json().filters.AbsencePercentageBand.options.Default.options.length).to.equal(102);",
													"});",
													"",
													"pm.test(\"Time periods options should be correct\", function() {",
													"    pm.expect(pm.response.json().timePeriod.options.length).to.equal(3);",
													"});",
													"",
													"pm.test(\"Number of location options should be correct\", function() {",
													"    pm.expect(pm.response.json().locations.country.options.length).to.equal(1);",
													"    pm.expect(pm.response.json().locations).to.not.have.property(\"Region\");",
													"    pm.expect(pm.response.json().locations).to.not.have.property(\"LocalAuthority\");",
													"    pm.expect(pm.response.json().locations).to.not.have.property(\"LocalAuthorityDistrict\");",
													"});",
													"",
													"pm.test(\"Expect indicators to have correct properties\", function () {",
													"    pm.expect(Object.keys(pm.response.json().indicators).length).to.equal(1);",
													"    pm.expect(pm.response.json().indicators.EnrolmentsByAbsencePercentageBand.options.length).to.equal(6);",
													"    ",
													"    pm.expect(pm.response.json().indicators).to.not.have.property(\"AbsenceFields\");",
													"    pm.expect(pm.response.json().indicators).to.not.have.property(\"AbsenceByReason\");",
													"    pm.expect(pm.response.json().indicators).to.not.have.property(\"AbsenceForPersistentAbsentees\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\tsubjectId: 7,\n\ttimePeriod: {\n\t\tstartYear: 2012,\n\t\tstartCode: \"HT6\",\n\t\tendYear: 2014,\n\t\tendCode: \"HT6\",\n\t},\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/meta/subject",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a0e957f4-5b18-4986-a053-dd5a9d12ed41",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7f1dd3fe-1ecd-4adc-a95e-a4b3e350146d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "595f2dce-cc95-43ef-abfe-be98632b442f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f42619e7-fe77-47ac-a97a-0b143cf1d4eb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Publication",
					"item": [
						{
							"name": "Publication Meta - Pupil absence in schools in England",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ac4b1f03-19f2-44f5-b80f-840e78849333",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"publicationId\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjects\"));",
											"});",
											"",
											"pm.test(\"Publication id matches the publication requested\", function () { pm.expect(respJson.publicationId).to.equal('cbbd299f-8297-44bc-92ac-558bcf51f8ad'); });",
											"",
											"pm.test(\"Number of subjects should be correct\", function () {",
											"    pm.expect(respJson.subjects.length).to.equal(7);",
											"});",
											"",
											"pm.test(\"Subject labels should be correct\", function () {",
											"    pm.expect() ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{data_api_url}}/meta/publication/cbbd299f-8297-44bc-92ac-558bcf51f8ad",
									"host": [
										"{{data_api_url}}"
									],
									"path": [
										"meta",
										"publication",
										"cbbd299f-8297-44bc-92ac-558bcf51f8ad"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b1bc576e-a31d-4330-ae1d-84416c336e6c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b342cb85-fd1c-421c-b348-1ce17d472dde",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ecb99d52-e5cd-4a4d-942b-eb37d390ca34",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "31fb4c96-88b3-4e61-8c97-88941525fc5a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Tablebuilder",
			"item": [
				{
					"name": "Pupil absence in schools in England",
					"item": [
						{
							"name": "By characteristic",
							"item": [
								{
									"name": "Tablebuilder - Abs by char - 2016",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9277ee51-3525-4077-8957-a697aad55b61",
												"exec": [
													"respJson = pm.response.json()",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.footnotes\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.publicationName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.subjectName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.timePeriodRange\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results\"));",
													"});",
													"",
													"pm.test(\"First subjectMeta.locations should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.locations[0].label\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.locations[0].level\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.locations[0].value\"));",
													"});",
													"",
													"pm.test(\"Validate footnotes\", function () {",
													"    pm.expect(respJson.subjectMeta.footnotes.length).to.equal(13);",
													"    for(var i = 0; i < respJson.subjectMeta.footnotes.length; i++) {",
													"        switch(respJson.subjectMeta.footnotes[i].id) {",
													"            case 1:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"State-funded primary schools include all primary academies, including free schools.\");",
													"                break;",
													"            case 2:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"State-funded secondary schools include city technology colleges and all secondary academies, including all-through academies and free schools.\");",
													"                break;",
													"            case 3:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"Special schools include maintained special schools, non-maintained special schools and special academies.  Excludes general hospital schools, independent special schools and independent schools approved for SEN pupils.\");",
													"                break;",
													"            case 4:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"Totals may not appear to equal the sum of component parts because numbers have been rounded to the nearest 5.\");",
													"                break;",
													"            case 5:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"x - 1 or 2 enrolments, or a percentage based on 1 or 2 enrolments.\");",
													"                break;",
													"            case 6:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"There may be discrepancies between totals and the sum of constituent parts  as national and regional totals and totals across school types have been rounded to the nearest 5.\");",
													"                break;",
													"            case 7:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"Absence rates are the number of absence sessions expressed as a percentage of the total number of possible sessions.\");",
													"                break;",
													"            case 8:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"Pupil enrolments missing 10 percent or more of their own possible sessions (due to authorised or unauthorised absence) are classified as persistent absentees.\");",
													"                break;",
													"            case 9:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"The definition of persistent absence changed from the 2015/16 academic year - The information presented for years prior to 2015/16 has been produced using the same methodology in order to allow users to make comparisons on a consistent basis over time.\");",
													"                break;",
													"            case 10:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"The persistent absentee rate is the number of persistent absentees expressed as a percentage of the total number of enrolments.\");",
													"                break;",
													"            case 11:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"Number of enrolments includes pupils on the school roll for at least one session who are aged between 5 and 15, excluding boarders. Some pupils may be counted more than once (if they moved schools during the academic year or are registered in more than one school).\");",
													"                break;",
													"            case 15:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal('See \"Guide to absence statistics\" for more information on how absence and pupil characteristic data have been linked.');",
													"                break;",
													"            case 16:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"Figures for pupils with unclassified or missing characteristics information should be interpreted with caution.\");",
													"                break;",
													"            default:",
													"                pm.expect(true).to.equal(false, `Didn't expect this footnote to appear!, id: \"${respJson.subjectMeta.footnotes[i].id}\"`)",
													"                break;",
													"        }",
													"    }",
													"});",
													"",
													"pm.test(\"timePeriodRange length should be correct\", function () {",
													"    pm.expect(respJson.subjectMeta.timePeriodRange.length).to.equal(1); ",
													"});",
													"",
													"pm.test(\"results should contain Country, LocalAuthority, and LocalAuthorityDistrict geographicLevels\", function () {",
													"    var countryFound = false;",
													"    var localAuthorityFound = false;",
													"    var localAuthorityDistrictFound = false;",
													"    for(var i = 0; i < respJson.results.length; i++) {",
													"        if(respJson.results[i].geographicLevel == \"Country\") {",
													"            countryFound = true;",
													"        }",
													"        if(respJson.results[i].geographicLevel == \"LocalAuthority\") {",
													"            localAuthorityFound = true;",
													"        }",
													"        if(respJson.results[i].geographicLevel == \"LocalAuthorityDistrict\") {",
													"            localAuthorityDistrictFound = true;",
													"        }",
													"    }",
													"    pm.expect(countryFound).to.equal(true, 'No countries found!');",
													"    pm.expect(localAuthorityFound).to.equal(true, 'No local authorities found!');",
													"    pm.expect(localAuthorityDistrictFound).to.equal(true, 'No local authority districts found!');",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { ",
													"    pm.expect(respJson.results.length).to.equal(1881); ",
													"});",
													"",
													"pm.test(\"First result should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].geographicLevel\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].location\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].measures\"));",
													"    pm.expect(pm.response.to.have.jsonBody(`results[0].measures.${pm.globals.get(\"1I_AbsenceFields__NumberOfPupilEnrolments\")}`));",
													"    pm.expect(pm.response.to.have.jsonBody(`results[0].measures.${pm.globals.get(\"1I_AbsenceFields__NumberOfPersistentAbsentees\")}`));",
													"    pm.expect(pm.response.to.have.jsonBody(`results[0].measures.${pm.globals.get(\"1I_AbsenceFields__PercentageOfPersistentAbsentees\")}`));",
													"    pm.expect(pm.response.to.have.jsonBody(`results[0].measures.${pm.globals.get(\"1I_AbsenceFields__AuthorisedAbsenceRate\")}`));",
													"    pm.expect(pm.response.to.have.jsonBody(`results[0].measures.${pm.globals.get(\"1I_AbsenceFields__OverallAbsenceRate\")}`));",
													"    pm.expect(pm.response.to.have.jsonBody(`results[0].measures.${pm.globals.get(\"1I_AbsenceFields__UnauthorisedAbsenceRate\")}`));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].timePeriod\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{1F_Char__Total}}\n    ],\n    \"indicators\": [\n        {{1I_AbsenceFields__NumberOfPupilEnrolments}}, \n        {{1I_AbsenceFields__UnauthorisedAbsenceRate}}, \n        {{1I_AbsenceFields__OverallAbsenceRate}}, \n        {{1I_AbsenceFields__AuthorisedAbsenceRate}},\n        {{1I_AbsenceFields__PercentageOfPersistentAbsentees}},\n        {{1I_AbsenceFields__NumberOfPersistentAbsentees}}\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Abs by char - Eng - 2014-15",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0c491405-7891-4f02-a4bb-47785d27fa09",
												"exec": [
													"respJson = pm.response.json()",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"timePeriodRange length should be correct\", function () {",
													"    pm.expect(respJson.subjectMeta.timePeriodRange.length).to.equal(2); ",
													"});",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.results.length; i++) {",
													"        pm.expect(respJson.results[i].geographicLevel).to.equal(\"Country\");",
													"    }",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { ",
													"    pm.expect(respJson.results.length).to.equal(16); ",
													"});",
													"",
													"pm.test(\"First result should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].geographicLevel\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].location\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].location.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].measures\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].timePeriod\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"country\":[\"E92000001\"],\n    \"timePeriod\": {\n    \t\"startYear\": 2014,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2015,\n    \t\"endCode\": \"AY\",\n    },\n    \"filters\" : [\n        {{1F_Char__GenderMale}}, {{1F_Char__GenderFemale}}\n    ],\n    \"indicators\": [\n\t\t{{1I_AbsenceFields__UnauthorisedAbsenceRate}}, \n        {{1I_AbsenceFields__OverallAbsenceRate}}, \n        {{1I_AbsenceFields__AuthorisedAbsenceRate}}\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Abs by char - Country",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"respJson = pm.response.json()",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.results.length; i++) {",
													"        pm.expect(respJson.results[i].geographicLevel).to.equal(\"Country\");",
													"    }",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { ",
													"    pm.expect(respJson.results.length).to.equal(4); ",
													"});",
													"",
													"pm.test(\"First result should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].geographicLevel\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].location\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].measures\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].timePeriod\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"geographicLevel\": \"Country\",\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{1F_Char__GenderMale}}, \n        {{1F_Char__GenderFemale}}, \n        {{1F_SchoolType__StateFundedPrimary}}, \n        {{1F_SchoolType__StateFundedSecondary}}\n    ],\n    \"indicators\": [\n        {{1I_AbsenceFields__UnauthorisedAbsenceRate}}, \n        {{1I_AbsenceFields__OverallAbsenceRate}}, \n        {{1I_AbsenceFields__AuthorisedAbsenceRate}}\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Abs by char - Eng - 2014 - Filters Male, Female",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "be43473c-e6d5-4af2-bd3b-69ab2f3c948c",
												"exec": [
													"respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.footnotes\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.publicationName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.subjectName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.timePeriodRange\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results\"));",
													"});",
													"",
													"pm.test(\"Validate footnotes\", function () {",
													"    pm.expect(respJson.subjectMeta.footnotes.length).to.equal(12);",
													"    for(var i = 0; i < respJson.subjectMeta.footnotes.length; i++) {",
													"        switch(respJson.subjectMeta.footnotes[i].id) {",
													"            case 1:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"State-funded primary schools include all primary academies, including free schools.\");",
													"                break;",
													"            case 2:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"State-funded secondary schools include city technology colleges and all secondary academies, including all-through academies and free schools.\");",
													"                break;",
													"            case 3:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"Special schools include maintained special schools, non-maintained special schools and special academies.  Excludes general hospital schools, independent special schools and independent schools approved for SEN pupils.\");",
													"                break;",
													"            case 4:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"Totals may not appear to equal the sum of component parts because numbers have been rounded to the nearest 5.\");",
													"                break;",
													"            case 5:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"x - 1 or 2 enrolments, or a percentage based on 1 or 2 enrolments.\");",
													"                break;",
													"            case 6:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"There may be discrepancies between totals and the sum of constituent parts  as national and regional totals and totals across school types have been rounded to the nearest 5.\");",
													"                break;",
													"            case 7:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"Absence rates are the number of absence sessions expressed as a percentage of the total number of possible sessions.\");",
													"                break;",
													"            case 8:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"Pupil enrolments missing 10 percent or more of their own possible sessions (due to authorised or unauthorised absence) are classified as persistent absentees.\");",
													"                break;",
													"            case 9:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"The definition of persistent absence changed from the 2015/16 academic year - The information presented for years prior to 2015/16 has been produced using the same methodology in order to allow users to make comparisons on a consistent basis over time.\");",
													"                break;",
													"            case 10:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"The persistent absentee rate is the number of persistent absentees expressed as a percentage of the total number of enrolments.\");",
													"                break;",
													"            case 15:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal('See \"Guide to absence statistics\" for more information on how absence and pupil characteristic data have been linked.');",
													"                break;",
													"            case 16:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"Figures for pupils with unclassified or missing characteristics information should be interpreted with caution.\");",
													"                break;",
													"            default:",
													"                pm.expect(true).to.equal(false, `Didn't expect this footnote to appear!, id: \"${respJson.subjectMeta.footnotes[i].id}\"`)",
													"                break;",
													"        }",
													"    }",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.results.length).to.equal(8); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.results.length; i++) {",
													"        pm.expect(respJson.results[i].geographicLevel).to.equal(\"Country\");",
													"    }",
													"});",
													"",
													"pm.test(\"First result should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].geographicLevel\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].location\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].measures\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].timePeriod\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"country\": [\n    \t\"E92000001\"\n    ],\n    \"timePeriod\": {\n    \t\"startYear\": 2014,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2014,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{1F_Char__GenderMale}}, {{1F_Char__GenderFemale}}\n    ],\n    \"indicators\": [\n    \t{{1I_AbsenceFields__UnauthorisedAbsenceRate}}, \n        {{1I_AbsenceFields__OverallAbsenceRate}}, \n        {{1I_AbsenceFields__AuthorisedAbsenceRate}},\n        {{1I_AbsenceFields__PercentageOfPersistentAbsentees}},\n        {{1I_AbsenceFields__NumberOfPersistentAbsentees}}\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Abs by char - Eng - 2014 - Filters Primary, Eth Minor Irish",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.footnotes\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.publicationName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.subjectName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.timePeriodRange\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results\"));",
													"});",
													"",
													"pm.test(\"Validate footnotes\", function () {",
													"    pm.expect(respJson.subjectMeta.footnotes.length).to.equal(10);",
													"    for(var i = 0; i < respJson.subjectMeta.footnotes.length; i++) {",
													"        switch(respJson.subjectMeta.footnotes[i].id) {",
													"            case 1:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"State-funded primary schools include all primary academies, including free schools.\");",
													"                break;",
													"            case 4:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"Totals may not appear to equal the sum of component parts because numbers have been rounded to the nearest 5.\");",
													"                break;",
													"            case 5:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"x - 1 or 2 enrolments, or a percentage based on 1 or 2 enrolments.\");",
													"                break;",
													"            case 6:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"There may be discrepancies between totals and the sum of constituent parts  as national and regional totals and totals across school types have been rounded to the nearest 5.\");",
													"                break;",
													"            case 7:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"Absence rates are the number of absence sessions expressed as a percentage of the total number of possible sessions.\");",
													"                break;",
													"            case 8:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"Pupil enrolments missing 10 percent or more of their own possible sessions (due to authorised or unauthorised absence) are classified as persistent absentees.\");",
													"                break;",
													"            case 9:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"The definition of persistent absence changed from the 2015/16 academic year - The information presented for years prior to 2015/16 has been produced using the same methodology in order to allow users to make comparisons on a consistent basis over time.\");",
													"                break;",
													"            case 10:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"The persistent absentee rate is the number of persistent absentees expressed as a percentage of the total number of enrolments.\");",
													"                break;",
													"            case 15:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal('See \"Guide to absence statistics\" for more information on how absence and pupil characteristic data have been linked.');",
													"                break;",
													"            case 16:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"Figures for pupils with unclassified or missing characteristics information should be interpreted with caution.\");",
													"                break;",
													"            default:",
													"                pm.expect(true).to.equal(false, `Didn't expect this footnote to appear!, id: \"${respJson.subjectMeta.footnotes[i].id}\"`)",
													"                break;",
													"        }",
													"    }",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.results.length).to.equal(1); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.results.length; i++) {",
													"        pm.expect(respJson.results[i].geographicLevel).to.equal(\"Country\");",
													"    }",
													"});",
													"",
													"pm.test(\"First result should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].geographicLevel\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].location\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].measures\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].timePeriod\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"country\": [\n    \t\"E92000001\"\n    ],\n    \"timePeriod\": {\n    \t\"startYear\": 2014,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2014,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{1F_SchoolType__StateFundedPrimary}}, {{1F_Char__EthMinor_Irish}}\n    ],\n    \"indicators\": [\n        {{1I_AbsenceFields__UnauthorisedAbsenceRate}}, \n        {{1I_AbsenceFields__OverallAbsenceRate}}, \n        {{1I_AbsenceFields__AuthorisedAbsenceRate}},\n        {{1I_AbsenceFields__PercentageOfPersistentAbsentees}},\n        {{1I_AbsenceFields__NumberOfPersistentAbsentees}}\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Abs by char - Local Authority - 2014-15 - Filt Male, Female",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa8ea708-fc9c-4520-8df9-a388dd26508d",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"timePeriodRange length should be correct\", function () {",
													"    pm.expect(respJson.subjectMeta.timePeriodRange.length).to.equal(2); ",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.results.length).to.equal(2412); });",
													"",
													"pm.test(\"First result should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].geographicLevel\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].location\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].measures\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].timePeriod\"));",
													"});",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.results.length; i++) {",
													"        pm.expect(respJson.results[i].geographicLevel).to.equal(\"LocalAuthority\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"geographicLevel\": \"LocalAuthority\",\n    \"timePeriod\": {\n    \t\"startYear\": 2014,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2015,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{1F_Char__GenderMale}}, {{1F_Char__GenderFemale}}\n    ],\n    \"indicators\": [\n        {{1I_AbsenceFields__UnauthorisedAbsenceRate}}, \n        {{1I_AbsenceFields__OverallAbsenceRate}}, \n        {{1I_AbsenceFields__AuthorisedAbsenceRate}}\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Abs by char - 3 LAs",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a2f93f15-3577-4c87-ae52-685637abbb01",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Expect corret number of results\", function () {",
													"    pm.expect(respJson.results.length).to.equal(9); ",
													"});",
													"",
													"pm.test(\"Verify all possible timePeriods appear\", function () {",
													"    var found2013 = false;",
													"    var found2014 = false;",
													"    var found2015 = false;",
													"    for(var i = 0; i < respJson.results.length; i++) {",
													"        if(!found2013 && respJson.results[i].timePeriod === \"2013_AY\") {",
													"            found2013 = true;",
													"        }",
													"        if(!found2014 && respJson.results[i].timePeriod === \"2014_AY\") {",
													"            found2014 = true;",
													"        }",
													"        if(!found2015 && respJson.results[i].timePeriod === \"2015_AY\") {",
													"            found2015 = true;",
													"        }",
													"    } ",
													"    pm.expect(found2013).to.equal(true, \"No results from 2013\");",
													"    pm.expect(found2014).to.equal(true, \"No results from 2014\");",
													"    pm.expect(found2015).to.equal(true, \"No results from 2015\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"localAuthority\": [\n    \t\"E08000016\",\n        \"E09000002\",\n        \"E09000003\"\n\n    ],\n    \"subjectId\": 1,\n    \"indicators\": [\n        {{1I_AbsenceFields__NumberOfPupilEnrolments}},\n        {{1I_AbsenceFields__NumberOfSessionsPossible}}\n    ],\n    \"filters\": [\n        {{1F_Char__Total}},\n        {{1F_SchoolType__Total}},\n        {{1F_YearBreakdown__SixHalfTerms}}\n    ],\n    \"timePeriod\": {\n        \"startYear\": 2013,\n        \"startCode\": \"AY\",\n        \"endYear\": 2015,\n        \"endCode\": \"AY\"\n    }\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Abs by char - Wandsworth - 2014-15",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa8ea708-fc9c-4520-8df9-a388dd26508d",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"subjectMeta.locations should be correct\", function () {",
													"    pm.expect(respJson.subjectMeta.locations.length).to.equal(1);",
													"    pm.expect(respJson.subjectMeta.locations[0].label).to.equal(\"Wandsworth\");",
													"    pm.expect(respJson.subjectMeta.locations[0].level).to.equal(\"localAuthority\");",
													"    pm.expect(respJson.subjectMeta.locations[0].value).to.equal(\"E09000032\");",
													"});",
													"",
													"pm.test(\"timePeriodRange length should be correct\", function () {",
													"    pm.expect(respJson.subjectMeta.timePeriodRange.length).to.equal(2); ",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.results.length).to.equal(16); });",
													"",
													"pm.test(\"First result should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].geographicLevel\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].location\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].measures\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].timePeriod\"));",
													"});",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.results.length; i++) {",
													"        pm.expect(respJson.results[i].geographicLevel).to.equal(\"LocalAuthority\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"localAuthority\": [\n    \t\"E09000032\"\n    ],\n    \"timePeriod\": {\n    \t\"startYear\": 2014,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2015,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{1F_Char__GenderMale}}, \n        {{1F_Char__GenderFemale}}\n    ],\n    \"indicators\": [\n        {{1I_AbsenceFields__UnauthorisedAbsenceRate}}, \n        {{1I_AbsenceFields__OverallAbsenceRate}}, \n        {{1I_AbsenceFields__AuthorisedAbsenceRate}}\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Abs by char - LA district - 2016 - FSM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa8ea708-fc9c-4520-8df9-a388dd26508d",
												"exec": [
													"respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"timePeriodRange length should be correct\", function () {",
													"    pm.expect(respJson.subjectMeta.timePeriodRange.length).to.equal(1); ",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { ",
													"    pm.expect(respJson.results.length).to.equal(3688); ",
													"});",
													"",
													"pm.test(\"First result should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].geographicLevel\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].location\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].measures\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].timePeriod\"));",
													"});",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.results.length; i++) {",
													"        pm.expect(respJson.results[i].geographicLevel).to.equal(\"LocalAuthorityDistrict\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"geographicLevel\": \"LocalAuthorityDistrict\",\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{1F_Char__FSMEligible}}, \n        {{1F_Char__FSMNotEligible}}, \n        {{1F_Char__FSMUnclassified}}\n    ],\n    \"indicators\": [\n        {{1I_AbsenceFields__UnauthorisedAbsenceRate}}, \n        {{1I_AbsenceFields__OverallAbsenceRate}}, \n        {{1I_AbsenceFields__AuthorisedAbsenceRate}}\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Abs by char - Adur - 2016",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa8ea708-fc9c-4520-8df9-a388dd26508d",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"subjectMeta.locations should be correct\", function () {",
													"    pm.expect(respJson.subjectMeta.locations.length).to.equal(1);",
													"    pm.expect(respJson.subjectMeta.locations[0].label).to.equal(\"Adur\");",
													"    pm.expect(respJson.subjectMeta.locations[0].level).to.equal(\"localAuthorityDistrict\");",
													"    pm.expect(respJson.subjectMeta.locations[0].value).to.equal(\"E07000223\");",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.results.length).to.equal(11); });",
													"",
													"pm.test(\"First result should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].geographicLevel\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].location\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].measures\"));",
													"    pm.expect(pm.response.to.have.jsonBody(`results[0].measures.${pm.globals.get(\"1I_AbsenceFields__UnauthorisedAbsenceRate\")}`));",
													"    pm.expect(pm.response.to.have.jsonBody(`results[0].measures.${pm.globals.get(\"1I_AbsenceFields__OverallAbsenceRate\")}`));",
													"    pm.expect(pm.response.to.have.jsonBody(`results[0].measures.${pm.globals.get(\"1I_AbsenceFields__AuthorisedAbsenceRate\")}`));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].timePeriod\"));",
													"});",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.results.length; i++) {",
													"        pm.expect(respJson.results[i].geographicLevel).to.equal(\"LocalAuthorityDistrict\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"geographicLevel\": \"LocalAuthorityDistrict\",\n    \"localAuthorityDistrict\": [\n    \t\"E07000223\"\n    ],\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{1F_Char__FSMEligible}}, \n        {{1F_Char__FSMNotEligible}}, \n        {{1F_Char__FSMUnclassified}}\n    ],\n    \"indicators\": [\n        {{1I_AbsenceFields__UnauthorisedAbsenceRate}}, \n        {{1I_AbsenceFields__OverallAbsenceRate}}, \n        {{1I_AbsenceFields__AuthorisedAbsenceRate}}\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1b454eae-43c4-4e92-a06e-1a803aa8858b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9b07e3a7-08a0-4256-ab4a-53508f6331c5",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "By geographic level",
							"item": [
								{
									"name": "Tablebuilder - Abs by geog - Country - 2006-16",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Compulsory fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.footnotes\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.publicationName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.subjectName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.timePeriodRange\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results\"));",
													"});",
													"",
													"pm.test(\"timePeriodRange length should be correct\", function () {",
													"    pm.expect(respJson.subjectMeta.timePeriodRange.length).to.equal(11); ",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.results.length).to.equal(33); });",
													"",
													"pm.test(\"First result should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].geographicLevel\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].location\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].measures\"));",
													"    pm.expect(pm.response.to.have.jsonBody(`results[0].measures.${pm.globals.get(\"2I_AbsenceFields__OverallAbsenceRate\")}`));",
													"    pm.expect(pm.response.to.have.jsonBody(`results[0].measures.${pm.globals.get(\"2I_AbsenceFields__AuthorisedAbsenceRate\")}`));",
													"    pm.expect(pm.response.to.have.jsonBody(`results[0].measures.${pm.globals.get(\"2I_AbsenceFields__UnauthorisedAbsenceRate\")}`));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].timePeriod\"));",
													"});",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.results.length; i++) {",
													"        pm.expect(respJson.results[i].geographicLevel).to.equal(\"Country\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 2,\n    \"geographicLevel\": \"Country\",\n    \"timePeriod\": {\n    \t\"startYear\": 2006,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n    \t{{2F_SchoolType__StateFundedPrimary}}, \n    \t{{2F_SchoolType__StateFundedSecondary}}, \n    \t{{2F_SchoolType__Special}}\n    ],\n    \"indicators\": [\n        {{2I_AbsenceFields__OverallAbsenceRate}},\n\t\t{{2I_AbsenceFields__AuthorisedAbsenceRate}},\n\t\t{{2I_AbsenceFields__UnauthorisedAbsenceRate}}\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Abs by geog - Eng - 2006 - All schoolTypes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ca61e14b-1422-4898-a302-90665970c869",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Compulsory fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.footnotes\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.publicationName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.subjectName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.timePeriodRange\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results\"));",
													"});",
													"",
													"pm.test(\"timePeriodRange length should be correct\", function () {",
													"    pm.expect(respJson.subjectMeta.timePeriodRange.length).to.equal(1); ",
													"});",
													"",
													"pm.test(\"Expect correct number of results\", function() {",
													"   pm.expect(respJson.results.length).to.equal(4);",
													"});",
													"",
													"pm.test(\"Result data should be correct\", function () {",
													"    for(var i = 0; i < respJson.results.length; i++) {",
													"        if(respJson.results[i].measures[pm.globals.get(\"2I_AbsenceByReason__NumberOfIllnessSessions\")] == \"67366501\") {",
													"            pm.expect(respJson.results[i].filters).to.eql([pm.globals.get(\"2F_SchoolType__Total\"), pm.globals.get(\"2F_YearBreakdown__FiveHalfTerms\")]);",
													"            continue;",
													"        }",
													"        else if(respJson.results[i].measures[pm.globals.get(\"2I_AbsenceByReason__NumberOfIllnessSessions\")] == \"31022269\") {",
													"            pm.expect(respJson.results[i].filters).to.eql([pm.globals.get(\"2F_SchoolType__StateFundedPrimary\"), pm.globals.get(\"2F_YearBreakdown__FiveHalfTerms\")]);",
													"            continue;",
													"        }",
													"        else if(respJson.results[i].measures[pm.globals.get(\"2I_AbsenceByReason__NumberOfIllnessSessions\")] == \"35518043\") {",
													"            pm.expect(respJson.results[i].filters).to.eql([pm.globals.get(\"2F_SchoolType__StateFundedSecondary\"), pm.globals.get(\"2F_YearBreakdown__FiveHalfTerms\")]);",
													"            continue;",
													"        }",
													"        else if(respJson.results[i].measures[pm.globals.get(\"2I_AbsenceByReason__NumberOfIllnessSessions\")] == \"826189\") {",
													"            pm.expect(respJson.results[i].filters).to.eql([pm.globals.get(\"2F_SchoolType__Special\"), pm.globals.get(\"2F_YearBreakdown__FiveHalfTerms\")]);",
													"            continue;",
													"        }",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"geographicLevel\": \"Country\",\n\t\"country\":[\"E92000001\"],\n\t\"subjectId\":\"2\",\n\t\"indicators\":[\n\t\t{{2I_AbsenceByReason__NumberOfIllnessSessions}}\n\t],\n\t\"filters\": [\n\t\t{{2F_SchoolType__Total}}, \n\t\t{{2F_SchoolType__StateFundedPrimary}}, \n\t\t{{2F_SchoolType__StateFundedSecondary}}, \n\t\t{{2F_SchoolType__Special}}\n\t],\n\t\"timePeriod\": {\n    \t\"startYear\": 2006,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2006,\n    \t\"endCode\": \"AY\"\n    }\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Abs by geog - LA - *",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Compulsory fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.footnotes\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.publicationName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.subjectName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.timePeriodRange\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results\"));",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.results.length).to.equal(451); });",
													"",
													"pm.test(\"First result should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].geographicLevel\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].location\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].location.localAuthority\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].measures\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].timePeriod\"));",
													"});",
													"",
													"pm.test(\"All subjectMeta locations should be localAuthority\", function () {",
													"    for(var i = 0; i < respJson.subjectMeta.locations.length; i++) {",
													"        pm.expect(respJson.subjectMeta.locations[i].level).to.equal(\"localAuthority\");",
													"    }",
													"});",
													"",
													"pm.test(\"Results geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.results.length; i++) {",
													"        pm.expect(respJson.results[i].geographicLevel).to.equal(\"LocalAuthority\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 2,\n    \"geographicLevel\": \"LocalAuthority\",\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n    \t{{2F_SchoolType__StateFundedPrimary}}, \n    \t{{2F_SchoolType__StateFundedSecondary}}, \n    \t{{2F_SchoolType__Special}}\n    ],\n    \"indicators\": [\n        {{2I_AbsenceFields__OverallAbsenceRate}},\n\t\t{{2I_AbsenceFields__AuthorisedAbsenceRate}},\n\t\t{{2I_AbsenceFields__UnauthorisedAbsenceRate}}\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Abs by geog - Region - *",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Compulsory fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.footnotes\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.publicationName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.subjectName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.timePeriodRange\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results\"));",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.results.length).to.equal(20); });",
													"",
													"pm.test(\"First result should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].geographicLevel\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].location\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].location.region\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].measures\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results[0].timePeriod\"));",
													"});",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.results.length; i++) {",
													"        pm.expect(respJson.results[i].geographicLevel).to.equal(\"Region\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 2,\n    \"geographicLevel\": \"Region\",\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n    \t{{2F_SchoolType__StateFundedSecondary}}, \n    \t{{2F_SchoolType__Special}}\n    ],\n    \"indicators\": [\n        {{2I_AbsenceFields__OverallAbsenceRate}},\n\t\t{{2I_AbsenceFields__AuthorisedAbsenceRate}},\n\t\t{{2I_AbsenceFields__UnauthorisedAbsenceRate}}\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Abs by geog - Inner London",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Compulsory fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.footnotes\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.publicationName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.subjectName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.timePeriodRange\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results\"));",
													"});",
													"",
													"pm.test(\"timePeriodRange length should be correct\", function () {",
													"    pm.expect(respJson.subjectMeta.timePeriodRange.length).to.equal(11); ",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.results.length).to.equal(33); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.results.length; i++) {",
													"        pm.expect(respJson.results[i].geographicLevel).to.equal(\"Region\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 2,\n    \"region\": [\n\t\t\"E13000001\"\n\t],\n    \"timePeriod\": {\n    \t\"startYear\": 2006,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n    \t{{2F_SchoolType__StateFundedPrimary}}, \n    \t{{2F_SchoolType__StateFundedSecondary}}, \n    \t{{2F_SchoolType__Special}}\n    ],\n    \"indicators\": [\n        {{2I_AbsenceFields__OverallAbsenceRate}},\n\t\t{{2I_AbsenceFields__AuthorisedAbsenceRate}},\n\t\t{{2I_AbsenceFields__UnauthorisedAbsenceRate}}\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Abs by geog - School - Region Inner London",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Compulsory fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.footnotes\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.publicationName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.subjectName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.timePeriodRange\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results\"));",
													"});",
													"",
													"pm.test(\"timePeriodRange length should be correct\", function () {",
													"    pm.expect(respJson.subjectMeta.timePeriodRange.length).to.equal(1); ",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.results.length).to.equal(938); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.results.length; i++) {",
													"        pm.expect(respJson.results[i].geographicLevel).to.equal(\"School\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 2,\n    \"geographicLevel\": \"School\",\n    \"region\": [ \"E13000001\" ],\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n    \t{{2F_SchoolType__StateFundedPrimary}}, \n    \t{{2F_SchoolType__StateFundedSecondary}}, \n    \t{{2F_SchoolType__Special}}\n    ],\n    \"indicators\": [\n        {{2I_AbsenceFields__OverallAbsenceRate}},\n\t\t{{2I_AbsenceFields__AuthorisedAbsenceRate}},\n\t\t{{2I_AbsenceFields__UnauthorisedAbsenceRate}}\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Abs by geog - School - LA Barking and Dagenham",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Compulsory fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.footnotes\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.publicationName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.subjectName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.timePeriodRange\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results\"));",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.results.length).to.equal(60); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.results.length; i++) {",
													"        pm.expect(respJson.results[i].geographicLevel).to.equal(\"School\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 2,\n    \"geographicLevel\": \"School\",\n    \"localAuthority\": [ \"E09000002\" ],\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n    \t{{2F_SchoolType__StateFundedPrimary}}, \n    \t{{2F_SchoolType__StateFundedSecondary}}, \n    \t{{2F_SchoolType__Special}}\n    ],\n    \"indicators\": [\n        {{2I_AbsenceFields__OverallAbsenceRate}},\n\t\t{{2I_AbsenceFields__AuthorisedAbsenceRate}},\n\t\t{{2I_AbsenceFields__UnauthorisedAbsenceRate}}\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Abs by geog - School - Region Inner London - All Schools AND Primary",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b6dcdaa-951a-4e6f-8cd7-2ec9a6019dcd",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Compulsory fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.footnotes\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.publicationName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.subjectName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.timePeriodRange\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"results\"));",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.results.length).to.equal(706); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.results.length; i++) {",
													"        pm.expect(respJson.results[i].geographicLevel).to.equal(\"School\");",
													"    }",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"subjectId\": 2,\n\t\"geographicLevel\": \"School\",\n\t\"region\": [ \"E13000001\" ],\n\t\"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n\t\"filters\" : [\n\t\t{{2F_SchoolType__Total}}, \n\t\t{{2F_SchoolType__StateFundedPrimary}}\n\t],\n\t\"indicators\": [\n\t\t{{2I_AbsenceByReason__NumberOfExtendedAuthorisedHolidaySessions}},\n\t\t{{2I_AbsenceFields__PercentageOfPersistentAbsentees}},\n\t\t{{2I_AbsenceFields__OverallAbsenceRate}},\n\t\t{{2I_AbsenceFields__AuthorisedAbsenceRate}},\n\t\t{{2I_AbsenceFields__UnauthorisedAbsenceRate}},\n\t\t{{XI_INVALID}}\n\t]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6354b6c5-34ad-43c1-b2d7-45f006621e28",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a06c2178-26b4-4c5d-966b-2bc10331373a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "By term",
							"item": [
								{
									"name": "Tablebuilder - Abs by term - England - * - AY",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"timePeriodRange length should be correct\", function () {",
													"    pm.expect(respJson.subjectMeta.timePeriodRange.length).to.equal(3); ",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.results.length).to.equal(36); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.results.length; i++) {",
													"        pm.expect(respJson.results[i].geographicLevel).to.equal(\"Country\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 3,\n    \"country\": [\"E92000001\"],\n    \"timePeriod\": {\n    \t\"startYear\": 2014,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{3F_StateFundedPrimary}}, \n        {{3F_StateFundedSecondary}}, \n        {{3F_Special}}\n    ],\n    \"indicators\": [\n        {{3I_AbsenceFields__NumberOfSessionsPossible}},\n\t\t{{3I_AbsenceFields__NumberOfUnauthorisedAbsenceSessions}},\n\t\t{{3I_AbsenceFields__NumberOfAuthorisedAbsenceSessions}},\n\t\t{{3I_AbsenceFields__NumberOfOverallAbsenceSessions}}\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Abs by term - England - * - T1,T2,T3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"// NOTE(mark): Asked to disable these tests due to DFE-1044",
													"// pm.test(\"timePeriodRange length should be correct\", function () {",
													"//     pm.expect(respJson.timePeriodRange.length).to.equal(11); ",
													"// });",
													"",
													"//pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.results.length).to.equal(33); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.results.length; i++) {",
													"        pm.expect(respJson.results[i].geographicLevel).to.equal(\"Country\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 3,\n    \"country\": [\"E92000001\"],\n    \"timePeriod\": {\n    \t\"startYear\": 2013,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{3F_StateFundedPrimary}}, \n        {{3F_StateFundedSecondary}}, \n        {{3F_Special}}\n    ],\n    \"indicators\": [\n        {{3I_AbsenceFields__NumberOfSessionsPossible}},\n\t\t{{3I_AbsenceFields__NumberOfUnauthorisedAbsenceSessions}},\n\t\t{{3I_AbsenceFields__NumberOfAuthorisedAbsenceSessions}},\n\t\t{{3I_AbsenceFields__NumberOfOverallAbsenceSessions}}\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Abs by term - England - HT6",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"//pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.results.length).to.equal(2); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.results.length; i++) {",
													"        pm.expect(respJson.results[i].geographicLevel).to.equal(\"Country\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 3,\n    \"country\": [ \"E92000001\" ],\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{3F_StateFundedPrimary}}, \n        {{3F_StateFundedSecondary}}\n    ],\n    \"indicators\": [\n        {{3I_AbsenceFields__NumberOfSessionsPossible}},\n\t\t{{3I_AbsenceFields__NumberOfUnauthorisedAbsenceSessions}},\n\t\t{{3I_AbsenceFields__NumberOfAuthorisedAbsenceSessions}},\n\t\t{{3I_AbsenceFields__NumberOfOverallAbsenceSessions}}\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Abs by term - no geoLevel - Country England, Region Inner London + Outer London, LA City of London + Barking and Dagenham - HT6",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"subjectMeta.locations should be correct\", function () {",
													"    pm.expect(respJson.subjectMeta.locations.length).to.equal(5);",
													"    for(var i = 0; i < respJson.subjectMeta.locations.length; i++) {",
													"        switch(respJson.subjectMeta.locations[i].label) {",
													"            case \"England\":",
													"                pm.expect(respJson.subjectMeta.locations[i].level).to.equal(\"country\");",
													"                pm.expect(respJson.subjectMeta.locations[i].value).to.equal(\"E92000001\");",
													"                break;",
													"            case \"Inner London\":",
													"                pm.expect(respJson.subjectMeta.locations[i].level).to.equal(\"region\");",
													"                pm.expect(respJson.subjectMeta.locations[i].value).to.equal(\"E13000001\");",
													"                break;",
													"            case \"Outer London\":",
													"                pm.expect(respJson.subjectMeta.locations[i].level).to.equal(\"region\");",
													"                pm.expect(respJson.subjectMeta.locations[i].value).to.equal(\"E13000002\");",
													"                break;",
													"            case \"City of London\":",
													"                pm.expect(respJson.subjectMeta.locations[i].level).to.equal(\"localAuthority\");",
													"                pm.expect(respJson.subjectMeta.locations[i].value).to.equal(\"E09000001\");",
													"                break;",
													"            case \"Barking and Dagenham\":",
													"                pm.expect(respJson.subjectMeta.locations[i].level).to.equal(\"localAuthority\");",
													"                pm.expect(respJson.subjectMeta.locations[i].value).to.equal(\"E09000002\");",
													"                break;",
													"            default:",
													"                pm.expect(false).to.equal(true, `${respJson.subjectMeta.locations[i].label} shouldn't be in subjectMeta.locations!`);",
													"        }",
													"    }",
													"});",
													"",
													"/*",
													"pm.test(\"Number of results should be correct\", function () { ",
													"    pm.expect(respJson.results.length).to.equal(9);",
													"    ",
													"    pm.expect(respJson.results[0].geographicLevel).to.equal(\"Region\");",
													"    pm.expect(respJson.results[0].location.region.code).to.equal(\"E13000001\");",
													"    pm.expect(respJson.results[0].location.region.name).to.equal(\"Inner London\");",
													"    ",
													"    pm.expect(respJson.results[1].geographicLevel).to.equal(\"Region\");",
													"    pm.expect(respJson.results[1].location.region.code).to.equal(\"E13000001\");",
													"    pm.expect(respJson.results[1].location.region.name).to.equal(\"Inner London\");",
													"    ",
													"    pm.expect(respJson.results[2].geographicLevel).to.equal(\"Local_Authority\");",
													"    pm.expect(respJson.results[2].location.localAuthority.code).to.equal(\"E09000001\");",
													"    pm.expect(respJson.results[2].location.localAuthority.name).to.equal(\"City of London\");",
													"    ",
													"    pm.expect(respJson.results[3].geographicLevel).to.equal(\"Region\");",
													"    pm.expect(respJson.results[3].location.region.code).to.equal(\"E13000002\");",
													"    pm.expect(respJson.results[3].location.region.name).to.equal(\"Outer London\");",
													"    ",
													"    pm.expect(respJson.results[4].geographicLevel).to.equal(\"Region\");",
													"    pm.expect(respJson.results[4].location.region.code).to.equal(\"E13000002\");",
													"    pm.expect(respJson.results[4].location.region.name).to.equal(\"Outer London\");",
													"    ",
													"    pm.expect(respJson.results[5].geographicLevel).to.equal(\"Country\");",
													"    pm.expect(respJson.results[5].location.country.code).to.equal(\"E92000001\");",
													"    pm.expect(respJson.results[5].location.country.name).to.equal(\"England\");",
													"    ",
													"    pm.expect(respJson.results[6].geographicLevel).to.equal(\"Country\");",
													"    pm.expect(respJson.results[6].location.country.code).to.equal(\"E92000001\");",
													"    pm.expect(respJson.results[6].location.country.name).to.equal(\"England\");",
													"    ",
													"    pm.expect(respJson.results[7].geographicLevel).to.equal(\"Local_Authority\");",
													"    pm.expect(respJson.results[7].location.localAuthority.code).to.equal(\"E09000002\");",
													"    pm.expect(respJson.results[7].location.localAuthority.name).to.equal(\"Barking and Dagenham\");",
													"    ",
													"    pm.expect(respJson.results[8].geographicLevel).to.equal(\"Local_Authority\");",
													"    pm.expect(respJson.results[8].location.localAuthority.code).to.equal(\"E09000002\");",
													"    pm.expect(respJson.results[8].location.localAuthority.name).to.equal(\"Barking and Dagenham\");",
													"});",
													"*/"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 3,\n    \"country\": [ \"E92000001\" ],\n    \"region\": [ \"E13000001\", \"E13000002\" ],\n    \"localAuthority\": [ \"E09000001\", \"E09000002\" ],\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{3F_StateFundedPrimary}}, \n        {{3F_StateFundedSecondary}}\n    ],\n    \"indicators\": [\n        {{3I_AbsenceFields__NumberOfSessionsPossible}},\n\t\t{{3I_AbsenceFields__NumberOfUnauthorisedAbsenceSessions}},\n\t\t{{3I_AbsenceFields__NumberOfAuthorisedAbsenceSessions}},\n\t\t{{3I_AbsenceFields__NumberOfOverallAbsenceSessions}}\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Abs by term - Region - *",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.results.length).to.equal(400); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.results.length; i++) {",
													"        pm.expect(respJson.results[i].geographicLevel).to.equal(\"Region\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 3,\n    \"geographicLevel\": \"Region\",\n    \"timePeriod\": {\n    \t\"startYear\": 2012,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{3F_StateFundedPrimary}}, \n        {{3F_StateFundedSecondary}}\n    ],\n    \"indicators\": [\n        {{3I_AbsenceFields__NumberOfSessionsPossible}},\n\t\t{{3I_AbsenceFields__NumberOfUnauthorisedAbsenceSessions}},\n\t\t{{3I_AbsenceFields__NumberOfAuthorisedAbsenceSessions}},\n\t\t{{3I_AbsenceFields__NumberOfOverallAbsenceSessions}}\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f28d57d5-c4a2-4c3c-a90c-e672993bec6d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f54a546f-c365-4bfc-831e-2e3cbfdef1d6",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Compulsory fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.filters\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.footnotes\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.indicators\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.locations\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.publicationName\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.subjectName\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.timePeriodRange\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"results\"));",
											"});"
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "For four year olds",
							"item": [
								{
									"name": "Tablebuilder - Abs for four YO - England - *",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"",
													"pm.test(\"timePeriodRange length should be correct\", function () {",
													"    pm.expect(respJson.subjectMeta.timePeriodRange.length).to.equal(4); ",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.results.length).to.equal(8); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.results.length; i++) {",
													"        pm.expect(respJson.results[i].geographicLevel).to.equal(\"Country\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 4,\n    \"country\": [\"E92000001\"],\n    \"timePeriod\": {\n    \t\"startYear\": 2013,\n    \t\"startCode\": \"HT6\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"HT6\"\n    },\n    \"filters\" : [\n        {{4F_SchoolType__Special}}, \n        {{4F_SchoolType__StateFundedSecondary}}\n    ],\n    \"indicators\": [\n        {{4I_AbsenceFields__OverallAbsenceRate}},\n\t\t{{4I_AbsenceFields__NumberOfOverallAbsenceSessions}}\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Abs for four YO - School - *",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"timePeriodRange length should be correct\", function () {",
													"    pm.expect(respJson.subjectMeta.timePeriodRange.length).to.equal(1); ",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.results.length).to.equal(538); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.results.length; i++) {",
													"        pm.expect(respJson.results[i].geographicLevel).to.equal(\"School\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 4,\n    \"geographicLevel\": \"School\",\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"HT6\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"HT6\"\n    },\n    \"filters\" : [\n        {{4F_SchoolType__Special}}\n    ],\n    \"indicators\": [\n        {{4I_AbsenceFields__OverallAbsenceRate}},\n\t\t{{4I_AbsenceFields__NumberOfOverallAbsenceSessions}}\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Abs for four YO England - Secondary, Special",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Validate footnotes\", function () {",
													"    pm.expect(respJson.subjectMeta.footnotes.length).to.equal(8);",
													"    for(var i = 0; i < respJson.subjectMeta.footnotes.length; i++) {",
													"        switch(respJson.subjectMeta.footnotes[i].id) {",
													"            case 2:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"State-funded secondary schools include city technology colleges and all secondary academies, including all-through academies and free schools.\");",
													"                break;",
													"            case 3:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"Special schools include maintained special schools, non-maintained special schools and special academies.  Excludes general hospital schools, independent special schools and independent schools approved for SEN pupils.\");",
													"                break;",
													"            case 4:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"Totals may not appear to equal the sum of component parts because numbers have been rounded to the nearest 5.\");",
													"                break;",
													"            case 5:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"x - 1 or 2 enrolments, or a percentage based on 1 or 2 enrolments.\");",
													"                break;",
													"            case 6:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"There may be discrepancies between totals and the sum of constituent parts  as national and regional totals and totals across school types have been rounded to the nearest 5.\");",
													"                break;",
													"            case 7:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"Absence rates are the number of absence sessions expressed as a percentage of the total number of possible sessions.\");",
													"                break;",
													"            case 21:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"Includes pupils on the school roll for at least one session who are aged 4, excluding boarders. Some pupils may be counted more than once (if they moved schools during the academic year or are registered at more than one school).\");",
													"                break;",
													"            case 22:",
													"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"Only overall absence is recorded for pupils aged 4, absences are not categorised as authorised or unauthorised.\");",
													"                break;",
													"            default:",
													"                pm.expect(true).to.equal(false, `Didn't expect this footnote to appear!, id: \"${respJson.subjectMeta.footnotes[i].id}\"`)",
													"                break;",
													"        }",
													"    }",
													"});",
													"",
													"pm.test(\"timePeriodRange length should be correct\", function () {",
													"    pm.expect(respJson.subjectMeta.timePeriodRange.length).to.equal(1); ",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.results.length).to.equal(2); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.results.length; i++) {",
													"        pm.expect(respJson.results[i].geographicLevel).to.equal(\"Country\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 4,\n    \"country\": [\"E92000001\"],\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"HT6\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"HT6\"\n    },\n    \"filters\" : [\n        {{4F_SchoolType__StateFundedSecondary}}, {{4F_SchoolType__Special}}\n    ],\n    \"indicators\": [\n        {{4I_AbsenceFields__NumberOfPupilEnrolments}},\n\t\t{{4I_AbsenceFields__OverallAbsenceRate}},\n\t\t{{4I_AbsenceFields__NumberOfOverallAbsenceSessions}}\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Abs for four YO - Region West Midlands, South East, South West",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"",
													"pm.test(\"timePeriodRange length should be correct\", function () {",
													"    pm.expect(respJson.subjectMeta.timePeriodRange.length).to.equal(5); ",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.results.length).to.equal(15); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.results.length; i++) {",
													"        pm.expect(respJson.results[i].geographicLevel).to.equal(\"Region\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 4,\n    \"region\": [\"E12000005\", \"E12000008\", \"E12000009\"],\n    \"timePeriod\": {\n    \t\"startYear\": 2012,\n    \t\"startCode\": \"HT6\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"HT6\"\n    },\n    \"filters\" : [\n        {{4F_SchoolType__Total}}\n    ],\n    \"indicators\": [\n        {{4I_AbsenceFields__OverallAbsenceRate}},\n\t\t{{4I_AbsenceFields__NumberOfOverallAbsenceSessions}}\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2cb67ee0-9a6d-4616-8d92-02a3aa5184e4",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "540c3551-b43a-4768-a64e-bcdd881d9a7b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Compulsory fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.filters\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.footnotes\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.indicators\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.locations\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.publicationName\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.subjectName\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.timePeriodRange\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"results\"));",
											"});"
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "In PRUs",
							"item": [
								{
									"name": "Tablebuilder - Abs in PRUs - England",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"// DFE-998 - If no geographicLevel is provided, respond with all geographicLevels",
													"var respJson = pm.response.json()",
													"",
													"pm.test(\"timePeriodRange length should be correct\", function () {",
													"    pm.expect(respJson.subjectMeta.timePeriodRange.length).to.equal(4); ",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.results.length).to.equal(4); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.results.length; i++) {",
													"        pm.expect(respJson.results[i].geographicLevel).to.equal(\"Country\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 5,\n    \"country\": [\"E92000001\"],\n    \"timePeriod\": {\n    \t\"startYear\": 2013,\n    \t\"startCode\": \"HT6\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"HT6\"\n    },\n    \"filters\" : [\n        {{5F_PupilReferralUnit}}\n    ],\n    \"indicators\": [\n        {{5I_AbsenceFields__NumberOfSchools}}\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Abs in PRUs - LA Bexley, Buckinghamshire, Derby",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"timePeriodRange length should be correct\", function () {",
													"    pm.expect(respJson.subjectMeta.timePeriodRange.length).to.equal(2); ",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.results.length).to.equal(6); });",
													"",
													"pm.test(\"geographicLevel and indicators/measures should be same as request\", function () {",
													"    for(var i = 0; i < respJson.results.length; i++) {",
													"        pm.expect(respJson.results[i].geographicLevel).to.equal(\"LocalAuthority\");",
													"        pm.expect(pm.response.to.have.jsonBody(`results[${i}].measures.${pm.globals.get(\"5I_AbsenceFields__UnauthorisedAbsenceRate\")}`));",
													"        pm.expect(pm.response.to.have.jsonBody(`results[${i}].measures.${pm.globals.get(\"5I_AbsenceFields__AuthorisedAbsenceRate\")}`));",
													"        pm.expect(pm.response.to.have.jsonBody(`results[${i}].measures.${pm.globals.get(\"5I_AbsenceFields__OverallAbsenceRate\")}`));",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 5,\n    \"localAuthority\": [\"E06000015\", \"E09000004\", \"E10000002\"],\n    \"timePeriod\": {\n    \t\"startYear\": 2014,\n    \t\"startCode\": \"HT6\",\n    \t\"endYear\": 2015,\n    \t\"endCode\": \"HT6\"\n    },\n    \"filters\" : [\n        {{5F_PupilReferralUnit}}\n    ],\n    \"indicators\": [\n    \t{{5I_AbsenceFields__UnauthorisedAbsenceRate}},\n    \t{{5I_AbsenceFields__AuthorisedAbsenceRate}},\n    \t{{5I_AbsenceFields__OverallAbsenceRate}}\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Abs in PRUs - Region - *",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.results.length).to.equal(10); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.results.length; i++) {",
													"        pm.expect(respJson.results[i].geographicLevel).to.equal(\"Region\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 5,\n    \"geographicLevel\": \"Region\",\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"HT6\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"HT6\"\n    },\n    \"filters\" : [\n        {{5F_PupilReferralUnit}}\n    ],\n    \"indicators\": [\n        {{5I_AbsenceFields__UnauthorisedAbsenceRate}},\n    \t{{5I_AbsenceFields__AuthorisedAbsenceRate}},\n    \t{{5I_AbsenceFields__OverallAbsenceRate}}\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Abs in PRUs - LA Bury, Devon + Region East of England",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.results.length).to.equal(6); }); // LA 4 + Region 2",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.results.length; i++) {",
													"        pm.expect(respJson.results[i].geographicLevel).to.satisfy(function (geoLevel) {",
													"            return geoLevel === \"Region\" || geoLevel === \"LocalAuthority\";",
													"        });",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 5,\n    \"localAuthority\": [\"E08000002\", \"E10000008\"],\n    \"region\": [\"E12000006\"],\n    \"timePeriod\": {\n    \t\"startYear\": 2015,\n    \t\"startCode\": \"HT6\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"HT6\"\n    },\n    \"filters\" : [\n        {{5F_PupilReferralUnit}}\n    ],\n    \"indicators\": [\n        {{5I_AbsenceFields__UnauthorisedAbsenceRate}},\n    \t{{5I_AbsenceFields__AuthorisedAbsenceRate}},\n    \t{{5I_AbsenceFields__OverallAbsenceRate}}\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "52135f05-03ae-4080-bbbb-dddcd7ee3e42",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6dbbadee-c752-4d88-b613-f2953c175a62",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Compulsory fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.filters\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.footnotes\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.indicators\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.locations\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.publicationName\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.subjectName\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.timePeriodRange\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"results\"));",
											"});"
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Number missing at least one session by reason",
							"item": [
								{
									"name": "Tablebuilder - Abs num miss at least one session - LA - *",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.results.length).to.equal(2255); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.results.length; i++) {",
													"        pm.expect(respJson.results[i].geographicLevel).to.equal(\"LocalAuthority\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 6,\n    \"geographicLevel\": \"LocalAuthority\",\n    \"timePeriod\": {\n    \t\"startYear\": 2012,\n    \t\"startCode\": \"HT6\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"HT6\"\n    },\n    \"filters\" : [\n        {{6F_StateFundedPrimary}}, \n        {{6F_StateFundedSecondary}}, \n        {{6F_Special}}\n    ],\n    \"indicators\": [\n    \t{{6I_AbsenceFields__NumberOfEnrolmentsWithAtLeastOneUnauthorisedAbsenceSession}},\n    \t{{6I_AbsenceFields__NumberOfEnrolmentsWithAtLeastOneAuthorisedAbsenceSession}},\n    \t{{6I_AbsenceFields__NumberOfEnrolmentsWithAtLeastOneOverallAbsenceSession}}\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Abs num miss at least one session - Region - *",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.results.length).to.equal(150); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.results.length; i++) {",
													"        pm.expect(respJson.results[i].geographicLevel).to.equal(\"Region\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 6,\n    \"geographicLevel\": \"Region\",\n    \"timePeriod\": {\n    \t\"startYear\": 2012,\n    \t\"startCode\": \"HT6\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"HT6\"\n    },\n    \"filters\" : [\n        {{6F_StateFundedPrimary}}, \n        {{6F_StateFundedSecondary}}, \n        {{6F_Special}}\n    ],\n    \"indicators\": [\n        {{6I_AbsenceFields__NumberOfEnrolmentsWithAtLeastOneUnauthorisedAbsenceSession}},\n    \t{{6I_AbsenceFields__NumberOfEnrolmentsWithAtLeastOneAuthorisedAbsenceSession}},\n    \t{{6I_AbsenceFields__NumberOfEnrolmentsWithAtLeastOneOverallAbsenceSession}}\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e04223f2-1e08-4ff6-9984-732c655dbcdf",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "368397eb-8cbb-4195-ac61-415b8c3abe28",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Compulsory fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.filters\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.footnotes\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.indicators\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.locations\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.publicationName\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.subjectName\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.timePeriodRange\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"results\"));",
											"});"
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Rate percent bands",
							"item": [
								{
									"name": "Tablebuilder - Abs rate % bands - Country - *",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.results.length).to.equal(306); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.results.length; i++) {",
													"        pm.expect(respJson.results[i].geographicLevel).to.equal(\"Country\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 7,\n    \"geographicLevel\": \"Country\",\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"HT6\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"HT6\"\n    },\n    \"filters\" : [\n        {{7F_StateFundedPrimary}}, \n        {{7F_Special}}, \n        {{7F_StateFundedSecondary}}\n    ],\n    \"indicators\": [\n    \t{{7I_NumberOfAllPupilEnrolmentsThatFallIntoThatPerCentBandForOverallAbsence}},\n    \t{{7I_NumberOfAllPupilEnrolmentsThatFallIntoThatPerCentBandForAuthorisedAbsence}},\n    \t{{7I_NumberOfAllPupilEnrolmentsThatFallIntoThatPerCentBandForUnauthorisedAbsence}}\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "49522da0-95a0-4ddf-9a8a-9ca103db1df2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ca434135-2e41-4ff4-806d-48a458f28b61",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Compulsory fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.filters\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.footnotes\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.indicators\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.locations\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.publicationName\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.subjectName\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.timePeriodRange\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"results\"));",
											"});"
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "fbc8c7a0-54dc-48b7-ac2f-ab840c45cc29",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8141f36f-4bf9-49a4-822c-0c6087cadbbe",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Data",
			"item": [
				{
					"name": "Pupil absence in schools in England",
					"item": [
						{
							"name": "By characteristic",
							"item": [
								{
									"name": "Data - Abs by char - Country - *",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"respJson = pm.response.json()",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.boundaryLevels\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.publicationName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.subjectName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.footnotes\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
													"});",
													"",
													"pm.test(\"Number of metaData filters should be correct\", function () {",
													"   pm.expect(Object.keys(respJson.metaData.filters).length).to.equal(3);",
													"   pm.expect(respJson.metaData.filters.Characteristic.options.Gender.options.length).to.equal(2);",
													"   pm.expect(respJson.metaData.filters.YearBreakdown.options.Default.options.length).to.equal(1);",
													"   pm.expect(respJson.metaData.filters.SchoolType.options.Default.options.length).to.equal(4);",
													"});",
													"",
													"pm.test(\"Number of metaData locations should be correct\", function () {",
													"   pm.expect(Object.keys(respJson.metaData.locations).length).to.equal(1); ",
													"});",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"Country\");",
													"    }",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { ",
													"    pm.expect(respJson.result.length).to.equal(16); ",
													"});",
													"",
													"pm.test(\"Every result should contain location country England only\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].location.country.name).to.equal(\"England\");",
													"        pm.expect(pm.response.to.not.have.jsonBody(`result[${i}].location.localAuthority`));",
													"        pm.expect(pm.response.to.not.have.jsonBody(`result[${i}].location.localAuthorityDistrict`));",
													"        pm.expect(pm.response.to.not.have.jsonBody(`result[${i}].location.region`));",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"geographicLevel\": \"Country\",\n    \"timePeriod\": {\n    \t\"startYear\": 2014,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2015,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{1F_Char__GenderMale}}, \n        {{1F_Char__GenderFemale}}\n    ],\n    \"indicators\": [\n    \t{{1I_AbsenceFields__UnauthorisedAbsenceRate}},\n    \t{{1I_AbsenceFields__OverallAbsenceRate}},\n    \t{{1I_AbsenceFields__AuthorisedAbsenceRate}}\n    ]\n}\n"
										},
										"url": {
											"raw": "{{data_api_url}}/data",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"data"
											]
										}
									},
									"response": []
								},
								{
									"name": "Data - Abs by char - Country - * - Male, Female AND Primary, Secondary",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"respJson = pm.response.json()",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.boundaryLevels\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.publicationName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.subjectName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.footnotes\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
													"});",
													"",
													"pm.test(\"Number of metaData filters should be correct\", function () {",
													"    pm.expect(Object.keys(respJson.metaData.filters).length).to.equal(3);",
													"    pm.expect(respJson.metaData.filters.Characteristic.options.Gender.options.length).to.equal(2);",
													"    pm.expect(respJson.metaData.filters.YearBreakdown.options.Default.options.length).to.equal(1);",
													"    pm.expect(respJson.metaData.filters.SchoolType.options.Default.options.length).to.equal(2);",
													"});",
													"",
													"pm.test(\"Number of metaData locations should be correct\", function () {",
													"   pm.expect(Object.keys(respJson.metaData.locations).length).to.equal(1); ",
													"});",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"Country\");",
													"    }",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { ",
													"    pm.expect(respJson.result.length).to.equal(4); ",
													"});",
													"",
													"pm.test(\"Every result should contain location country England only\", function () {",
													"    for(var i = 0; i < pm.response.json().result.length; i++) {",
													"        pm.expect(respJson.result[i].location.country.name).to.equal(\"England\");",
													"        pm.expect(pm.response.to.not.have.jsonBody(`result[${i}].location.localAuthority`));",
													"        pm.expect(pm.response.to.not.have.jsonBody(`result[${i}].location.localAuthorityDistrict`));",
													"        pm.expect(pm.response.to.not.have.jsonBody(`result[${i}].location.region`));",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"geographicLevel\": \"Country\",\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{1F_Char__GenderMale}}, \n        {{1F_Char__GenderFemale}}, \n        {{1F_SchoolType__StateFundedPrimary}}, \n        {{1F_SchoolType__StateFundedSecondary}}\n    ],\n    \"indicators\": [\n        {{1I_AbsenceFields__UnauthorisedAbsenceRate}},\n    \t{{1I_AbsenceFields__OverallAbsenceRate}},\n    \t{{1I_AbsenceFields__AuthorisedAbsenceRate}}\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/data",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"data"
											]
										}
									},
									"response": []
								},
								{
									"name": "Data - Abs by char - Derbyshire - Male AND Secondary",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa8ea708-fc9c-4520-8df9-a388dd26508d",
												"exec": [
													"respJson = pm.response.json()",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.boundaryLevels\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.publicationName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.subjectName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.footnotes\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
													"});",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"LocalAuthority\");",
													"    }",
													"});",
													"",
													"pm.test(\"Number of metaData filters should be correct\", function () {",
													"    pm.expect(Object.keys(respJson.metaData.filters).length).to.equal(3);",
													"    pm.expect(respJson.metaData.filters.Characteristic.options.Gender.options.length).to.equal(1);",
													"    pm.expect(respJson.metaData.filters.YearBreakdown.options.Default.options.length).to.equal(1);",
													"    pm.expect(respJson.metaData.filters.SchoolType.options.Default.options.length).to.equal(1);",
													"});",
													"",
													"pm.test(\"Number of metaData locations should be correct\", function () {",
													"    pm.expect(Object.keys(respJson.metaData.locations).length).to.equal(1);",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E10000007.geoJson\"));",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.result.length).to.equal(1); });",
													"",
													"pm.test(\"Every result should contain location country, localAuthority, and region\", function () {",
													"    pm.expect(respJson.result[0].location.country.name).to.equal(\"England\");",
													"    pm.expect(pm.response.to.have.jsonBody(`result[${0}].location.localAuthority`));",
													"    pm.expect(pm.response.to.not.have.jsonBody(`result[${0}].location.localAuthorityDistrict`));",
													"    pm.expect(pm.response.to.have.jsonBody(`result[${0}].location.region`));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"localAuthority\": [\n    \t\"E10000007\"\n    ],\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{1F_Char__GenderMale}}, \n        {{1F_SchoolType__StateFundedSecondary}}\n    ],\n    \"indicators\": [\n        {{1I_AbsenceFields__UnauthorisedAbsenceRate}},\n    \t{{1I_AbsenceFields__OverallAbsenceRate}},\n    \t{{1I_AbsenceFields__AuthorisedAbsenceRate}}\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/data",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"data"
											]
										}
									},
									"response": []
								},
								{
									"name": "Data - Abs by char - Wandsworth",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa8ea708-fc9c-4520-8df9-a388dd26508d",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.boundaryLevels\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.publicationName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.subjectName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.footnotes\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
													"});",
													"",
													"pm.test(\"Number of metaData filters should be correct\", function () {",
													"    pm.expect(Object.keys(respJson.metaData.filters).length).to.equal(3);",
													"    pm.expect(respJson.metaData.filters.Characteristic.options.Gender.options.length).to.equal(2);",
													"    pm.expect(respJson.metaData.filters.YearBreakdown.options.Default.options.length).to.equal(1);",
													"    pm.expect(respJson.metaData.filters.SchoolType.options.Default.options.length).to.equal(1);",
													"});",
													"",
													"pm.test(\"Number of metaData locations should be correct and have associated geoJson data\", function () {",
													"   pm.expect(Object.keys(respJson.metaData.locations).length).to.equal(1);",
													"   pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E09000032.geoJson\"));",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.result.length).to.equal(4); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"LocalAuthority\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"localAuthority\": [\n    \t\"E09000032\"\n    ],\n    \"timePeriod\": {\n    \t\"startYear\": 2014,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2015,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{1F_Char__GenderMale}}, \n        {{1F_Char__GenderFemale}}, \n        {{1F_SchoolType__Special}}\n    ],\n    \"indicators\": [\n        {{1I_AbsenceFields__UnauthorisedAbsenceRate}},\n    \t{{1I_AbsenceFields__OverallAbsenceRate}},\n    \t{{1I_AbsenceFields__AuthorisedAbsenceRate}}\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/data",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"data"
											]
										}
									},
									"response": []
								},
								{
									"name": "Data - Abs by char - Hartlepool",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7be51e96-5401-48dc-986c-42c7ee78d7e5",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.boundaryLevels\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.publicationName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.subjectName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.footnotes\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
													"});",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"LocalAuthorityDistrict\");",
													"    }",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { ",
													"    pm.expect(respJson.result.length).to.equal(8);",
													"});",
													"",
													"pm.test(\"Number of metaData locations should be correct and to have associated geoJson data\", function () {",
													"    pm.expect(Object.keys(respJson.metaData.locations).length).to.equal(1);",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E06000001.geoJson\"));",
													"});",
													"",
													"pm.test(\"Number of boundaryLevels should be correct\", function () {",
													"    var foundId8 = false;",
													"    var foundId3 = false;",
													"    for(var i = 0; i < respJson.metaData.boundaryLevels.length; i++) {",
													"        if(respJson.metaData.boundaryLevels[i].id === 8) {",
													"            foundId8 = true;",
													"            pm.expect(respJson.metaData.boundaryLevels[i].label).to.equal(\"Local Authority Districts (April 2019) Boundaries UK BUC\");",
													"        }",
													"        if(respJson.metaData.boundaryLevels[i].id === 3) {",
													"            foundId3 = true;",
													"            pm.expect(respJson.metaData.boundaryLevels[i].label).to.equal(\"Local Authority Districts December 2017 Ultra Generalised Clipped Boundaries in United Kingdom WGS84\");",
													"        }",
													"    }",
													"});",
													"",
													"pm.test(\"All results should have LA District name Hartlepool\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].location.country.name).to.equal(\"England\");",
													"        pm.expect(respJson.result[i].location.localAuthorityDistrict.name).to.equal(\"Hartlepool\");",
													"        pm.expect(respJson.result[i].location.region.name).to.equal(\"North East\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"localAuthorityDistrict\": [\"E06000001\"],\n    \"filters\" : [\n    \t{{1F_Char__Total}}, \n    \t{{1F_Char__FSMEligible}}\n    ],\n    \"indicators\": [\n        {{1I_AbsenceFields__UnauthorisedAbsenceRate}},\n    \t{{1I_AbsenceFields__OverallAbsenceRate}},\n    \t{{1I_AbsenceFields__AuthorisedAbsenceRate}}\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/data",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"data"
											]
										}
									},
									"response": []
								},
								{
									"name": "Data - Abs by char - Hartlepool - boundaryLevel 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa8ea708-fc9c-4520-8df9-a388dd26508d",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.boundaryLevels\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.publicationName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.subjectName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.footnotes\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
													"});",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"LocalAuthorityDistrict\");",
													"    }",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { ",
													"    pm.expect(respJson.result.length).to.equal(8);",
													"});",
													"",
													"pm.test(\"Number of metaData locations should be correct and not have associated geoJson data\", function () {",
													"   pm.expect(Object.keys(respJson.metaData.locations).length).to.equal(1);",
													"   pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E06000001\"));",
													"   pm.expect(pm.response.to.not.have.jsonBody(\"metaData.locations.E06000001.geoJson\"));",
													"});",
													"",
													"pm.test(\"All results should have LA District name Hartlepool\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].location.country.name).to.equal(\"England\");",
													"        pm.expect(respJson.result[i].location.localAuthorityDistrict.name).to.equal(\"Hartlepool\");",
													"        pm.expect(respJson.result[i].location.region.name).to.equal(\"North East\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"localAuthorityDistrict\": [\"E06000001\"],\n    \"filters\" : [\n    \t{{1F_Char__Total}}, \n    \t{{1F_Char__FSMEligible}}\n    ],\n    \"indicators\": [\n        {{1I_AbsenceFields__UnauthorisedAbsenceRate}},\n    \t{{1I_AbsenceFields__OverallAbsenceRate}},\n    \t{{1I_AbsenceFields__AuthorisedAbsenceRate}}\n    ],\n    \"boundaryLevel\": 1\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/data",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"data"
											]
										}
									},
									"response": []
								},
								{
									"name": "Data - Abs by char - Hartlepool - boundaryLevel 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa8ea708-fc9c-4520-8df9-a388dd26508d",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.boundaryLevels\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.publicationName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.subjectName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.footnotes\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
													"});",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"LocalAuthorityDistrict\");",
													"    }",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { ",
													"    pm.expect(respJson.result.length).to.equal(8);",
													"});",
													"",
													"pm.test(\"Number of metaData locations should be correct and to have associated geoJson data\", function () {",
													"   pm.expect(Object.keys(respJson.metaData.locations).length).to.equal(1);",
													"   pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E06000001.geoJson\"));",
													"});",
													"",
													"pm.test(\"All results should have LA District name Hartlepool\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].location.country.name).to.equal(\"England\");",
													"        pm.expect(respJson.result[i].location.localAuthorityDistrict.name).to.equal(\"Hartlepool\");",
													"        pm.expect(respJson.result[i].location.region.name).to.equal(\"North East\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"localAuthorityDistrict\": [\"E06000001\"],\n    \"filters\" : [\n    \t{{1F_Char__Total}}, \n    \t{{1F_Char__FSMEligible}}\n    ],\n    \"indicators\": [\n        {{1I_AbsenceFields__UnauthorisedAbsenceRate}},\n    \t{{1I_AbsenceFields__OverallAbsenceRate}},\n    \t{{1I_AbsenceFields__AuthorisedAbsenceRate}}\n    ],\n    \"boundaryLevel\": 3\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/data",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"data"
											]
										}
									},
									"response": []
								},
								{
									"name": "Data - Abs by char - Hartlepool - boundaryLevel 6",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa8ea708-fc9c-4520-8df9-a388dd26508d",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.boundaryLevels\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.publicationName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.subjectName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.footnotes\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
													"});",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"LocalAuthorityDistrict\");",
													"    }",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { ",
													"    pm.expect(respJson.result.length).to.equal(8);",
													"});",
													"",
													"pm.test(\"Number of metaData locations should be correct and to have associated geoJson data\", function () {",
													"   pm.expect(Object.keys(respJson.metaData.locations).length).to.equal(1);",
													"   pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E06000001\"));",
													"   pm.expect(pm.response.to.not.have.jsonBody(\"metaData.locations.E06000001.geoJson\"));",
													"});",
													"",
													"pm.test(\"All results should have LA District name Hartlepool\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].location.country.name).to.equal(\"England\");",
													"        pm.expect(respJson.result[i].location.localAuthorityDistrict.name).to.equal(\"Hartlepool\");",
													"        pm.expect(respJson.result[i].location.region.name).to.equal(\"North East\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"localAuthorityDistrict\": [\"E06000001\"],\n    \"filters\" : [\n    \t{{1F_Char__Total}}, \n    \t{{1F_Char__FSMEligible}}\n    ],\n    \"indicators\": [\n        {{1I_AbsenceFields__UnauthorisedAbsenceRate}},\n    \t{{1I_AbsenceFields__OverallAbsenceRate}},\n    \t{{1I_AbsenceFields__AuthorisedAbsenceRate}}\n    ],\n    \"boundaryLevel\": 6\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/data",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"data"
											]
										}
									},
									"response": []
								},
								{
									"name": "Data - Abs by char - Adur",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa8ea708-fc9c-4520-8df9-a388dd26508d",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.boundaryLevels\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.publicationName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.subjectName\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.footnotes\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
													"});",
													"",
													"pm.test(\"Number of metaData filters should be correct\", function () {",
													"    pm.expect(Object.keys(respJson.metaData.filters).length).to.equal(3);",
													"    pm.expect(respJson.metaData.filters.Characteristic.options.FSM.options.length).to.equal(2);",
													"    pm.expect(respJson.metaData.filters.YearBreakdown.options.Default.options.length).to.equal(1);",
													"    pm.expect(respJson.metaData.filters.SchoolType.options.Default.options.length).to.equal(1);",
													"});",
													"",
													"pm.test(\"Number of metaData indicators should be correct\", function () {",
													"   pm.expect(Object.keys(respJson.metaData.indicators).length).to.equal(3); ",
													"});",
													"",
													"pm.test(\"Number of metaData locations should be correct\", function () {",
													"   pm.expect(Object.keys(respJson.metaData.locations).length).to.equal(1); ",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { ",
													"    pm.expect(respJson.result.length).to.equal(2);",
													"});",
													"",
													"pm.test(\"All results should have correction location attributes\", function () {",
													"    for(var i = 0; i < pm.response.json().result.length; i++) {",
													"        pm.expect(respJson.result[i].location.localAuthorityDistrict.name).to.equal(\"Adur\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"localAuthorityDistrict\": [\n    \t\"E07000223\"\n    ],\n    \"timePeriod\": {\n    \t\"startYear\": 2014,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{1F_Char__FSMEligible}}, \n        {{1F_Char__FSMNotEligible}}, \n        {{1F_Char__FSMUnclassified}}, \n        {{1F_SchoolType__Special}}\n    ],\n    \"indicators\": [\n        {{1I_AbsenceFields__UnauthorisedAbsenceRate}},\n    \t{{1I_AbsenceFields__OverallAbsenceRate}},\n    \t{{1I_AbsenceFields__AuthorisedAbsenceRate}}\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/data",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"data"
											]
										}
									},
									"response": []
								},
								{
									"name": "Data - Abs by char - Adur (LAD) + Wandsworth (LA)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa8ea708-fc9c-4520-8df9-a388dd26508d",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
													"});",
													"",
													"pm.test(\"Number of metaData filters should be correct\", function () {",
													"    pm.expect(Object.keys(respJson.metaData.filters).length).to.equal(3);",
													"    pm.expect(respJson.metaData.filters.Characteristic.options.FSM.options.length).to.equal(3);",
													"    pm.expect(respJson.metaData.filters.YearBreakdown.options.Default.options.length).to.equal(1);",
													"    pm.expect(respJson.metaData.filters.SchoolType.options.Default.options.length).to.equal(4);",
													"});",
													"",
													"pm.test(\"Number of metaData indicators should be correct\", function () {",
													"   pm.expect(Object.keys(respJson.metaData.indicators).length).to.equal(5); ",
													"});",
													"",
													"pm.test(\"Number of metaData locations should be correct\", function () {",
													"   pm.expect(Object.keys(respJson.metaData.locations).length).to.equal(2);",
													"   pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E09000032\")); // LA Wandsworth",
													"   pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E07000223\")); // LAD Adur",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { ",
													"    pm.expect(respJson.result.length).to.equal(35); // LA 24 + LAD 11",
													"});",
													"",
													"pm.test(\"All results should have correction geographicLevel\", function () {",
													"    for(var i = 0; i < pm.response.json().result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.satisfy(function(geoLevel) {",
													"           return geoLevel === \"LocalAuthority\" || geoLevel === \"LocalAuthorityDistrict\"; ",
													"        });",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"localAuthority\": [\"E09000032\"],\n    \"localAuthorityDistrict\": [\"E07000223\"],\n    \"timePeriod\": {\n    \t\"startYear\": 2015,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{1F_Char__FSMEligible}}, \n        {{1F_Char__FSMNotEligible}}, \n        {{1F_Char__FSMUnclassified}}\n    ],\n    \"indicators\": [\n    \t{{1I_AbsenceForPersistentAbsentees__NumberOfAuthorisedAbsenceSessionsForPersistentAbsentees}},\n    \t{{1I_AbsenceByReason__NumberOfUnauthorisedReasonsSessions}},\n    \t{{1I_AbsenceByReason__NumberOfUnauthorisedOtherSessions}},\n    \t{{1I_AbsenceByReason__NumberOfNoReasonYetSessions}},\n    \t{{1I_AbsenceByReason__NumberOfLateSessions}}\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/data",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"data"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ec9d2b73-2598-40e5-abd3-b8598bbf2497",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "65c89d21-118a-4749-bd42-fa874f4a7be9",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d788e097-9c6f-43c3-89bc-db3db49c5404",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "07a946d0-b2d1-44a1-acc5-a04c987e7a69",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Permalink",
			"item": [
				{
					"name": "Permalink - Abs by char - create permalink",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bf224cd6-d62d-4b6b-afd4-8cf2e352fcbd",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// NOTE: Save permalink id for use in the next request",
									"pm.globals.set(\"permalink_id\", respJson.id);",
									"",
									"pm.test(\"Fields are present\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"created\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"fullTable\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"fullTable.subjectMeta\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"fullTable.results\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"query\"));",
									"});",
									"",
									"pm.test(\"Number of subjectMeta filters should be correct\", function () {",
									"   pm.expect(Object.keys(respJson.fullTable.subjectMeta.filters).length).to.equal(3);",
									"});",
									"",
									"pm.test(\"Number of subjectMeta locations should be correct\", function () {",
									"   pm.expect(respJson.fullTable.subjectMeta.locations.length).to.equal(1); ",
									"   pm.expect(respJson.fullTable.subjectMeta.locations[0].label).to.equal(\"England\");",
									"});",
									"",
									"pm.test(\"geographicLevel should be same as request\", function () {",
									"    for(var i = 0; i < respJson.fullTable.results.length; i++) {",
									"        pm.expect(respJson.fullTable.results[i].geographicLevel).to.equal(\"Country\");",
									"    }",
									"});",
									"",
									"pm.test(\"Number of results should be correct\", function () { ",
									"    pm.expect(respJson.fullTable.results.length).to.equal(4); ",
									"});",
									"",
									"pm.test(\"Every result should contain location country England only\", function () {",
									"    for(var i = 0; i < respJson.fullTable.results.length; i++) {",
									"        pm.expect(respJson.fullTable.results[i].location.country.name).to.equal(\"England\");",
									"        pm.expect(pm.response.to.not.have.jsonBody(`fullTable.results[${i}].location.localAuthority`));",
									"        pm.expect(pm.response.to.not.have.jsonBody(`fullTable.results[${i}].location.localAuthorityDistrict`));",
									"        pm.expect(pm.response.to.not.have.jsonBody(`fullTable.results[${i}].location.region`));",
									"    }",
									"});",
									"",
									"pm.test(\"Query contains publication id\", function () {",
									"   pm.expect(respJson.query.publicationId).to.equal(\"cbbd299f-8297-44bc-92ac-558bcf51f8ad\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2cec492a-fc8e-4e42-9663-af2f42ae27c7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"subjectId\": 1,\n    \"country\": [\"E92000001\"],\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{1F_Char__Total}}\n    ],\n    \"indicators\": [\n    \t{{1I_AbsenceFields__NumberOfPupilEnrolments}},\n    \t{{1I_AbsenceFields__UnauthorisedAbsenceRate}},\n    \t{{1I_AbsenceFields__OverallAbsenceRate}}\n    ]\n}"
						},
						"url": {
							"raw": "{{data_api_url}}/permalink",
							"host": [
								"{{data_api_url}}"
							],
							"path": [
								"permalink"
							]
						}
					},
					"response": []
				},
				{
					"name": "Permalink - Abs by char - get created permalink",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4305c315-122a-4d29-ace3-0af70e73d69a",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Should have correct fields\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"created\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"fullTable\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"fullTable.subjectMeta\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"fullTable.results\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"query\"));",
									"});",
									"",
									"pm.test(\"Response id should match request permalink id\", function () {",
									"    pm.expect(respJson.id).to.equal(pm.globals.get(\"permalink_id\"));",
									"});",
									"",
									"pm.test(\"Number of subjectMeta filters should be correct\", function () {",
									"   pm.expect(Object.keys(respJson.fullTable.subjectMeta.filters).length).to.equal(3);",
									"});",
									"",
									"pm.test(\"Number of subjectMeta locations should be correct\", function () {",
									"   pm.expect(respJson.fullTable.subjectMeta.locations.length).to.equal(1); ",
									"   pm.expect(respJson.fullTable.subjectMeta.locations[0].label).to.equal(\"England\");",
									"});",
									"",
									"pm.test(\"geographicLevel should be same as request\", function () {",
									"    for(var i = 0; i < respJson.fullTable.results.length; i++) {",
									"        pm.expect(respJson.fullTable.results[i].geographicLevel).to.equal(\"Country\");",
									"    }",
									"});",
									"",
									"pm.test(\"Number of results should be correct\", function () { ",
									"    pm.expect(respJson.fullTable.results.length).to.equal(4); ",
									"});",
									"",
									"pm.test(\"Every result should contain location country England only\", function () {",
									"    for(var i = 0; i < respJson.fullTable.results.length; i++) {",
									"        pm.expect(respJson.fullTable.results[i].location.country.name).to.equal(\"England\");",
									"        pm.expect(pm.response.to.not.have.jsonBody(`fullTable.results[${i}].location.localAuthority`));",
									"        pm.expect(pm.response.to.not.have.jsonBody(`fullTable.results[${i}].location.localAuthorityDistrict`));",
									"        pm.expect(pm.response.to.not.have.jsonBody(`fullTable.results[${i}].location.region`));",
									"    }",
									"});",
									"",
									"pm.test(\"Query contains publication id\", function () {",
									"   pm.expect(respJson.query.publicationId).to.equal(\"cbbd299f-8297-44bc-92ac-558bcf51f8ad\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{data_api_url}}/permalink/{{permalink_id}}",
							"host": [
								"{{data_api_url}}"
							],
							"path": [
								"permalink",
								"{{permalink_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Permalink - invalid permalinkId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "022c9044-3a78-41f6-9476-916e5c92e4b6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c80a67f6-be1b-4a79-89b6-f21275308965",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{data_api_url}}/permalink/5948f25b-25ae-488a-bf54-e8913e89de18",
							"host": [
								"{{data_api_url}}"
							],
							"path": [
								"permalink",
								"5948f25b-25ae-488a-bf54-e8913e89de18"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Fasttrack",
			"item": [
				{
					"name": "Fasttrack - Abs for four YO - get fasttrack",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0eff5d76-4361-43c8-92b1-fcd6f6238f37",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Should have correct fields\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"created\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"fullTable\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"fullTable.subjectMeta\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"fullTable.results\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"query\"));",
									"});",
									"",
									"pm.test(\"Response id should match request fasttrack id\", function () {",
									"    pm.expect(respJson.id).to.equal(\"f8911c5f-7d42-4051-a85c-34d2f4568c6d\");",
									"});",
									"",
									"pm.test(\"Created date should be correct\", function () {",
									"    pm.expect(respJson.created).to.equal(\"2019-09-06T14:42:05.5042107Z\");",
									"});",
									"",
									"pm.test(\"Number of subjectMeta filters should be correct\", function () {",
									"   pm.expect(Object.keys(respJson.fullTable.subjectMeta.filters).length).to.equal(1);",
									"});",
									"",
									"pm.test(\"Number of subjectMeta locations should be correct\", function () {",
									"   pm.expect(respJson.fullTable.subjectMeta.locations.length).to.equal(1); ",
									"   pm.expect(respJson.fullTable.subjectMeta.locations[0].label).to.equal(\"Derbyshire\");",
									"});",
									"",
									"pm.test(\"geographicLevel should be same as request\", function () {",
									"    for(var i = 0; i < respJson.fullTable.results.length; i++) {",
									"        pm.expect(respJson.fullTable.results[i].geographicLevel).to.equal(\"LocalAuthority\");",
									"    }",
									"});",
									"",
									"pm.test(\"Number of results should be correct\", function () { ",
									"    pm.expect(respJson.fullTable.results.length).to.equal(3); ",
									"});",
									"",
									"pm.test(\"Query contains publication id\", function () {",
									"   pm.expect(respJson.query.publicationId).to.equal(\"cbbd299f-8297-44bc-92ac-558bcf51f8ad\");",
									"});",
									"",
									"pm.test(\"Query contains table configuration\", function () {",
									"    var tableHeadersConfig = respJson.query.configuration.tableHeadersConfig;",
									"    pm.expect(tableHeadersConfig.columnGroups.length).to.equal(1);",
									"    pm.expect(tableHeadersConfig.columnGroups[0].length).to.equal(1);",
									"    pm.expect(tableHeadersConfig.columnGroups[0][0].label).to.equal(\"State-funded primary\");",
									"    pm.expect(tableHeadersConfig.columns.length).to.equal(3);",
									"    pm.expect(tableHeadersConfig.columns[0].label).to.equal(\"2014/15\");",
									"    pm.expect(tableHeadersConfig.columns[1].label).to.equal(\"2015/16\");",
									"    pm.expect(tableHeadersConfig.columns[2].label).to.equal(\"2016/17\");",
									"    pm.expect(tableHeadersConfig.rowGroups.length).to.equal(1);",
									"    pm.expect(tableHeadersConfig.rowGroups[0].length).to.equal(1);",
									"    pm.expect(tableHeadersConfig.rowGroups[0][0].label).to.equal(\"Derbyshire\");",
									"});",
									"",
									"pm.test(\"Query contains expected fields\", function () {",
									"    pm.expect(respJson.query.subjectId).to.equal(4);",
									"    pm.expect(respJson.query.timePeriod.startYear).to.equal(2014);",
									"    pm.expect(respJson.query.timePeriod.startCode).to.equal(\"HT6\");",
									"    pm.expect(respJson.query.timePeriod.endYear).to.equal(2016);",
									"    pm.expect(respJson.query.timePeriod.endCode).to.equal(\"HT6\");",
									"    pm.expect(respJson.query.filters.length).to.equal(1);",
									"    pm.expect(respJson.query.filters[0]).to.equal(parseInt(pm.globals.get(\"4F_SchoolType__StateFundedPrimary\")));",
									"    pm.expect(respJson.query.indicators.length).to.equal(1);",
									"    pm.expect(respJson.query.indicators[0]).to.equal(parseInt(pm.globals.get(\"4I_AbsenceFields__NumberOfOverallAbsenceSessions\")));",
									"    pm.expect(respJson.query.localAuthority.length).to.equal(1);",
									"    pm.expect(respJson.query.localAuthority[0]).to.equal(\"E10000007\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{data_api_url}}/fasttrack/f8911c5f-7d42-4051-a85c-34d2f4568c6d",
							"host": [
								"{{data_api_url}}"
							],
							"path": [
								"fasttrack",
								"f8911c5f-7d42-4051-a85c-34d2f4568c6d"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fasttrack - invalid fasttrackId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "022c9044-3a78-41f6-9476-916e5c92e4b6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c80a67f6-be1b-4a79-89b6-f21275308965",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{data_api_url}}/fasttrack/1ac50422-3e16-407a-b6c7-63af2d1ed1c1",
							"host": [
								"{{data_api_url}}"
							],
							"path": [
								"fasttrack",
								"1ac50422-3e16-407a-b6c7-63af2d1ed1c1"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ed583c2e-33b1-4e58-b324-6c75f5dd0180",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a2fe84e3-f593-456d-be3e-e73aa891f1a8",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Download",
			"item": [
				{
					"name": "Download - Abs by term",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a8450e2f-c9ab-49e3-ade8-a3a285209058",
								"exec": [
									"pm.test(\"Status code is 200\", function () { ",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"pm.test(\"First line of CSV should be correct\", function () { ",
									"    pm.expect(pm.response.text()).to.contain(\"time_identifier,term,time_period,geographic_level,country_code,country_name,region_code,region_name,old_la_code,new_la_code,la_name,school_type,sess_possible,sess_overall,sess_authorised,sess_unauthorised,sess_overall_percent,sess_authorised_percent,sess_unauthorised_percent,sess_auth_illness,sess_auth_appointments,sess_auth_religious,sess_auth_study,sess_auth_traveller,sess_auth_holiday,sess_auth_ext_holiday,sess_auth_excluded,sess_auth_other,sess_auth_totalreasons,sess_unauth_holiday,sess_unauth_late,sess_unauth_other,sess_unauth_noyet,sess_unauth_totalreasons,sess_overall_totalreasons\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{data_api_url}}/download/pupil-absence-in-schools-in-england/2016-17/absence_by_term.csv",
							"host": [
								"{{data_api_url}}"
							],
							"path": [
								"download",
								"pupil-absence-in-schools-in-england",
								"2016-17",
								"absence_by_term.csv"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "134cd34a-d839-401e-bc0b-88090d1b51c9",
				"type": "text/javascript",
				"exec": [
					"// Absence by characteristic",
					"pm.globals.set(\"1F_Char__Total\", \"1\");",
					"pm.globals.set(\"1F_Char__GenderMale\", \"53\");",
					"pm.globals.set(\"1F_Char__GenderFemale\", \"52\");",
					"pm.globals.set(\"1F_SchoolType__Total\", \"58\");",
					"pm.globals.set(\"1F_SchoolType__StateFundedPrimary\", \"57\");",
					"pm.globals.set(\"1F_SchoolType__StateFundedSecondary\", \"56\");",
					"pm.globals.set(\"1F_SchoolType__Special\", \"55\");",
					"pm.globals.set(\"1F_Char__FSMEligible\", \"18\");",
					"pm.globals.set(\"1F_Char__FSMNotEligible\", \"10\");",
					"pm.globals.set(\"1F_Char__FSMUnclassified\", \"8\");",
					"pm.globals.set(\"1F_Char__EthMinor_Irish\", \"50\");",
					"pm.globals.set(\"1F_YearBreakdown__SixHalfTerms\", \"54\");",
					"",
					"pm.globals.set(\"1I_AbsenceFields__NumberOfPupilEnrolments\", \"1\");",
					"pm.globals.set(\"1I_AbsenceFields__NumberOfSessionsPossible\", \"25\");",
					"pm.globals.set(\"1I_AbsenceFields__UnauthorisedAbsenceRate\", \"23\");",
					"pm.globals.set(\"1I_AbsenceFields__OverallAbsenceRate\", \"26\");",
					"pm.globals.set(\"1I_AbsenceFields__AuthorisedAbsenceRate\", \"28\");",
					"pm.globals.set(\"1I_AbsenceFields__PercentageOfPersistentAbsentees\", \"30\");",
					"pm.globals.set(\"1I_AbsenceFields__NumberOfPersistentAbsentees\", \"31\");",
					"pm.globals.set(\"1I_AbsenceForPersistentAbsentees__NumberOfAuthorisedAbsenceSessionsForPersistentAbsentees\", \"6\");",
					"pm.globals.set(\"1I_AbsenceByReason__NumberOfUnauthorisedReasonsSessions\", \"7\");",
					"pm.globals.set(\"1I_AbsenceByReason__NumberOfUnauthorisedOtherSessions\", \"8\");",
					"pm.globals.set(\"1I_AbsenceByReason__NumberOfNoReasonYetSessions\", \"9\");",
					"pm.globals.set(\"1I_AbsenceByReason__NumberOfLateSessions\", \"10\");",
					"",
					"// Absence by geographic level",
					"pm.globals.set(\"2F_SchoolType__Total\", \"82\");",
					"pm.globals.set(\"2F_SchoolType__StateFundedPrimary\", \"83\");",
					"pm.globals.set(\"2F_SchoolType__StateFundedSecondary\", \"84\");",
					"pm.globals.set(\"2F_SchoolType__Special\", \"85\");",
					"pm.globals.set(\"2F_YearBreakdown__SixHalfTerms\", \"86\");",
					"pm.globals.set(\"2F_YearBreakdown__FiveHalfTerms\", \"87\");",
					"",
					"pm.globals.set(\"2I_AbsenceFields__OverallAbsenceRate\", \"57\");",
					"pm.globals.set(\"2I_AbsenceFields__AuthorisedAbsenceRate\", \"59\");",
					"pm.globals.set(\"2I_AbsenceFields__UnauthorisedAbsenceRate\", \"66\");",
					"pm.globals.set(\"2I_AbsenceFields__PercentageOfPersistentAbsentees\", \"61\");",
					"pm.globals.set(\"2I_AbsenceByReason__NumberOfIllnessSessions\", \"48\");",
					"pm.globals.set(\"2I_AbsenceByReason__NumberOfExtendedAuthorisedHolidaySessions\", \"42\");",
					"",
					"// Absence by term",
					"pm.globals.set(\"3F_StateFundedPrimary\", \"88\");",
					"pm.globals.set(\"3F_StateFundedSecondary\", \"89\");",
					"pm.globals.set(\"3F_Special\", \"90\");",
					"",
					"pm.globals.set(\"3I_AbsenceFields__NumberOfSessionsPossible\", \"68\");",
					"pm.globals.set(\"3I_AbsenceFields__NumberOfUnauthorisedAbsenceSessions\", \"86\");",
					"pm.globals.set(\"3I_AbsenceFields__NumberOfAuthorisedAbsenceSessions\", \"87\");",
					"pm.globals.set(\"3I_AbsenceFields__NumberOfOverallAbsenceSessions\", \"88\");",
					"",
					"// Absence for four year olds",
					"pm.globals.set(\"4F_SchoolType__Total\", \"98\");",
					"pm.globals.set(\"4F_SchoolType__StateFundedPrimary\", \"97\");",
					"pm.globals.set(\"4F_SchoolType__StateFundedSecondary\", \"95\");",
					"pm.globals.set(\"4F_SchoolType__Special\", \"96\");",
					"",
					"pm.globals.set(\"4I_AbsenceFields__NumberOfPupilEnrolments\", \"92\");",
					"pm.globals.set(\"4I_AbsenceFields__OverallAbsenceRate\", \"95\");",
					"pm.globals.set(\"4I_AbsenceFields__NumberOfOverallAbsenceSessions\", \"94\");",
					"",
					"// Absence in PRUs",
					"pm.globals.set(\"5F_PupilReferralUnit\", \"99\");",
					"",
					"pm.globals.set(\"5I_AbsenceFields__NumberOfSchools\", \"96\");",
					"pm.globals.set(\"5I_AbsenceFields__UnauthorisedAbsenceRate\", \"113\");",
					"pm.globals.set(\"5I_AbsenceFields__AuthorisedAbsenceRate\", \"114\");",
					"pm.globals.set(\"5I_AbsenceFields__OverallAbsenceRate\", \"115\");",
					"",
					"// Number missing at least one session by reason",
					"pm.globals.set(\"6F_StateFundedPrimary\", \"101\");",
					"pm.globals.set(\"6F_StateFundedSecondary\", \"102\");",
					"pm.globals.set(\"6F_Special\", \"103\");",
					"",
					"pm.globals.set(\"6I_AbsenceFields__NumberOfEnrolmentsWithAtLeastOneUnauthorisedAbsenceSession\", \"135\");",
					"pm.globals.set(\"6I_AbsenceFields__NumberOfEnrolmentsWithAtLeastOneAuthorisedAbsenceSession\", \"136\");",
					"pm.globals.set(\"6I_AbsenceFields__NumberOfEnrolmentsWithAtLeastOneOverallAbsenceSession\", \"137\");",
					"",
					"// Rate percent bands",
					"pm.globals.set(\"7F_StateFundedPrimary\", \"180\");",
					"pm.globals.set(\"7F_StateFundedSecondary\", \"179\");",
					"pm.globals.set(\"7F_Special\", \"178\");",
					"",
					"pm.globals.set(\"7I_NumberOfAllPupilEnrolmentsThatFallIntoThatPerCentBandForOverallAbsence\", \"140\");",
					"pm.globals.set(\"7I_NumberOfAllPupilEnrolmentsThatFallIntoThatPerCentBandForAuthorisedAbsence\", \"142\");",
					"pm.globals.set(\"7I_NumberOfAllPupilEnrolmentsThatFallIntoThatPerCentBandForUnauthorisedAbsence\", \"144\");",
					"",
					"",
					"// Misc",
					"pm.globals.set(\"XI_INVALID\", \"111212\");"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "9279878e-d394-4bcd-a0d0-a638c88016dc",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}