{
	"info": {
		"_postman_id": "428f6ddb-8045-4eb9-85ee-9174c0c3cf0a",
		"name": "DfE Admin API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Contacts",
			"item": [
				{
					"name": "Contacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2db4ed0b-6eeb-40b6-914f-f1692eb248fb",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Fields are present\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0].id\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0].teamName\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0].teamEmail\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0].contactName\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0].contactTelNo\"));",
									"});",
									"",
									"pm.test(\"School absence and exclusions team details should be correct\", function () { ",
									"    var team = respJson.filter(function(team) { return team.teamName === \"School absence and exclusions team\"});",
									"    pm.expect(team.length).to.equal(1);",
									"    var team = team[0];",
									"    pm.expect(team.teamEmail).to.equal(\"schools.statistics@education.gov.uk\");",
									"    pm.expect(team.contactName).to.equal(\"Mark Pearson\");",
									"    pm.expect(team.contactTelNo).to.equal(\"01142742585\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": ".AspNetCore.AzureADCookie={{azure_ad_cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/contacts",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"contacts"
							]
						},
						"description": "Returns all contacts"
					},
					"response": []
				}
			]
		},
		{
			"name": "Meta",
			"item": [
				{
					"name": "Time identifers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd44e1ec-7bf1-419d-9a9e-1317325d0595",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Expect the correct fields\", function () {",
									"    for(var i = 0; i < respJson.length; i++) {",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].category`));",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].category.value`));",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].category.label`));",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].timeIdentifiers`));",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].timeIdentifiers[0].identifier`));",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].timeIdentifiers[0].identifier.value`));",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].timeIdentifiers[0].identifier.label`));",
									"    }",
									"});",
									"",
									"pm.test(\"Expect AcademicYear results to be correct\", function () {",
									"    for(var i = 0; i < respJson.length; i++) {",
									"        if(respJson[i].category.value === \"AcademicYear\") {",
									"            pm.expect(respJson[i].category.label).to.equal(\"Academic year\");",
									"            pm.expect(respJson[i].timeIdentifiers.length).to.equal(13);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"pm.test(\"Expect Month results to be correct\", function () {",
									"    for(var i = 0; i < respJson.length; i++) {",
									"        if(respJson[i].category.value === \"Month\") {",
									"            pm.expect(respJson[i].category.label).to.equal(\"Month\");",
									"            pm.expect(respJson[i].timeIdentifiers.length).to.equal(12);",
									"            break;",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": ".AspNetCore.AzureADCookie={{azure_ad_cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/meta/timeidentifiers",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"meta",
								"timeidentifiers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Release types",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7a6fd139-bc0d-4c80-96f1-4b6439171c35",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should correct number of results\", function () { pm.expect(respJson.length).to.equal(3); });",
									"",
									"pm.test(\"Results titles should be correct\", function () {",
									"    var foundAdHoc = false;",
									"    var foundNationalStatistics = false;",
									"    var foundOfficialStatistics = false;",
									"    for(var i = 0; i < respJson.length; i++) {",
									"        if(respJson[i].title === \"Ad Hoc\") { foundAdHoc = true; }",
									"        if(respJson[i].title === \"National Statistics\") { foundNationalStatistics = true; }",
									"        if(respJson[i].title === \"Official Statistics\") { foundOfficialStatistics = true; }",
									"    }",
									"    pm.expect(foundAdHoc).to.equal(true, \"No Ad Hoc type found!\");",
									"    pm.expect(foundNationalStatistics).to.equal(true, \"No National Statistics type found!\")",
									"    pm.expect(foundOfficialStatistics).to.equal(true, \"No Official Statistics type found!\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": ".AspNetCore.AzureADCookie={{azure_ad_cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/meta/releasetypes",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"meta",
								"releasetypes"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Methodologies",
			"item": [
				{
					"name": "Methodologies",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e472dd85-13ad-411e-bdcc-d5e6e875df7f",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.be.above(2);    ",
									"});",
									"",
									"pm.test(\"Title for Exclusion methodology should be correct\", function () {",
									"    var foundExclusion = false;",
									"    for(var i = 0; i < respJson.length; i++) {",
									"        if(respJson[i].id === \"c8c911e3-39c1-452b-801f-25bb79d1deb7\") {",
									"            foundExclusion = true;",
									"                pm.expect(respJson[i].title).to.equal(\"Pupil exclusion statistics: methodology\"); ",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": ".AspNetCore.AzureADCookie={{azure_ad_cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/methodologies",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"methodologies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Methodologies for topic - Exclusions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "372a9979-fd08-4af1-bb4c-5314db6a237b",
								"exec": [
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.be.above(0);    ",
									"});",
									"",
									"pm.test(\"Result should be correct\", function () { ",
									"    pm.expect(pm.response.json()[0].id).to.equal(\"c8c911e3-39c1-452b-801f-25bb79d1deb7\");",
									"    pm.expect(pm.response.json()[0].title).to.equal(\"Pupil exclusion statistics: methodology\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": ".AspNetCore.AzureADCookie={{azure_ad_cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/topic/77941B7D-BBD6-4069-9107-565AF89E2DEC/methodologies",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"topic",
								"77941B7D-BBD6-4069-9107-565AF89E2DEC",
								"methodologies"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Theme",
			"item": [
				{
					"name": "Get my themes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2db4ed0b-6eeb-40b6-914f-f1692eb248fb",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { ",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Number of themes should be correct\", function () {",
									"    pm.expect(respJson.length).to.be.above(8);",
									"});",
									"",
									"pm.test(\"First result should have correct fields\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0].id\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0].title\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0].topics\"));",
									"});",
									"",
									"pm.test(\"Number of topics and fields of first topic under Pupils and schools should be correct\", function () {",
									"    var foundPupilsAndSchools = false;",
									"    for(var i = 0; i < respJson.length; i++) {",
									"        if(respJson[i].title === \"Pupils and schools\") {",
									"            foundPupilsAndSchools = true;",
									"            pm.expect(respJson[i].topics.length).to.equal(9);",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].topics[0].id`));",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].topics[0].title`));",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].topics[0].themeId`));",
									"        }",
									"    }",
									"    pm.expect(foundPupilsAndSchools).to.equal(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": ".AspNetCore.AzureADCookie={{azure_ad_cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/me/themes",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"me",
								"themes"
							]
						},
						"description": "Returns all contacts"
					},
					"response": []
				}
			]
		},
		{
			"name": "Publication",
			"item": [
				{
					"name": "Get publication - Pupil absence in schools in England",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "50f6efbc-4157-4ec4-b3f2-a7c2cb4abe9e",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Expect correct fields\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(`id`));",
									"    pm.expect(pm.response.to.have.jsonBody(`title`));",
									"    pm.expect(pm.response.to.have.jsonBody(`nextUpdate`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases`));",
									"    pm.expect(pm.response.to.have.jsonBody(`methodology`));",
									"    pm.expect(pm.response.to.have.jsonBody(`topicId`));",
									"    pm.expect(pm.response.to.have.jsonBody(`contact`));",
									"});",
									"",
									"pm.test(\"Response id and title should be correct\", function () {",
									"    pm.expect(respJson.id).to.equal(\"cbbd299f-8297-44bc-92ac-558bcf51f8ad\");",
									"    pm.expect(respJson.title).to.equal(\"Pupil absence in schools in England\"); ",
									"});",
									"",
									"",
									"pm.test(\"Methodology title should be correct\", function () {",
									"    pm.expect(respJson.methodology.title).to.equal(\"Pupil absence statistics: methodology\"); ",
									"});",
									"",
									"pm.test(\"Should be at least one release\", function () {",
									"    pm.expect(respJson.releases.length).to.be.above(0); ",
									"});",
									"",
									"pm.test(\"First release should have correct fields\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].id`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].title`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].publicationId`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].publicationTitle`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].releaseName`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].coverageTitle`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].yearTitle`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].typeId`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].published`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].timePeriodCoverage`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].timePeriodCoverage.value`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].timePeriodCoverage.label`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].latestRelease`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].type`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].type.id`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].type.title`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].contact`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].contact.id`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].contact.teamName`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].contact.teamEmail`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].contact.contactName`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].contact.contactTelNo`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].status`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].draftComments`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].higherReviewComments`));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "152c86f6-6905-4366-a08e-4b8a54d6c2ec",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": ".AspNetCore.AzureADCookie={{azure_ad_cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/publications/cbbd299f-8297-44bc-92ac-558bcf51f8ad",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"publications",
								"cbbd299f-8297-44bc-92ac-558bcf51f8ad"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user's topic - Pupil absence",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7cbd4f1c-cf5e-4b8a-b7ec-c2e479396b3a",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(respJson.length).to.be.above(0);    ",
									"});",
									"",
									"pm.test(\"Response should contain \\\"Pupil absence in schools in England: autumn term\\\"\", function () {",
									"   var foundTitle = false;",
									"   for(var i = 0; i < respJson.length; i++) {",
									"       if(respJson[i].title === \"Pupil absence in schools in England: autumn term\") foundTitle = true;",
									"   }",
									"   pm.expect(foundTitle).to.equal(true);",
									"});",
									"",
									"pm.test(\"Expect latestRelease flag on releases\", function () {",
									"    for(var i = 0; i < respJson.length; i++) {",
									"        for(var j = 0; j < respJson[i].releases.length; j++) {",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].releases[${j}].latestRelease`));",
									"        }",
									"    }",
									"});",
									"",
									"pm.test(\"Expect non-null methodology to have correct fields\", function () {",
									"    for(var i = 0; i < respJson.length; i++) {",
									"        if(respJson[i].methodology != null) {",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].methodology.id`));",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].methodology.title`));",
									"        }",
									"    }",
									"});",
									"",
									"pm.test(\"Expect non-null contacts to have correct fields\", function () {",
									"    for(var i = 0; i < respJson.length; i++) {",
									"        if(respJson[i].contact != null) {",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].contact.id`));",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].contact.teamName`));",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].contact.teamEmail`));",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].contact.contactName`));",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].contact.contactTelNo`));            ",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5c3f3658-a145-40af-9a97-5f9f0e1f241c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": ".AspNetCore.AzureADCookie={{azure_ad_cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/me/publications?topicId=67C249DE-1CCA-446E-8CCB-DCDAC542F460",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"me",
								"publications"
							],
							"query": [
								{
									"key": "topicId",
									"value": "67C249DE-1CCA-446E-8CCB-DCDAC542F460"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user's topic - School applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aad25515-6076-4a4a-b609-61fe0a986e11",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(respJson.length).to.be.above(0);    ",
									"});",
									"",
									"pm.test(\"Expect the correct fields\", function () {",
									"    for(var i = 0; i < respJson.length; i++) {",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].topicId`));",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].nextUpdate`));",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].releases`));",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].methodology`));",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].contact`));",
									"    }",
									"});",
									"",
									"pm.test(\"First result's title should be correct\", function () { ",
									"    pm.expect(respJson[0].title).to.equal(\"Secondary and primary schools applications and offers\"); ",
									"});",
									"",
									"pm.test(\"Expect latestRelease flag if releases is more than 0\", function () {",
									"    for(var i = 0; i < respJson.length; i++) {",
									"        if(respJson[i].releases !== null) {",
									"            for(var j = 0; j < respJson[i].releases.length; j++) {",
									"                 pm.expect(pm.response.to.have.jsonBody(`[${i}].releases[${j}].latestRelease`));",
									"            }",
									"        }",
									"    }",
									"});",
									"",
									"pm.test(\"Expect non-null methodology to have correct fields\", function () {",
									"    for(var i = 0; i < respJson.length; i++) {",
									"        if(respJson[i].methodology !== null) {",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].methodology.id`));",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].methodology.title`));",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": ".AspNetCore.AzureADCookie={{azure_ad_cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/me/publications?topicId=1a9636e4-29d5-4c90-8c07-f41db8dd019c",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"me",
								"publications"
							],
							"query": [
								{
									"key": "topicId",
									"value": "1a9636e4-29d5-4c90-8c07-f41db8dd019c"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Release",
			"item": [
				{
					"name": "Release - Get approved releases",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c06ee174-3e90-44b8-b9a8-32283e7dde7c",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should have at least one result\", function () { ",
									"    pm.expect(respJson.length).to.above(0);",
									"});",
									"",
									"pm.test(\"Fields of first result are correct\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0]id\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0]title\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0]publicationId\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0]publicationTitle\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0]releaseName\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0]coverageTitle\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0]yearTitle\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0]typeId\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0]nextReleaseDate\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0]publishScheduled\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0]timePeriodCoverage\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0]latestRelease\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0]type\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0]contact\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0]status\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0]internalReleaseNote\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0]draftComments\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0]higherReviewComments\"));",
									"});",
									"",
									"pm.test(\"Every result should be status Approved\", function () {",
									"    for(var i = 0; i < respJson.length; i++) {",
									"        pm.expect(respJson[i].status).to.equal(\"Approved\");",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dbde4b62-47dd-4c3d-93dc-5e01ec3f8231",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": ".AspNetCore.AzureADCookie={{azure_ad_cookie}}"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/releases/scheduled",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"releases",
								"scheduled"
							]
						}
					},
					"response": []
				},
				{
					"name": "Release - Get exclusion release datablocks",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c06ee174-3e90-44b8-b9a8-32283e7dde7c",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Fields are present\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0]id\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0]heading\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0]dataBlockRequest\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0]dataBlockRequest.subjectId\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0]dataBlockRequest.timePeriod\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0]dataBlockRequest.filters\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0]dataBlockRequest.indicators\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0]charts\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0]tables\"));",
									"});",
									"",
									"pm.test(\"Number of results should be correct\", function () { ",
									"    pm.expect(respJson.length).to.above(0);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dbde4b62-47dd-4c3d-93dc-5e01ec3f8231",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": ".AspNetCore.AzureADCookie={{azure_ad_cookie}}"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/e7774a74-1f62-4b76-b9b5-84f14dac7278/datablocks/",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"e7774a74-1f62-4b76-b9b5-84f14dac7278",
								"datablocks",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Release summary - Exclusions 2016",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c06ee174-3e90-44b8-b9a8-32283e7dde7c",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Fields are present\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"typeId\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage.value\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage.label\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"releaseName\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"slug\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"status\"));",
									"});",
									"",
									"pm.test(\"id should match request id\", function () {",
									"    pm.expect(respJson.id).to.equal(\"e7774a74-1f62-4b76-b9b5-84f14dac7278\");",
									"});",
									"",
									"pm.test(\"typeId should should be correct\", function () { ",
									"    pm.expect(respJson.typeId).to.equal(\"9d333457-9132-4e55-ae78-c55cb3673d7c\"); ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dbde4b62-47dd-4c3d-93dc-5e01ec3f8231",
								"exec": [
									"postman.setNextRequest(null);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": ".AspNetCore.AzureADCookie={{azure_ad_cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/releases/E7774A74-1F62-4B76-B9B5-84F14DAC7278/summary/",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"releases",
								"E7774A74-1F62-4B76-B9B5-84F14DAC7278",
								"summary",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Release Status - Exclusions 2016",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c06ee174-3e90-44b8-b9a8-32283e7dde7c",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Fields are present\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"typeId\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage.value\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage.label\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"releaseName\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"slug\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"status\"));",
									"});",
									"",
									"pm.test(\"id should match request id\", function () {",
									"    pm.expect(respJson.id).to.equal(\"e7774a74-1f62-4b76-b9b5-84f14dac7278\");",
									"});",
									"",
									"pm.test(\"typeId should should be correct\", function () { ",
									"    pm.expect(respJson.typeId).to.equal(\"9d333457-9132-4e55-ae78-c55cb3673d7c\"); ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dbde4b62-47dd-4c3d-93dc-5e01ec3f8231",
								"exec": [
									"postman.setNextRequest(null);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": ".AspNetCore.AzureADCookie={{azure_ad_cookie}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"releaseStatus\": \"Draft\",\n\t\"internalReleaseNote\": \"Test Note\"\n}"
						},
						"url": {
							"raw": "{{admin_api_url}}/releases/E7774A74-1F62-4B76-B9B5-84F14DAC7278/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"releases",
								"E7774A74-1F62-4B76-B9B5-84F14DAC7278",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Draft Releases",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c06ee174-3e90-44b8-b9a8-32283e7dde7c",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Fields are present\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"typeId\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage.value\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage.label\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"releaseName\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"slug\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"status\"));",
									"});",
									"",
									"pm.test(\"id should match request id\", function () {",
									"    pm.expect(respJson.id).to.equal(\"e7774a74-1f62-4b76-b9b5-84f14dac7278\");",
									"});",
									"",
									"pm.test(\"typeId should should be correct\", function () { ",
									"    pm.expect(respJson.typeId).to.equal(\"9d333457-9132-4e55-ae78-c55cb3673d7c\"); ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dbde4b62-47dd-4c3d-93dc-5e01ec3f8231",
								"exec": [
									"postman.setNextRequest(null);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": ".AspNetCore.AzureADCookie={{azure_ad_cookie}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"releaseStatus\": \"Draft\",\n\t\"internalReleaseNote\": \"Test Note\"\n}"
						},
						"url": {
							"raw": "{{admin_api_url}}/releases/draft",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"releases",
								"draft"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new publication",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "256d11e0-8766-43c9-a53c-477b764c85dc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4b4d0e5b-d1e9-4e6a-af9e-514f3c3ad225",
								"exec": [
									"// NOTE(mark): Changed title to not be unique so new publication isn't created each test run.",
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Fields are present\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"title\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"nextUpdate\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"releases\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"methodology\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"topicId\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"contact\"));",
									"});",
									"",
									"pm.test(\"topicId should should be correct\", function () { ",
									"    pm.expect(pm.response.json().topicId).to.equal(\"53a1fbb7-5234-435f-892b-9baad4c82535\"); ",
									"});",
									"",
									"pm.test(\"teamName should should be correct\", function () { ",
									"    pm.expect(pm.response.json().contact.teamName).to.equal(\"Simon's Team\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": ".AspNetCore.AzureADCookie={{azure_ad_cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"title\": \"b84e5120-7ee2-4d4e-ac0c-b6e6a42ee22c\",\n\t\"methodologyId\": \"\",\n\t\"contactId\": \"11BB7387-E85E-4571-9669-8A760DCB004F\"\n}"
						},
						"url": {
							"raw": "{{admin_api_url}}/topic/53A1FBB7-5234-435F-892B-9BAAD4C82535/publications",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"topic",
								"53A1FBB7-5234-435F-892B-9BAAD4C82535",
								"publications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new release",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "98057100-77fb-42b7-9c21-f1d4921917ab",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Fields are present\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"title\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"releaseName\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"coverageTitle\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"yearTitle\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"published\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"latestRelease\"));",
									"});",
									"",
									"pm.test(\"Title should should be correct\", function () { ",
									"    pm.expect(pm.response.json().title).to.equal(\"Academic Year 2014/15\");",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "53582e6e-2f99-4426-bbac-814e65969e32",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": ".AspNetCore.AzureADCookie={{azure_ad_cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"PublicationId\": \"8b12776b-3d36-4475-8115-00974d7de1d0\",\n    \"ReleaseTypeId\": \"1821abb8-68b0-431b-9770-0bea65d02ff0\",\n    \"TypeId\": \"1821ABB8-68B0-431B-9770-0BEA65D02FF0\",\n    \"TimeIdentifier\": 62,\n    \"PublishScheduled\": \"0001-01-01T00:00:00\",\n    \"NextReleaseExpected\": {\n        \"Year\": \"2018\",\n        \"Month\": \"01\",\n        \"Day\": \"01\"\n    },\n    \"ReleaseName\": \"2014\",\n    \"TemplateReleaseId\": \"63227211-7CB3-408C-B5C2-40D3D7CB2717\"\n}"
						},
						"url": {
							"raw": "{{admin_api_url}}/publications/C52BDD2A-B38E-46F9-88AB-19968E328C46/releases",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"publications",
								"C52BDD2A-B38E-46F9-88AB-19968E328C46",
								"releases"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3a4035f5-600e-47c8-bd3b-27960abf8cfe",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": ".AspNetCore.AzureADCookie={{azure_ad_cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/my_file.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}/my_metafile.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/85d43d6f-ec91-452d-aba2-03303ab4363a/data?name=testName",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"85d43d6f-ec91-452d-aba2-03303ab4363a",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "testName"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get data files",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "313f3538-ad70-44ec-aed5-3d9286545bf0",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": ".AspNetCore.AzureADCookie={{azure_ad_cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/85d43d6f-ec91-452d-aba2-03303ab4363a/data",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"85d43d6f-ec91-452d-aba2-03303ab4363a",
								"data"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get import status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8703eb2c-90a2-45c6-b49a-c0552fba7d0d",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Fields are present\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(\"status\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"percentageComplete\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": ".AspNetCore.AzureADCookie={{azure_ad_cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/85d43d6f-ec91-452d-aba2-03303ab4363a/data/my_file.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"85d43d6f-ec91-452d-aba2-03303ab4363a",
								"data",
								"my_file.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete data file",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": ".AspNetCore.AzureADCookie={{azure_ad_cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://localhost:5001/api/release/85d43d6f-ec91-452d-aba2-03303ab4363a/data/my_file.csv",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"release",
								"85d43d6f-ec91-452d-aba2-03303ab4363a",
								"data",
								"my_file.csv"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload ancillary file",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4d2d835f-99c3-4df4-adfd-af5b6c678672",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"test\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"doc\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": ".AspNetCore.AzureADCookie={{azure_ad_cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/ancillary.doc"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/85d43d6f-ec91-452d-aba2-03303ab4363a/ancillary?name=test",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"85d43d6f-ec91-452d-aba2-03303ab4363a",
								"ancillary"
							],
							"query": [
								{
									"key": "name",
									"value": "test"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get ancillary files",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "06d9ef58-8beb-4ec6-aac6-18ddc1a3c9e4",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"test\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"doc\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": ".AspNetCore.AzureADCookie={{azure_ad_cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/85d43d6f-ec91-452d-aba2-03303ab4363a/ancillary?name=test",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"85d43d6f-ec91-452d-aba2-03303ab4363a",
								"ancillary"
							],
							"query": [
								{
									"key": "name",
									"value": "test"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete ancillary file",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": ".AspNetCore.AzureADCookie={{azure_ad_cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{admin_api_url}}/release/85d43d6f-ec91-452d-aba2-03303ab4363a/ancillary/ancillary.doc",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"85d43d6f-ec91-452d-aba2-03303ab4363a",
								"ancillary",
								"ancillary.doc"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload chart file",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c3aa6c3a-7405-4b53-9fce-ab1d75b4e2da",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(1);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[0].name).to.equal(\"test\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"png\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": ".AspNetCore.AzureADCookie={{azure_ad_cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/chart.png"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/85d43d6f-ec91-452d-aba2-03303ab4363a/chart?name=test",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"85d43d6f-ec91-452d-aba2-03303ab4363a",
								"chart"
							],
							"query": [
								{
									"key": "name",
									"value": "test"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get chart files",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0e8a7e3f-244d-43aa-a936-4238169dcd82",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(1);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[0].name).to.equal(\"test\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"png\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": ".AspNetCore.AzureADCookie={{azure_ad_cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/85d43d6f-ec91-452d-aba2-03303ab4363a/chart",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"85d43d6f-ec91-452d-aba2-03303ab4363a",
								"chart"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete chart file",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": ".AspNetCore.AzureADCookie={{azure_ad_cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{admin_api_url}}/release/85d43d6f-ec91-452d-aba2-03303ab4363a/chart/chart.png",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"85d43d6f-ec91-452d-aba2-03303ab4363a",
								"chart",
								"chart.png"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Data",
			"item": [
				{
					"name": "Meta",
					"item": [
						{
							"name": "Themes",
							"item": [
								{
									"name": "Themes Meta",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2db4ed0b-6eeb-40b6-914f-f1692eb248fb",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Expect correct number of themes\", function () {",
													"    pm.expect(pm.response.json().length).to.be.above(1);",
													"});",
													"",
													"pm.test(\"Pupils and school theme should contain more than 2 topics\", function () {",
													"    for(var i = 0; i < pm.response.json().length; i++) {",
													"        if(pm.response.json()[i].title === \"Pupils and schools\") {",
													"            pm.expect(pm.response.json()[i].topics.length).to.be.above(2);",
													"            pm.expect(pm.response.to.have.jsonBody(`[${i}].id`));",
													"            pm.expect(pm.response.to.have.jsonBody(`[${i}].slug`));",
													"        }",
													"    }",
													"});",
													"        ",
													"pm.test(\"Children, early years and social care should contain correct data\", function () {",
													"    for(var i = 0; i < pm.response.json().length; i++) {",
													"        if(pm.response.json()[i].title === \"Children, early years and social care\") {",
													"            pm.expect(pm.response.json()[i].topics.length).to.equal(1);",
													"            pm.expect(pm.response.json()[i].topics[0].title).to.equal(\"Early years foundation stage profile\");",
													"            pm.expect(pm.response.to.have.jsonBody(`[${i}].id`));",
													"            pm.expect(pm.response.to.have.jsonBody(`[${i}].slug`));",
													"            ",
													"            pm.expect(pm.response.to.have.jsonBody(`[${i}].topics[0].id`));",
													"            pm.expect(pm.response.to.have.jsonBody(`[${i}].topics[0].slug`));",
													"            pm.expect(pm.response.json()[i].topics[0].publications.length).to.equal(1);",
													"            pm.expect(pm.response.json()[i].topics[0].publications[0].title).to.equal(\"Early years foundation stage profile results\");",
													"            pm.expect(pm.response.to.have.jsonBody(`[${i}].topics[0].publications[0].id`));",
													"            pm.expect(pm.response.to.have.jsonBody(`[${i}].topics[0].publications[0].slug`));",
													"        }",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNetCore.AzureADCookie={{azure_ad_cookie}}"
											}
										],
										"url": {
											"raw": "{{admin_api_url}}/data/meta/themes",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"data",
												"meta",
												"themes"
											]
										},
										"description": "Returns all contacts"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Subject",
							"item": [
								{
									"name": "Subject Meta - Absence by characteristic Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													"pm.globals.set(\"FILT_Char__Total\", \"1\");",
													"pm.globals.set(\"FILT_SchoolType__Total\", \"58\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "483030fb-1db1-4380-99d6-d2fda32e3497",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.Characteristic\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.SchoolType\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceFields\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceByReason\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceForPersistentAbsentees\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthority\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthorityDistrict\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});",
													"",
													"pm.test(\"totalValues should be correct\", function () {",
													"    pm.expect(respJson.filters.Characteristic.totalValue).to.equal(pm.globals.get('FILT_Char__Total'));",
													"    pm.expect(respJson.filters.SchoolType.totalValue).to.equal(pm.globals.get('FILT_SchoolType__Total'));",
													"    pm.expect(respJson.filters.YearBreakdown.totalValue).to.equal(\"\");",
													"});",
													"",
													"pm.test(\"Should be correct number of characteristics\", function () { ",
													"    pm.expect(Object.keys(respJson.filters.Characteristic.options).length).to.equal(10);",
													"});",
													"",
													"pm.test(\"Each characteristic should have correct number\", function () {",
													"    pm.expect(respJson.filters.Characteristic.options.Total.options.length).to.equal(1);",
													"    pm.expect(respJson.filters.Characteristic.options.Gender.options.length).to.equal(2);",
													"    pm.expect(respJson.filters.Characteristic.options.EthnicGroupMajor.options.length).to.equal(8);",
													"    pm.expect(respJson.filters.Characteristic.options.EthnicGroupMinor.options.length).to.equal(19);",
													"    pm.expect(respJson.filters.Characteristic.options.NCYear.options.length).to.equal(14);",
													"    pm.expect(respJson.filters.Characteristic.options.FSM.options.length).to.equal(3);",
													"    pm.expect(respJson.filters.Characteristic.options.FSMEver6.options.length).to.equal(3);",
													"    pm.expect(respJson.filters.Characteristic.options.SENProvision.options.length).to.equal(8);",
													"    pm.expect(respJson.filters.Characteristic.options.SENPrimaryNeed.options.length).to.equal(14);",
													"    pm.expect(respJson.filters.Characteristic.options.FirstLanguage.options.length).to.equal(4);",
													"});",
													"",
													"pm.test(\"Number of school type default options should be correct\", function () { ",
													"    pm.expect(Object.keys(respJson.filters.SchoolType.options.Default.options).length).to.equal(4);",
													"});",
													"",
													"pm.test(\"Number of time periods options should be correct\", function() {",
													"    pm.expect(respJson.timePeriod.options.length).to.equal(5); ",
													"});",
													"",
													"pm.test(\"Number of location options should be correct\", function() {",
													"    pm.expect(respJson.locations.country.options.length).to.equal(1);",
													"    pm.expect(respJson.locations.localAuthority.options.length).to.equal(152);",
													"    pm.expect(respJson.locations.localAuthorityDistrict.options.length).to.equal(326);",
													"});",
													"",
													"pm.test(\"Expect indicators to have correct properties\", function () {",
													"    pm.expect(respJson.indicators.AbsenceFields.options.length).to.equal(10);",
													"    pm.expect(respJson.indicators.AbsenceByReason.options.length).to.equal(16);",
													"    pm.expect(respJson.indicators.AbsenceForPersistentAbsentees.options.length).to.equal(7);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": ".AspNetCore.AzureADCookie={{azure_ad_cookie}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{admin_api_url}}/data/meta/subject/1",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"data",
												"meta",
												"subject",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subject Meta - Filter SubjectId 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "08c7178b-9b71-4fb9-8c3e-9770e6d90e49",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.Characteristic\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.SchoolType\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceFields\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceByReason\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceForPersistentAbsentees\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthority\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthorityDistrict\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});",
													"",
													"pm.test(\"Number of characteristic options should be correct\", function () { ",
													"    pm.expect(Object.keys(pm.response.json().filters.Characteristic.options).length).to.equal(10);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.Total.options.length).to.equal(1);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.Gender.options.length).to.equal(2);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.EthnicGroupMajor.options.length).to.equal(8);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.EthnicGroupMinor.options.length).to.equal(19);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.NCYear.options.length).to.equal(14);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.FSM.options.length).to.equal(3);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.FSMEver6.options.length).to.equal(3);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.SENProvision.options.length).to.equal(8);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.SENPrimaryNeed.options.length).to.equal(14);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.FirstLanguage.options.length).to.equal(4);",
													"});",
													"",
													"pm.test(\"Number of school type default options should be correct\", function () { ",
													"    pm.expect(Object.keys(pm.response.json().filters.SchoolType.options.Default.options).length).to.equal(4);",
													"});",
													"",
													"pm.test(\"Number of time periods options should be correct\", function() {",
													"    pm.expect(pm.response.json().timePeriod.options.length).to.equal(5); ",
													"});",
													"",
													"pm.test(\"Number of location options should be correct\", function() {",
													"    pm.expect(pm.response.json().locations.country.options.length).to.equal(1);",
													"    pm.expect(pm.response.json().locations.localAuthority.options.length).to.equal(152);",
													"    pm.expect(pm.response.json().locations.localAuthorityDistrict.options.length).to.equal(326);",
													"});",
													"",
													"pm.test(\"Expect indicators to have correct properties\", function () {",
													"    pm.expect(pm.response.json().indicators.AbsenceFields.options.length).to.equal(10);",
													"    pm.expect(pm.response.json().indicators.AbsenceByReason.options.length).to.equal(16);",
													"    pm.expect(pm.response.json().indicators.AbsenceForPersistentAbsentees.options.length).to.equal(7);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6db8370e-6078-4279-94d7-438d85a476f7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Cookie",
												"value": ".AspNetCore.AzureADCookie={{azure_ad_cookie}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\tsubjectId: 1\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/data/meta/subject",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"data",
												"meta",
												"subject"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Publication",
							"item": [
								{
									"name": "Publication Meta - Pupil absence in schools in England",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													"pm.variables.set('publication_id', 'cbbd299f-8297-44bc-92ac-558bcf51f8ad')"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ac4b1f03-19f2-44f5-b80f-840e78849333",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"publicationId\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjects\"));",
													"});",
													"",
													"pm.test(\"Publication id matches the publication requested\", function () { pm.expect(pm.response.json().publicationId).to.equal(pm.variables.get(\"publication_id\")); });",
													"",
													"pm.test(\"Number of subjects should be correct\", function () {",
													"    pm.expect(pm.response.json().subjects.length).to.equal(7);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": ".AspNetCore.AzureADCookie={{azure_ad_cookie}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{admin_api_url}}/data/meta/publication/{{publication_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"data",
												"meta",
												"publication",
												"{{publication_id}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Tablebuilder",
					"item": [
						{
							"name": "Tablebuilder - Absence by characteristic - England - Male, Female",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "be43473c-e6d5-4af2-bd3b-69ab2f3c948c",
										"exec": [
											"respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.filters\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.footnotes\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.indicators\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.locations\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.publicationName\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.subjectName\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.timePeriodRange\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"results\"));",
											"});",
											"",
											"pm.test(\"Validate footnotes\", function () {",
											"    pm.expect(respJson.subjectMeta.footnotes.length).to.be.above(0);",
											"    //pm.expect(respJson.subjectMeta.footnotes.length).to.equal(12); // Uncomment when id 10 appears!",
											"    for(var i = 0; i < respJson.subjectMeta.footnotes.length; i++) {",
											"        switch(respJson.subjectMeta.footnotes[i].id) {",
											"            case 1:",
											"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"State-funded primary schools include all primary academies, including free schools.\");",
											"                break;",
											"            case 2:",
											"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"State-funded secondary schools include city technology colleges and all secondary academies, including all-through academies and free schools.\");",
											"                break;",
											"            case 3:",
											"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"Special schools include maintained special schools, non-maintained special schools and special academies.  Excludes general hospital schools, independent special schools and independent schools approved for SEN pupils.\");",
											"                break;",
											"            case 4:",
											"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"Totals may not appear to equal the sum of component parts because numbers have been rounded to the nearest 5.\");",
											"                break;",
											"            case 5:",
											"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"x - 1 or 2 enrolments, or a percentage based on 1 or 2 enrolments.\");",
											"                break;",
											"            case 6:",
											"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"There may be discrepancies between totals and the sum of constituent parts  as national and regional totals and totals across school types have been rounded to the nearest 5.\");",
											"                break;",
											"            case 7:",
											"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"Absence rates are the number of absence sessions expressed as a percentage of the total number of possible sessions.\");",
											"                break;",
											"            case 8:",
											"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"Pupil enrolments missing 10 percent or more of their own possible sessions (due to authorised or unauthorised absence) are classified as persistent absentees.\");",
											"                break;",
											"            case 9:",
											"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"The definition of persistent absence changed from the 2015/16 academic year - The information presented for years prior to 2015/16 has been produced using the same methodology in order to allow users to make comparisons on a consistent basis over time.\");",
											"                break;",
											"            // 10 should appear! But won't until enrolments_pa_10_exact_percent/enrolments_pa10_exact_percent ",
											"            // difference is changed in data and then imported",
											"            //case 10:",
											"                //pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"The persistent absentee rate is the number of persistent absentees expressed as a percentage of the total number of enrolments.\");",
											"                //break;",
											"            case 15:",
											"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal('See \"Guide to absence statistics\" for more information on how absence and pupil characteristic data have been linked.');",
											"                break;",
											"            case 16:",
											"                pm.expect(respJson.subjectMeta.footnotes[i].label).to.equal(\"Figures for pupils with unclassified or missing characteristics information should be interpreted with caution.\");",
											"                break;",
											"            default:",
											"                pm.expect(true).to.equal(false, `Didn't expect this footnote to appear!, id: \"${respJson.subjectMeta.footnotes[i].id}\"`)",
											"                break;",
											"        }",
											"    }",
											"});",
											"",
											"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.results.length).to.equal(8); });",
											"",
											"pm.test(\"geographicLevel should be same as request\", function () {",
											"    for(var i = 0; i < respJson.results.length; i++) {",
											"        pm.expect(respJson.results[i].geographicLevel).to.equal(\"Country\");",
											"    }",
											"});",
											"",
											"pm.test(\"First result should have correct fields\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"results[0].filters\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"results[0].geographicLevel\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"results[0].location\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"results[0].measures\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"results[0].timePeriod\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "462e277e-a7ce-4584-b95d-89ed1786d5f5",
										"exec": [
											"pm.globals.set(\"FILT_Char__Total\", \"1\");",
											"pm.globals.set(\"FILT_Char__GenderMale\", \"53\");",
											"pm.globals.set(\"FILT_Char__GenderFemale\", \"52\");",
											"pm.globals.set(\"FILT_SchoolType__Total\", \"58\");",
											"pm.globals.set(\"FILT_SchoolType__StateFundedPrimary\", \"57\");",
											"pm.globals.set(\"FILT_SchoolType__StateFundedSecondary\", \"56\");",
											"pm.globals.set(\"FILT_SchoolType__Special\", \"55\");",
											"pm.globals.set(\"FILT_Char__FSMEligible\", \"18\");",
											"pm.globals.set(\"FILT_Char__FSMNotEligible\", \"10\");",
											"pm.globals.set(\"FILT_Char__FSMUnclassified\", \"8\");",
											"pm.globals.set(\"FILT_Char__EthMinor_Irish\", \"50\");",
											"pm.globals.set(\"FILT_YearBreakdown__SixHalfTerms\", \"54\");",
											"",
											"pm.globals.set(\"IND_AbsenceFields__NumberOfPupilEnrolments\", \"1\");",
											"pm.globals.set(\"IND_AbsenceFields__NumberOfSessionsPossible\", \"25\");",
											"pm.globals.set(\"IND_AbsenceFields__UnauthorisedAbsenceRate\", \"23\");",
											"pm.globals.set(\"IND_AbsenceFields__OverallAbsenceRate\", \"26\");",
											"pm.globals.set(\"IND_AbsenceFields__AuthorisedAbsenceRate\", \"28\");",
											"pm.globals.set(\"IND_AbsenceFields__PercentageOfPersistentAbsentees\", \"30\");",
											"pm.globals.set(\"IND_AbsenceFields__NumberOfPersistentAbsentees\", \"31\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"value": ".AspNetCore.AzureADCookie={{azure_ad_cookie}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"subjectId\": 1,\n    \"country\": [\n    \t\"E92000001\"\n    ],\n    \"timePeriod\": {\n    \t\"startYear\": 2014,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2014,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{FILT_Char__GenderMale}}, {{FILT_Char__GenderFemale}}\n    ],\n    \"indicators\": [\n    \t{{IND_AbsenceFields__UnauthorisedAbsenceRate}}, \n        {{IND_AbsenceFields__OverallAbsenceRate}}, \n        {{IND_AbsenceFields__AuthorisedAbsenceRate}},\n        {{IND_AbsenceFields__PercentageOfPersistentAbsentees}},\n        {{IND_AbsenceFields__NumberOfPersistentAbsentees}}\n    ]\n}"
								},
								"url": {
									"raw": "{{data_api_url}}/tablebuilder",
									"host": [
										"{{data_api_url}}"
									],
									"path": [
										"tablebuilder"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Data",
					"item": [
						{
							"name": "Data - Absence by characteristic - Adur (LAD) + Wandsworth (LA) Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa8ea708-fc9c-4520-8df9-a388dd26508d",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Should have correct fields\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"metaData\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"metaData.filters\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"metaData.indicators\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
											"});",
											"",
											"pm.test(\"Number of metaData filters should be correct\", function () {",
											"   pm.expect(Object.keys(respJson.metaData.filters).length).to.equal(8); ",
											"});",
											"",
											"pm.test(\"Number of metaData indicators should be correct\", function () {",
											"   pm.expect(Object.keys(respJson.metaData.indicators).length).to.equal(5); ",
											"});",
											"",
											"pm.test(\"Number of metaData locations should be correct\", function () {",
											"   pm.expect(Object.keys(respJson.metaData.locations).length).to.equal(2);",
											"   pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E09000032\")); // LA Wandsworth",
											"   pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E07000223\")); // LAD Adur",
											"});",
											"",
											"pm.test(\"Number of results should be correct\", function () { ",
											"    pm.expect(respJson.result.length).to.equal(35); // LA 24 + LAD 11",
											"});",
											"",
											"pm.test(\"All results should have correction geographicLevel\", function () {",
											"    for(var i = 0; i < pm.response.json().result.length; i++) {",
											"        pm.expect(respJson.result[i].geographicLevel).to.satisfy(function(geoLevel) {",
											"           return geoLevel === \"Local_Authority\" || geoLevel === \"Local_Authority_District\"; ",
											"        });",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1098d84e-671d-465d-adfa-8c1d009ac73a",
										"exec": [
											"pm.globals.set(\"FILT_Char__Total\", \"1\");",
											"pm.globals.set(\"FILT_Char__GenderMale\", \"53\");",
											"pm.globals.set(\"FILT_Char__GenderFemale\", \"52\");",
											"pm.globals.set(\"FILT_SchoolType__StateFundedPrimary\", \"57\");",
											"pm.globals.set(\"FILT_SchoolType__StateFundedSecondary\", \"56\");",
											"pm.globals.set(\"FILT_SchoolType__Special\", \"55\");",
											"pm.globals.set(\"FILT_Char__FSMEligible\", \"18\");",
											"pm.globals.set(\"FILT_Char__FSMNotEligible\", \"10\");",
											"pm.globals.set(\"FILT_Char__FSMUnclassified\", \"8\");",
											"pm.globals.set(\"FILT_Char__EthMinor_Irish\", \"50\");",
											"",
											"pm.globals.set(\"IND_AbsenceFields__NumberOfPupilEnrolments\", \"1\");",
											"pm.globals.set(\"IND_AbsenceFields__NumberOfSessionsPossible\", \"25\");",
											"pm.globals.set(\"IND_AbsenceFields__UnauthorisedAbsenceRate\", \"23\");",
											"pm.globals.set(\"IND_AbsenceFields__OverallAbsenceRate\", \"26\");",
											"pm.globals.set(\"IND_AbsenceFields__AuthorisedAbsenceRate\", \"28\");",
											"pm.globals.set(\"IND_AbsenceFields__PercentageOfPersistentAbsentees\", \"30\");",
											"pm.globals.set(\"IND_AbsenceFields__NumberOfPersistentAbsentees\", \"31\");",
											"pm.globals.set(\"IND_AbsenceForPersistentAbsentees__NumberOfAuthorisedAbsenceSessionsForPersistentAbsentees\", \"6\");",
											"pm.globals.set(\"IND_AbsenceByReason__NumberOfUnauthorisedReasonsSessions\", \"7\");",
											"pm.globals.set(\"IND_AbsenceByReason__NumberOfUnauthorisedOtherSessions\", \"8\");",
											"pm.globals.set(\"IND_AbsenceByReason__NumberOfNoReasonYetSessions\", \"9\");",
											"pm.globals.set(\"IND_AbsenceByReason__NumberOfLateSessions\", \"10\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"value": ".AspNetCore.AzureADCookie={{azure_ad_cookie}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"subjectId\": 1,\n    \"localAuthority\": [\"E09000032\"],\n    \"localAuthorityDistrict\": [\"E07000223\"],\n    \"timePeriod\": {\n    \t\"startYear\": 2015,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{FILT_Char__FSMEligible}}, \n        {{FILT_Char__FSMNotEligible}}, \n        {{FILT_Char__FSMUnclassified}}\n    ],\n    \"indicators\": [\n    \t{{IND_AbsenceForPersistentAbsentees__NumberOfAuthorisedAbsenceSessionsForPersistentAbsentees}},\n    \t{{IND_AbsenceByReason__NumberOfUnauthorisedReasonsSessions}},\n    \t{{IND_AbsenceByReason__NumberOfUnauthorisedOtherSessions}},\n    \t{{IND_AbsenceByReason__NumberOfNoReasonYetSessions}},\n    \t{{IND_AbsenceByReason__NumberOfLateSessions}}\n    ]\n}"
								},
								"url": {
									"raw": "{{admin_api_url}}/data/data",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"data",
										"data"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7f3d3acc-0493-419e-87a1-f9de87f052c0",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ca57d5a3-d2ae-4438-8c91-32ab3e2f592d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "6464fc17-e41b-4120-9ac9-00c93234437a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "8d33b604-23a0-45bf-9ff6-91ec28db96e4",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}