{
	"info": {
		"_postman_id": "ce5e094d-54fd-40d5-ad57-9ed3a567fc1a",
		"name": "DfE Data API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Meta",
			"item": [
				{
					"name": "Themes",
					"item": [
						{
							"name": "Themes Meta",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "483030fb-1db1-4380-99d6-d2fda32e3497",
										"exec": [
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Expect correct number of themes\", function () {",
											"    pm.expect(pm.response.json().length).to.be.above(1);",
											"});",
											"",
											"pm.test(\"Pupils and school theme should contain more than 2 topics\", function () {",
											"    for(var i = 0; i < pm.response.json().length; i++) {",
											"        if(pm.response.json()[i].title === \"Pupils and schools\") {",
											"            pm.expect(pm.response.json()[i].topics.length).to.be.above(2);",
											"            pm.expect(pm.response.to.have.jsonBody(`[${i}].id`));",
											"            pm.expect(pm.response.to.have.jsonBody(`[${i}].slug`));",
											"        }",
											"    }",
											"});",
											"        ",
											"pm.test(\"Children, early years and social care should contain correct data\", function () {",
											"    for(var i = 0; i < pm.response.json().length; i++) {",
											"        if(pm.response.json()[i].title === \"Children, early years and social care\") {",
											"            pm.expect(pm.response.json()[i].topics.length).to.equal(1);",
											"            pm.expect(pm.response.json()[i].topics[0].title).to.equal(\"Early years foundation stage profile\");",
											"            pm.expect(pm.response.to.have.jsonBody(`[${i}].id`));",
											"            pm.expect(pm.response.to.have.jsonBody(`[${i}].slug`));",
											"            ",
											"            pm.expect(pm.response.to.have.jsonBody(`[${i}].topics[0].id`));",
											"            pm.expect(pm.response.to.have.jsonBody(`[${i}].topics[0].slug`));",
											"            pm.expect(pm.response.json()[i].topics[0].publications.length).to.equal(1);",
											"            pm.expect(pm.response.json()[i].topics[0].publications[0].title).to.equal(\"Early years foundation stage profile results\");",
											"            pm.expect(pm.response.to.have.jsonBody(`[${i}].topics[0].publications[0].id`));",
											"            pm.expect(pm.response.to.have.jsonBody(`[${i}].topics[0].publications[0].slug`));",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{data_api_url}}/meta/themes",
									"host": [
										"{{data_api_url}}"
									],
									"path": [
										"meta",
										"themes"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Subject",
					"item": [
						{
							"name": "Pupil absence in schools in England",
							"item": [
								{
									"name": "Subject Meta - Absence by characteristic",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "483030fb-1db1-4380-99d6-d2fda32e3497",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.Characteristic\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.SchoolType\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceFields\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceByReason\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceForPersistentAbsentees\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthority\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthorityDistrict\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.region\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});",
													"",
													"pm.test(\"totalValues should be correct\", function () {",
													"    pm.expect(respJson.filters.Characteristic.totalValue).to.equal(\"1\");",
													"    pm.expect(respJson.filters.SchoolType.totalValue).to.equal(\"2\");",
													"    pm.expect(respJson.filters.YearBreakdown.totalValue).to.equal(\"\");",
													"});",
													"",
													"pm.test(\"Should be correct number of characteristics\", function () { ",
													"    pm.expect(Object.keys(pm.response.json().filters.Characteristic.options).length).to.equal(11);",
													"});",
													"",
													"pm.test(\"Each characteristic should have correct number\", function () {",
													"    pm.expect(respJson.filters.Characteristic.options.AllPupils.options.length).to.equal(1);",
													"    pm.expect(respJson.filters.Characteristic.options.Gender.options.length).to.equal(2);",
													"    pm.expect(respJson.filters.Characteristic.options.EthnicGroupMajor.options.length).to.equal(8);",
													"    pm.expect(respJson.filters.Characteristic.options.EthnicGroupMinor.options.length).to.equal(19);",
													"    pm.expect(respJson.filters.Characteristic.options.NCYear.options.length).to.equal(14);",
													"    pm.expect(respJson.filters.Characteristic.options.FSM.options.length).to.equal(3);",
													"    pm.expect(respJson.filters.Characteristic.options.FSMEver6.options.length).to.equal(3);",
													"    pm.expect(respJson.filters.Characteristic.options.SENProvision.options.length).to.equal(8);",
													"    pm.expect(respJson.filters.Characteristic.options.SENPrimaryNeed.options.length).to.equal(14);",
													"    pm.expect(respJson.filters.Characteristic.options.FirstLanguage.options.length).to.equal(4);",
													"});",
													"",
													"pm.test(\"Number of school type default options should be correct\", function () { ",
													"    pm.expect(Object.keys(respJson.filters.SchoolType.options.Default.options).length).to.equal(4);",
													"});",
													"",
													"pm.test(\"Number of time periods options should be correct\", function() {",
													"    pm.expect(respJson.timePeriod.options.length).to.equal(5); ",
													"});",
													"",
													"pm.test(\"Number of location options should be correct\", function() {",
													"    pm.expect(respJson.locations.country.options.length).to.equal(1);",
													"    pm.expect(respJson.locations.region.options.length).to.equal(10);",
													"    pm.expect(respJson.locations.localAuthority.options.length).to.equal(152);",
													"    pm.expect(respJson.locations.localAuthorityDistrict.options.length).to.equal(326);",
													"});",
													"",
													"pm.test(\"Expect indicators to have correct properties\", function () {",
													"    pm.expect(respJson.indicators.AbsenceFields.options.length).to.equal(10);",
													"    pm.expect(respJson.indicators.AbsenceByReason.options.length).to.equal(16);",
													"    pm.expect(respJson.indicators.AbsenceForPersistentAbsentees.options.length).to.equal(7);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{data_api_url}}/meta/subject/1",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subject Meta - Absence by geographic level",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "57af4ba4-ee78-438f-a4df-b8d1926dc80c",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.SchoolType\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceFields\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceForPersistentAbsentees\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceByReason\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthority\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.region\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});",
													"",
													"pm.test(\"Filters totalValues should be correct\", function () {",
													"    pm.expect(respJson.filters.SchoolType.totalValue).to.equal(\"83\");",
													"    pm.expect(respJson.filters.YearBreakdown.totalValue).to.equal(\"\");",
													"});",
													"",
													"pm.test(\"Number of school type default options should be correct\", function () { ",
													"    pm.expect(Object.keys(respJson.filters.SchoolType.options.Default.options).length).to.equal(4);",
													"});",
													"",
													"pm.test(\"Number of time periods options should be correct\", function() {",
													"    pm.expect(respJson.timePeriod.options.length).to.equal(11); ",
													"});",
													"",
													"pm.test(\"Number of location options should be correct\", function() {",
													"    pm.expect(respJson.locations.country.options.length).to.equal(1);",
													"    pm.expect(respJson.locations.region.options.length).to.equal(10);",
													"    ",
													"    /*",
													"    $ csvgrep -p geographic_level/local\\ authority/ absence_by_geographic_level.csv | csvcut -k la_name | sed 1d | sort | uniq | wc -l",
													"    154",
													"    */",
													"    pm.expect(respJson.locations.localAuthority.options.length).to.equal(154);",
													"});",
													"",
													"pm.test(\"Expect indicators to have correct properties\", function () {",
													"    pm.expect(respJson.indicators.AbsenceFields.options.length).to.equal(11);",
													"    pm.expect(respJson.indicators.AbsenceByReason.options.length).to.equal(16);",
													"    pm.expect(respJson.indicators.AbsenceForPersistentAbsentees.options.length).to.equal(7);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{data_api_url}}/meta/subject/2",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject",
												"2"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subject Meta - Absence by term",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a523c41a-6b1e-4a9b-9f93-32dd1af9874b",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.SchoolType\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceFields\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceByReason\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthority\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.region\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});",
													"",
													"pm.test(\"Number of school type default options should be correct\", function () { ",
													"    pm.expect(Object.keys(pm.response.json().filters.SchoolType.options.Default.options).length).to.equal(3);",
													"});",
													"",
													"pm.test(\"Number of time periods options should be correct\", function() {",
													"    pm.expect(pm.response.json().timePeriod.options.length).to.equal(20); ",
													"});",
													"",
													"pm.test(\"Number of location options should be correct\", function() {",
													"    pm.expect(pm.response.json().locations.country.options.length).to.equal(1);",
													"    pm.expect(pm.response.json().locations.region.options.length).to.equal(10);",
													"    pm.expect(pm.response.json().locations.localAuthority.options.length).to.equal(152);",
													"});",
													"",
													"pm.test(\"Expect indicators to have correct properties\", function () {",
													"    pm.expect(pm.response.json().indicators.AbsenceFields.options.length).to.equal(7);",
													"    pm.expect(pm.response.json().indicators.AbsenceByReason.options.length).to.equal(16);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{data_api_url}}/meta/subject/3",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject",
												"3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subject Meta - Absence for four year olds",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e2295ce7-38c1-45c6-996b-4ce026c97c1a",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.SchoolType\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceFields\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthority\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.region\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{data_api_url}}/meta/subject/4",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject",
												"4"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subject Meta - Absence in PRUs",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1fad1b97-df53-4082-87b4-986fad0ba79f",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.SchoolType\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceFields\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceByReason\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthority\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.region\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"))",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"))",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"))",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{data_api_url}}/meta/subject/5",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject",
												"5"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subject Meta - Absence number missing at least one session by reason",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4b0060fe-f9a2-459c-b9b9-eab8c748eb49",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.SchoolType\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceFields\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceByReason\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthority\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.region\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{data_api_url}}/meta/subject/6",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject",
												"6"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subject Meta - Absence rate percent bands",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f422cd8a-6b27-49d0-b9e6-3668bc4a0717",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.SchoolType\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.AbsencePercentageBand\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.EnrolmentsByAbsencePercentageBand\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{data_api_url}}/meta/subject/7",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject",
												"7"
											]
										}
									},
									"response": []
								},
								{
									"name": "Early learning goal underlying data 2013-2018",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f422cd8a-6b27-49d0-b9e6-3668bc4a0717",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.Characteristic\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.OverallRating\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.EarlyLearningGoal\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.GoodLevelOfDevelopment\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AreaOfLearning\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{data_api_url}}/meta/subject/10",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject",
												"10"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subject Meta - Invalid Subject",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f422cd8a-6b27-49d0-b9e6-3668bc4a0717",
												"exec": [
													"pm.test(\"Status code is 404\", function () { pm.response.to.have.status(404); });",
													"",
													"pm.test(\"Response text should be correct\", function () {",
													"   pm.expect(pm.response.text()).to.contain(\"Subject does not exist\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{data_api_url}}/meta/subject/99999",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject",
												"99999"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subject Meta - Filter SubjectId 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "08c7178b-9b71-4fb9-8c3e-9770e6d90e49",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.Characteristic\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.SchoolType\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceFields\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceByReason\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceForPersistentAbsentees\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthority\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthorityDistrict\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.region\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});",
													"",
													"pm.test(\"Number of characteristic options should be correct\", function () { ",
													"    pm.expect(Object.keys(pm.response.json().filters.Characteristic.options).length).to.equal(11);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.AllPupils.options.length).to.equal(1);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.Gender.options.length).to.equal(2);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.EthnicGroupMajor.options.length).to.equal(8);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.EthnicGroupMinor.options.length).to.equal(19);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.NCYear.options.length).to.equal(14);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.FSM.options.length).to.equal(3);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.FSMEver6.options.length).to.equal(3);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.SENProvision.options.length).to.equal(8);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.SENPrimaryNeed.options.length).to.equal(14);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.FirstLanguage.options.length).to.equal(4);",
													"});",
													"",
													"pm.test(\"Number of school type default options should be correct\", function () { ",
													"    pm.expect(Object.keys(pm.response.json().filters.SchoolType.options.Default.options).length).to.equal(4);",
													"});",
													"",
													"pm.test(\"Number of time periods options should be correct\", function() {",
													"    pm.expect(pm.response.json().timePeriod.options.length).to.equal(5); ",
													"});",
													"",
													"pm.test(\"Number of location options should be correct\", function() {",
													"    pm.expect(pm.response.json().locations.country.options.length).to.equal(1);",
													"    pm.expect(pm.response.json().locations.region.options.length).to.equal(10);",
													"    pm.expect(pm.response.json().locations.localAuthority.options.length).to.equal(152);",
													"    pm.expect(pm.response.json().locations.localAuthorityDistrict.options.length).to.equal(326);",
													"});",
													"",
													"pm.test(\"Expect indicators to have correct properties\", function () {",
													"    pm.expect(pm.response.json().indicators.AbsenceFields.options.length).to.equal(10);",
													"    pm.expect(pm.response.json().indicators.AbsenceByReason.options.length).to.equal(16);",
													"    pm.expect(pm.response.json().indicators.AbsenceForPersistentAbsentees.options.length).to.equal(7);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6db8370e-6078-4279-94d7-438d85a476f7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\tsubjectId: 1\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/meta/subject",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subject Meta - Filter SubjectId 1, Start/End date 2016",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "483030fb-1db1-4380-99d6-d2fda32e3497",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.Characteristic\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.SchoolType\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceFields\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceByReason\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceForPersistentAbsentees\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthority\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthorityDistrict\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.region\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});",
													"",
													"pm.test(\"Number of characteristic options should be correct\", function () { ",
													"    pm.expect(Object.keys(pm.response.json().filters.Characteristic.options).length).to.equal(11);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.AllPupils.options.length).to.equal(1);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.Gender.options.length).to.equal(2);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.EthnicGroupMajor.options.length).to.equal(8);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.EthnicGroupMinor.options.length).to.equal(16);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.NCYear.options.length).to.equal(13);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.FSM.options.length).to.equal(3);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.FSMEver6.options.length).to.equal(3);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.SENProvision.options.length).to.equal(4);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.SENPrimaryNeed.options.length).to.equal(14);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.FirstLanguage.options.length).to.equal(3);",
													"});",
													"",
													"pm.test(\"Number of school type default options should be correct\", function () { ",
													"    pm.expect(Object.keys(pm.response.json().filters.SchoolType.options.Default.options).length).to.equal(4);",
													"});",
													"",
													"pm.test(\"Number of time periods options should be correct\", function() {",
													"    pm.expect(pm.response.json().timePeriod.options.length).to.equal(1);",
													"    pm.expect(pm.response.json().timePeriod.options[0].year).to.equal(2016);",
													"});",
													"",
													"pm.test(\"Number of location options should be correct\", function() {",
													"    pm.expect(pm.response.json().locations.country.options.length).to.equal(1);",
													"    pm.expect(pm.response.json().locations.region.options.length).to.equal(10);",
													"    pm.expect(pm.response.json().locations.localAuthority.options.length).to.equal(152);",
													"    pm.expect(pm.response.json().locations.localAuthorityDistrict.options.length).to.equal(326);",
													"});",
													"",
													"pm.test(\"Expect indicators to have correct properties\", function () {",
													"    pm.expect(pm.response.json().indicators.AbsenceFields.options.length).to.equal(10);",
													"    pm.expect(pm.response.json().indicators.AbsenceByReason.options.length).to.equal(16);",
													"    pm.expect(pm.response.json().indicators.AbsenceForPersistentAbsentees.options.length).to.equal(7);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\tsubjectId: 1,\n\ttimePeriod: {\n\t\tstartYear: 2016,\n\t\tstartCode: \"AY\",\n\t\tendYear: 2016,\n\t\tendCode: \"AY\",\n\t}\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/meta/subject",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subject Meta - Filter SubjectId 1, Start/End date 2016, GeographicLevel Country",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "483030fb-1db1-4380-99d6-d2fda32e3497",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.Characteristic\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.SchoolType\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceFields\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceByReason\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceForPersistentAbsentees\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});",
													"",
													"pm.test(\"Number of characteristic options should be correct\", function () { ",
													"    pm.expect(Object.keys(pm.response.json().filters.Characteristic.options).length).to.equal(11);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.AllPupils.options.length).to.equal(1);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.Gender.options.length).to.equal(2);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.EthnicGroupMajor.options.length).to.equal(8);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.EthnicGroupMinor.options.length).to.equal(16);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.NCYear.options.length).to.equal(13);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.FSM.options.length).to.equal(3);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.FSMEver6.options.length).to.equal(3);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.SENProvision.options.length).to.equal(4);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.SENPrimaryNeed.options.length).to.equal(14);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.FirstLanguage.options.length).to.equal(3);",
													"});",
													"",
													"pm.test(\"Number of school type default options should be correct\", function () { ",
													"    pm.expect(Object.keys(pm.response.json().filters.SchoolType.options.Default.options).length).to.equal(4);",
													"});",
													"",
													"pm.test(\"Number of time periods options should be correct\", function() {",
													"    pm.expect(pm.response.json().timePeriod.options.length).to.equal(1);",
													"    pm.expect(pm.response.json().timePeriod.options[0].year).to.equal(2016);",
													"});",
													"",
													"pm.test(\"Number of location options should be correct\", function() {",
													"    pm.expect(pm.response.json().locations.country.options.length).to.equal(1);",
													"    pm.expect(pm.response.json().locations).to.not.have.property(\"Region\");",
													"    pm.expect(pm.response.json().locations).to.not.have.property(\"LocalAuthority\");",
													"    pm.expect(pm.response.json().locations).to.not.have.property(\"LocalAuthorityDistrict\");",
													"});",
													"",
													"pm.test(\"Expect indicators to have correct properties\", function () {",
													"    pm.expect(pm.response.json().indicators.AbsenceFields.options.length).to.equal(10);",
													"    pm.expect(pm.response.json().indicators.AbsenceByReason.options.length).to.equal(16);",
													"    pm.expect(pm.response.json().indicators.AbsenceForPersistentAbsentees.options.length).to.equal(7);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\tsubjectId: 1,\n\ttimePeriod: {\n\t\tstartYear: 2016,\n\t\tstartCode: \"AY\",\n\t\tendYear: 2016,\n\t\tendCode: \"AY\",\n\t},\n\tgeographicLevel: \"Country\"\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/meta/subject",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subject Meta - Filter SubjectId 1, Start/End date 2016, GeographicLevel Local Authority",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "483030fb-1db1-4380-99d6-d2fda32e3497",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.Characteristic\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.SchoolType\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceFields\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceByReason\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceForPersistentAbsentees\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthority\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.region\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});",
													"",
													"pm.test(\"Number of characteristic options should be correct\", function () { ",
													"    pm.expect(Object.keys(pm.response.json().filters.Characteristic.options).length).to.equal(11);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.AllPupils.options.length).to.equal(1);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.Gender.options.length).to.equal(2);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.EthnicGroupMajor.options.length).to.equal(8);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.EthnicGroupMinor.options.length).to.equal(16);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.NCYear.options.length).to.equal(13);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.FSM.options.length).to.equal(3);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.FSMEver6.options.length).to.equal(3);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.SENProvision.options.length).to.equal(4);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.SENPrimaryNeed.options.length).to.equal(14);",
													"    pm.expect(pm.response.json().filters.Characteristic.options.FirstLanguage.options.length).to.equal(3);",
													"});",
													"",
													"pm.test(\"Number of school type default options should be correct\", function () { ",
													"    pm.expect(Object.keys(pm.response.json().filters.SchoolType.options.Default.options).length).to.equal(4);",
													"});",
													"",
													"pm.test(\"Number of time periods options should be correct\", function() {",
													"    pm.expect(pm.response.json().timePeriod.options.length).to.equal(1);",
													"    pm.expect(pm.response.json().timePeriod.options[0].year).to.equal(2016);",
													"});",
													"",
													"pm.test(\"Number of location options should be correct\", function() {",
													"    pm.expect(pm.response.json().locations.country.options.length).to.equal(1);",
													"    pm.expect(pm.response.json().locations.region.options.length).to.equal(10);",
													"    pm.expect(pm.response.json().locations.localAuthority.options.length).to.equal(152);",
													"    pm.expect(pm.response.json().locations).to.not.have.property(\"LocalAuthorityDistrict\");",
													"});",
													"",
													"pm.test(\"Expect indicators to have correct properties\", function () {",
													"    pm.expect(pm.response.json().indicators.AbsenceFields.options.length).to.equal(10);",
													"    pm.expect(pm.response.json().indicators.AbsenceByReason.options.length).to.equal(16);",
													"    pm.expect(pm.response.json().indicators.AbsenceForPersistentAbsentees.options.length).to.equal(7);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\tsubjectId: 1,\n\ttimePeriod: {\n\t\tstartYear: 2016,\n\t\tstartCode: \"AY\",\n\t\tendYear: 2016,\n\t\tendCode: \"AY\",\n\t},\n\tgeographicLevel: \"Local_Authority\"\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/meta/subject",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subject Meta - Filter SubjectId 2, Start/End date 2014, LA City of London",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "483030fb-1db1-4380-99d6-d2fda32e3497",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.SchoolType\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceFields\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceByReason\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AbsenceForPersistentAbsentees\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthority\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.region\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});",
													"",
													"pm.test(\"Characteristics property shouldn't exist\", function () {",
													"    pm.expect(pm.response.json()).to.not.have.property(\"Characteristic\");",
													"});",
													"",
													"pm.test(\"Number of school type default options should be correct\", function () { ",
													"    pm.expect(pm.response.json().filters.SchoolType.options.Default.options.length).to.equal(2);",
													"});",
													"",
													"pm.test(\"Time periods options should be correct\", function() {",
													"    pm.expect(pm.response.json().timePeriod.options.length).to.equal(1);",
													"    pm.expect(pm.response.json().timePeriod.options[0].year).to.equal(2014);",
													"});",
													"",
													"pm.test(\"Number of location options should be correct\", function() {",
													"    pm.expect(pm.response.json().locations.country.options.length).to.equal(1);",
													"    pm.expect(pm.response.json().locations.region.options.length).to.equal(1);",
													"    pm.expect(pm.response.json().locations.localAuthority.options.length).to.equal(1);",
													"    pm.expect(pm.response.json().locations).to.not.have.property(\"LocalAuthorityDistrict\");",
													"});",
													"",
													"pm.test(\"Expect indicators to have correct properties\", function () {",
													"    pm.expect(pm.response.json().indicators.AbsenceFields.options.length).to.equal(11);",
													"    pm.expect(pm.response.json().indicators.AbsenceByReason.options.length).to.equal(16);",
													"    pm.expect(pm.response.json().indicators.AbsenceForPersistentAbsentees.options.length).to.equal(7);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\tsubjectId: 2,\n\ttimePeriod: {\n\t\tstartYear: 2014,\n\t\tstartCode: \"AY\",\n\t\tendYear: 2014,\n\t\tendCode: \"AY\",\n\t},\n\tlocalAuthority: [\"E09000001\"]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/meta/subject",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subject Meta - Filter SubjectId 7, Start/End date 2012-2014",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "483030fb-1db1-4380-99d6-d2fda32e3497",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.SchoolType\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.AbsencePercentageBand\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.EnrolmentsByAbsencePercentageBand\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});",
													"",
													"pm.test(\"Number of school type default options should be correct\", function () { ",
													"    pm.expect(pm.response.json().filters.SchoolType.options.Default.options.length).to.equal(4);",
													"});",
													"",
													"pm.test(\"Number of AbsencePercentageBand options should be correct\", function () { ",
													"    pm.expect(pm.response.json().filters.AbsencePercentageBand.options.Default.options.length).to.equal(102);",
													"});",
													"",
													"pm.test(\"Time periods options should be correct\", function() {",
													"    pm.expect(pm.response.json().timePeriod.options.length).to.equal(3);",
													"});",
													"",
													"pm.test(\"Number of location options should be correct\", function() {",
													"    pm.expect(pm.response.json().locations.country.options.length).to.equal(1);",
													"    pm.expect(pm.response.json().locations).to.not.have.property(\"Region\");",
													"    pm.expect(pm.response.json().locations).to.not.have.property(\"LocalAuthority\");",
													"    pm.expect(pm.response.json().locations).to.not.have.property(\"LocalAuthorityDistrict\");",
													"});",
													"",
													"pm.test(\"Expect indicators to have correct properties\", function () {",
													"    pm.expect(Object.keys(pm.response.json().indicators).length).to.equal(1);",
													"    pm.expect(pm.response.json().indicators.EnrolmentsByAbsencePercentageBand.options.length).to.equal(6);",
													"    ",
													"    pm.expect(pm.response.json().indicators).to.not.have.property(\"AbsenceFields\");",
													"    pm.expect(pm.response.json().indicators).to.not.have.property(\"AbsenceByReason\");",
													"    pm.expect(pm.response.json().indicators).to.not.have.property(\"AbsenceForPersistentAbsentees\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\tsubjectId: 7,\n\ttimePeriod: {\n\t\tstartYear: 2012,\n\t\tstartCode: \"HT6\",\n\t\tendYear: 2014,\n\t\tendCode: \"HT6\",\n\t},\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/meta/subject",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a0e957f4-5b18-4986-a053-dd5a9d12ed41",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7f1dd3fe-1ecd-4adc-a95e-a4b3e350146d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Permanent and fixed-period exclusions in England",
							"item": [
								{
									"name": "Subject Meta - Exclusions by characteristic",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f422cd8a-6b27-49d0-b9e6-3668bc4a0717",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.SchoolType\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.Characteristic\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.Default\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthority\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.region\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});",
													"",
													"pm.test(\"Should have correct number of indicators\", function () {",
													"   pm.expect(pm.response.json().indicators.Default.options.length).to.equal(7); ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{data_api_url}}/meta/subject/11",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject",
												"11"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subject Meta - Exclusions by geographic level",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f422cd8a-6b27-49d0-b9e6-3668bc4a0717",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.SchoolType\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.Default\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthority\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.region\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});",
													"",
													"pm.test(\"Should have correct number of indicators\", function () {",
													"   pm.expect(pm.response.json().indicators.Default.options.length).to.equal(8); ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{data_api_url}}/meta/subject/12",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject",
												"12"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subject Meta - Exclusions by reason",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f422cd8a-6b27-49d0-b9e6-3668bc4a0717",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.SchoolType\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.PermanentExclusions\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.FixedPeriodExclusions\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthority\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.region\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});",
													"",
													"pm.test(\"Should have correct number of indicators\", function () {",
													"   pm.expect(pm.response.json().indicators.PermanentExclusions.options.length).to.equal(12);",
													"   pm.expect(pm.response.json().indicators.FixedPeriodExclusions.options.length).to.equal(12);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{data_api_url}}/meta/subject/13",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject",
												"13"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subject Meta - Duration of fixed exclusions",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f422cd8a-6b27-49d0-b9e6-3668bc4a0717",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.SchoolType\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.DurationOfFixedPeriodExclusions\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.Default\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});",
													"",
													"pm.test(\"Should have correct number of indicators\", function () {",
													"   pm.expect(pm.response.json().indicators.Default.options.length).to.equal(1); ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{data_api_url}}/meta/subject/14",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject",
												"14"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subject Meta - Number of fixed exclusions",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f422cd8a-6b27-49d0-b9e6-3668bc4a0717",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.SchoolType\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.Default\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.not.have.jsonBody(\"locations.localAuthority\"));",
													"    pm.expect(pm.response.to.not.have.jsonBody(\"locations.region\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});",
													"",
													"pm.test(\"Should have correct number of indicators\", function () {",
													"   pm.expect(pm.response.json().indicators.Default.options.length).to.equal(1); ",
													"   pm.expect(pm.response.json().indicators.Default.options[0].label).to.equal(\"Number of pupil enrolments\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{data_api_url}}/meta/subject/15",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject",
												"15"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subject Meta - Total days missed due to fixed period exclusions",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f422cd8a-6b27-49d0-b9e6-3668bc4a0717",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.SchoolType\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.TotalNumberOfDaysMissedDueToFixedPeriodExclusions\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.Default\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.not.have.jsonBody(\"locations.localAuthority\"));",
													"    pm.expect(pm.response.to.not.have.jsonBody(\"locations.region\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});",
													"",
													"pm.test(\"Should have correct number of indicators\", function () {",
													"   pm.expect(pm.response.json().indicators.Default.options.length).to.equal(1);",
													"   pm.expect(pm.response.json().indicators.Default.options[0].label).to.equal(\"Number of pupil enrolments\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{data_api_url}}/meta/subject/16",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject",
												"16"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Early years foundation stage profile results",
							"item": [
								{
									"name": "Subject Meta - Early learning goal underlying data 2013-2018",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f422cd8a-6b27-49d0-b9e6-3668bc4a0717",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.Characteristic\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.OverallRating\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.EarlyLearningGoal\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.GoodLevelOfDevelopment\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AreaOfLearning\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthority\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.region\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});",
													"",
													"pm.test(\"Should have correct number of indicators\", function () {",
													"   pm.expect(pm.response.json().indicators.OverallRating.options.length).to.equal(3);",
													"   pm.expect(pm.response.json().indicators.EarlyLearningGoal.options.length).to.equal(2);",
													"   pm.expect(pm.response.json().indicators.GoodLevelOfDevelopment.options.length).to.equal(2);",
													"   pm.expect(pm.response.json().indicators.AreaOfLearning.options.length).to.equal(2);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{data_api_url}}/meta/subject/10",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject",
												"10"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subject Meta - Areas of learning underlying data 2013-2018",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f422cd8a-6b27-49d0-b9e6-3668bc4a0717",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.Characteristic\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.AreaOfLearning\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.AreaOfLearning\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthority\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.region\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});",
													"",
													"pm.test(\"Should have correct number of indicators\", function () {",
													"   pm.expect(pm.response.json().indicators.AreaOfLearning.options.length).to.equal(5);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{data_api_url}}/meta/subject/9",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject",
												"9"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subject Meta - EYFSP ELG underlying data 2013-2018",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f422cd8a-6b27-49d0-b9e6-3668bc4a0717",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.Characteristic\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.EarlyLearningGoal\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.EarlyLearningGoal\"));",
													"    pm.expect(pm.response.to.not.have.jsonBody(\"indicators.OverallRating\"));",
													"    pm.expect(pm.response.to.not.have.jsonBody(\"indicators.GoodLevelOfDevelopment\"));",
													"    pm.expect(pm.response.to.not.have.jsonBody(\"indicators.AreaOfLearning\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthority\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.region\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"});",
													"",
													"pm.test(\"Should have correct number of indicators\", function () {",
													"   pm.expect(pm.response.json().indicators.EarlyLearningGoal.options.length).to.equal(9);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{data_api_url}}/meta/subject/8",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject",
												"8"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Secondary and primary schools applications and offers",
							"item": [
								{
									"name": "Subject Meta - Applications and offers by school phase",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f422cd8a-6b27-49d0-b9e6-3668bc4a0717",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.YearOfAdmission\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.Admissions\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.Applications\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.PreferencesBreakdowns\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthority\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.region\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});",
													"",
													"pm.test(\"Filter YearOfAdmission should be correct\", function () {",
													"    pm.expect(respJson.filters.YearOfAdmission.options.Primary.options.length).to.equal(2);",
													"    pm.expect(respJson.filters.YearOfAdmission.options.Secondary.options.length).to.equal(3);",
													"    pm.expect(respJson.filters.YearOfAdmission.totalValue).to.equal(\"\");",
													"});",
													"",
													"pm.test(\"Indicator Admissions should be correct\", function () {",
													"    pm.expect(respJson.indicators.Admissions.options.length).to.equal(1);",
													"    pm.expect(respJson.indicators.Admissions.options[0].label).to.equal(\"Number of admissions\");",
													"});",
													"",
													"pm.test(\"Indicator Applications should be correct\", function () {",
													"    pm.expect(respJson.indicators.Applications.options.length).to.equal(3);      ",
													"});",
													"",
													"pm.test(\"Indicator PreferencesBreakdowns should be correct\", function () {",
													"    pm.expect(respJson.indicators.PreferencesBreakdowns.options.length).to.equal(11);    ",
													"});",
													"",
													"pm.test(\"Location Country should be correct\", function () {",
													"    pm.expect(respJson.locations.country.options.length).to.equal(1);",
													"    pm.expect(respJson.locations.country.options[0].label).to.equal(\"England\");",
													"});",
													"",
													"pm.test(\"Location Region should be correct number\", function () {",
													"    pm.expect(respJson.locations.region.options.length).to.equal(10);",
													"});",
													"",
													"pm.test(\"Location LocalAuthority should be correct number\", function () {",
													"    /*  csvcut -k la_name school_applications_and_offers.csv | sed 1d | sort | uniq | wc -l ",
													"        returns 152 then -1 for blank line ",
													"    */",
													"    pm.expect(respJson.locations.localAuthority.options.length).to.equal(151);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{data_api_url}}/meta/subject/17",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject",
												"17"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subject Meta - Filter SubjectId 17, Regions South East, South West",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "483030fb-1db1-4380-99d6-d2fda32e3497",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.YearOfAdmission\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.Admissions\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.Applications\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.PreferencesBreakdowns\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.region\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthority\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});",
													"",
													"pm.test(\"Number of YearOfAdmission options should be correct\", function () { ",
													"    pm.expect(pm.response.json().filters.YearOfAdmission.options.Primary.options.length).to.equal(2);",
													"    pm.expect(pm.response.json().filters.YearOfAdmission.options.Secondary.options.length).to.equal(2);",
													"});",
													"",
													"pm.test(\"Time periods options should be correct\", function() {",
													"    pm.expect(pm.response.json().timePeriod.options.length).to.equal(5);",
													"});",
													"",
													"pm.test(\"Number of location options should be correct\", function() {",
													"    pm.expect(pm.response.json().locations.country.options.length).to.equal(1);",
													"    pm.expect(pm.response.json().locations.region.options.length).to.equal(2);",
													"    pm.expect(pm.response.json().locations.localAuthority.options.length).to.equal(34);",
													"});",
													"",
													"pm.test(\"Expect correct number of indicator categories\", function () {",
													"    pm.expect(Object.keys(pm.response.json().indicators).length).to.equal(3);",
													"    pm.expect(pm.response.json().indicators).to.not.have.property(\"AbsenceFields\");",
													"    pm.expect(pm.response.json().indicators).to.not.have.property(\"AbsenceByReason\");",
													"    pm.expect(pm.response.json().indicators).to.not.have.property(\"AbsenceForPersistentAbsentees\");",
													"});",
													"",
													"pm.test(\"Expect number of Admissions indicators to be correct\", function () {",
													"    pm.expect(pm.response.json().indicators.Admissions.options.length).to.equal(1);",
													"    pm.expect(pm.response.json().indicators.Admissions.options[0].label).to.equal(\"Number of admissions\");    ",
													"});",
													"",
													"pm.test(\"Expect number of Applications indicators to be correct\", function () {",
													"    pm.expect(pm.response.json().indicators.Applications.options.length).to.equal(3);",
													"});",
													"",
													"pm.test(\"Expect number of PreferencesBreakdowns indicators to be correct\", function () {",
													"    pm.expect(pm.response.json().indicators.PreferencesBreakdowns.options.length).to.equal(11);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\tSubjectId: 17,\n\tRegion: [\n\t\t\"E12000008\",\n\t\t\"E12000009\"\n\t]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/meta/subject",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subject Meta - Filter SubjectId 17, Country",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "483030fb-1db1-4380-99d6-d2fda32e3497",
												"exec": [
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters.YearOfAdmission\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.Admissions\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.Applications\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.PreferencesBreakdowns\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.not.have.jsonBody(\"locations.region\"));",
													"    pm.expect(pm.response.to.not.have.jsonBody(\"locations.localAuthority\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});",
													"",
													"pm.test(\"Number of YearOfAdmission options should be correct\", function () { ",
													"    pm.expect(pm.response.json().filters.YearOfAdmission.options.Primary.options.length).to.equal(1);",
													"    pm.expect(pm.response.json().filters.YearOfAdmission.options.Secondary.options.length).to.equal(1);",
													"});",
													"",
													"pm.test(\"Time periods options should be correct\", function() {",
													"    pm.expect(pm.response.json().timePeriod.options.length).to.equal(5);",
													"});",
													"",
													"pm.test(\"Number of location options should be correct\", function() {",
													"    pm.expect(pm.response.json().locations.country.options.length).to.equal(1);",
													"});",
													"",
													"pm.test(\"Expect correct number of indicator categories\", function () {",
													"    pm.expect(Object.keys(pm.response.json().indicators).length).to.equal(3);",
													"    pm.expect(pm.response.json().indicators).to.not.have.property(\"AbsenceFields\");",
													"    pm.expect(pm.response.json().indicators).to.not.have.property(\"AbsenceByReason\");",
													"    pm.expect(pm.response.json().indicators).to.not.have.property(\"AbsenceForPersistentAbsentees\");",
													"});",
													"",
													"pm.test(\"Expect number of Admissions indicators to be correct\", function () {",
													"    pm.expect(pm.response.json().indicators.Admissions.options.length).to.equal(1);",
													"    pm.expect(pm.response.json().indicators.Admissions.options[0].label).to.equal(\"Number of admissions\");    ",
													"});",
													"",
													"pm.test(\"Expect number of Applications indicators to be correct\", function () {",
													"    pm.expect(pm.response.json().indicators.Applications.options.length).to.equal(3);",
													"});",
													"",
													"pm.test(\"Expect number of PreferencesBreakdowns indicators to be correct\", function () {",
													"    pm.expect(pm.response.json().indicators.PreferencesBreakdowns.options.length).to.equal(11);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\tSubjectId: 17,\n\tGeographicLevel: \"Country\"\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/meta/subject",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"meta",
												"subject"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "595f2dce-cc95-43ef-abfe-be98632b442f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f42619e7-fe77-47ac-a97a-0b143cf1d4eb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Publication",
					"item": [
						{
							"name": "Publication Meta - Pupil absence in schools in England",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
										"exec": [
											"pm.variables.set('publication_id', 'cbbd299f-8297-44bc-92ac-558bcf51f8ad')"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ac4b1f03-19f2-44f5-b80f-840e78849333",
										"exec": [
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"publicationId\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjects\"));",
											"});",
											"",
											"pm.test(\"Publication id matches the publication requested\", function () { pm.expect(pm.response.json().publicationId).to.equal(pm.variables.get(\"publication_id\")); });",
											"",
											"pm.test(\"Number of subjects should be correct\", function () {",
											"    pm.expect(pm.response.json().subjects.length).to.equal(7);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{data_api_url}}/meta/publication/{{publication_id}}",
									"host": [
										"{{data_api_url}}"
									],
									"path": [
										"meta",
										"publication",
										"{{publication_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Publication Meta - Secondary and primary schools applications and offers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ff0e67a8-97f3-414d-a136-e46252cfbacf",
										"exec": [
											"pm.variables.set('publication_id', '66c8e9db-8bf2-4b0b-b094-cfab25c20b05');"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ac4b1f03-19f2-44f5-b80f-840e78849333",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"publicationId\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjects\"));",
											"});",
											"",
											"pm.test(\"Publication id matches the publication requested\", function () { pm.expect(respJson.publicationId).to.equal(pm.variables.get(\"publication_id\")); });",
											"",
											"pm.test(\"Subjects and subject label should be correct\", function () {",
											"    pm.expect(respJson.subjects.length).to.equal(1);",
											"    pm.expect(respJson.subjects[0].label).to.equal(\"Applications and offers by school phase\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{data_api_url}}/meta/publication/{{publication_id}}",
									"host": [
										"{{data_api_url}}"
									],
									"path": [
										"meta",
										"publication",
										"{{publication_id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b1bc576e-a31d-4330-ae1d-84416c336e6c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b342cb85-fd1c-421c-b348-1ce17d472dde",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ecb99d52-e5cd-4a4d-942b-eb37d390ca34",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "31fb4c96-88b3-4e61-8c97-88941525fc5a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Tablebuilder",
			"item": [
				{
					"name": "Pupil absence in schools in England",
					"item": [
						{
							"name": "By characteristic",
							"item": [
								{
									"name": "Tablebuilder - Absence by characteristic - no geoLevel - *",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4305c315-122a-4d29-ace3-0af70e73d69a",
												"exec": [
													"respJson = pm.response.json()",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"footnotes\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodRange\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
													"});",
													"",
													"pm.test(\"Validate footnotes\", function () {",
													"    for(var i = 0; i < respJson.footnotes.length; i++) {",
													"        switch(respJson.footnotes[i].id) {",
													"            case 1:",
													"                pm.expect(respJson.footnotes[i].label).to.equal(\"State-funded primary and secondary schools include middle schools as deemed.\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"1\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"23\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"26\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"28\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"30\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"31\");",
													"                pm.expect(respJson.footnotes[i].indicators.length).to.equal(6);",
													"                break;",
													"            case 8:",
													"                pm.expect(respJson.footnotes[i].label).to.equal(\"Absence rates are the number of absence sessions expressed as a percentage of the total number of possible sessions.\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"23\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"26\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"28\");",
													"                pm.expect(respJson.footnotes[i].indicators.length).to.equal(3);",
													"                break;",
													"            case 9:",
													"                pm.expect(respJson.footnotes[i].label).to.equal(\"Pupil enrolments missing 10 percent or more of their own possible sessions (due to authorised or unauthorised absence) are classified as persistent absentees.\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"30\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"31\");",
													"                pm.expect(respJson.footnotes[i].indicators.length).to.equal(2);",
													"                break;",
													"            case 12:",
													"                pm.expect(respJson.footnotes[i].label).to.equal(\"Number of enrolments includes pupils on the school roll for at least one session who are aged between 5 and 15, excluding boarders. Some pupils may be counted more than once (if they moved schools during the academic year or are registered in more than one school).\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.eql([\"1\"]);",
													"                break;",
													"            case 13:",
													"                pm.expect(respJson.footnotes[i].id).to.not.equal(13);",
													"                break;",
													"            case 24:",
													"                pm.expect(respJson.footnotes[i].id).to.not.equal(24); // Should only show for absence for four year olds",
													"                break;",
													"        }",
													"    }",
													"});",
													"",
													"pm.test(\"timePeriodRange length should be correct\", function () {",
													"    pm.expect(respJson.timePeriodRange.length).to.equal(1); ",
													"});",
													"",
													"pm.test(\"results should contain Country, Local_Authority, and Local_Authority_District geographicLevels\", function () {",
													"    var countryFound = false;",
													"    var localAuthorityFound = false;",
													"    var localAuthorityDistrictFound = false;",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        if(respJson.result[i].geographicLevel == \"Country\") {",
													"            countryFound = true;",
													"        }",
													"        if(respJson.result[i].geographicLevel == \"Local_Authority\") {",
													"            localAuthorityFound = true;",
													"        }",
													"        if(respJson.result[i].geographicLevel == \"Local_Authority_District\") {",
													"            localAuthorityDistrictFound = true;",
													"        }",
													"    }",
													"    pm.expect(countryFound).to.equal(true);",
													"    pm.expect(localAuthorityFound).to.equal(true);",
													"    pm.expect(localAuthorityDistrictFound).to.equal(true);",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { ",
													"    pm.expect(respJson.result.length).to.equal(1402); ",
													"});",
													"",
													"pm.test(\"First result should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].geographicLevel\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].location\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].measures\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].timePeriod\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{FILT_AllPupils}}\n    ],\n    \"indicators\": [\n        1, 23, 26, 28, 30, 31\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Absence by characteristic - Country - *",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0c491405-7891-4f02-a4bb-47785d27fa09",
												"exec": [
													"respJson = pm.response.json()",
													"",
													"",
													"pm.test(\"timePeriodRange length should be correct\", function () {",
													"    pm.expect(respJson.timePeriodRange.length).to.equal(2); ",
													"});",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"Country\");",
													"    }",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { ",
													"    pm.expect(respJson.result.length).to.equal(16); ",
													"});",
													"",
													"pm.test(\"First result should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].geographicLevel\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].location\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].location.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].measures\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].timePeriod\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"geographicLevel\": \"Country\",\n    \"timePeriod\": {\n    \t\"startYear\": 2014,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2015,\n    \t\"endCode\": \"AY\",\n    },\n    \"filters\" : [\n        {{FILT_GenderMale}}, {{FILT_GenderFemale}}\n    ],\n    \"indicators\": [\n        23, 26, 28\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Absence by characteristic - Country - * - Male, Female AND Primary, Secondary",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"respJson = pm.response.json()",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"Country\");",
													"    }",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { ",
													"    pm.expect(respJson.result.length).to.equal(4); ",
													"});",
													"",
													"pm.test(\"First result should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].geographicLevel\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].location\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].measures\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].timePeriod\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"geographicLevel\": \"Country\",\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{FILT_GenderMale}}, {{FILT_GenderFemale}}, {{FILT_StateFundedPrimary}}, {{FILT_StateFundedSecondary}}\n    ],\n    \"indicators\": [\n        23, 26, 28\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Absence by characteristic - England - Male, Female",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"respJson = pm.response.json();",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"footnotes\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodRange\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
													"});",
													"",
													"pm.test(\"Validate footnotes\", function () {",
													"    for(var i = 0; i < respJson.footnotes.length; i++) {",
													"        switch(respJson.footnotes[i].id) {",
													"            case 1:",
													"                pm.expect(respJson.footnotes[i].label).to.equal(\"State-funded primary and secondary schools include middle schools as deemed.\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"23\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"26\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"28\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"30\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"31\");",
													"                pm.expect(respJson.footnotes[i].indicators.length).to.equal(5);",
													"                break;",
													"            case 8:",
													"                pm.expect(respJson.footnotes[i].label).to.equal(\"Absence rates are the number of absence sessions expressed as a percentage of the total number of possible sessions.\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"23\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"26\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"28\");",
													"                pm.expect(respJson.footnotes[i].indicators.length).to.equal(3);",
													"                break;",
													"            case 9:",
													"                pm.expect(respJson.footnotes[i].label).to.equal(\"Pupil enrolments missing 10 percent or more of their own possible sessions (due to authorised or unauthorised absence) are classified as persistent absentees.\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"30\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"31\");",
													"                pm.expect(respJson.footnotes[i].indicators.length).to.equal(2);",
													"                break;",
													"            case 10:",
													"                pm.expect(respJson.footnotes[i].label).to.equal(\"The definition of persistent absence changed from the 2015/16 academic year - The information presented for years prior to 2015/16 has been produced using the same methodology in order to allow users to make comparisons on a consistent basis over time.\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"30\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"31\");",
													"                pm.expect(respJson.footnotes[i].indicators.length).to.equal(2);                ",
													"                break;",
													"            case 11:",
													"                pm.expect(respJson.footnotes[i].label).to.equal(\"The persistent absentee rate is the number of persistent absentees expressed as a percentage of the total number of enrolments.\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.eql([\"30\"]);",
													"                break;",
													"            case 13:",
													"                pm.expect(respJson.footnotes[i].id).to.not.equal(13);",
													"                break;",
													"            // NOTE(mark): To be implemented in DFE-1127",
													"            // case 18:",
													"            //     pm.expect(respJson.footnotes[i].id).to.not.equal(18); // Shouldn't happen, as no SEN provision results returned",
													"            //     break;",
													"            // NOTE(mark): To be implemented in DFE-1127",
													"            // case 21:",
													"            //     pm.expect(respJson.footnotes[i].id).to.not.equal(21); // Shouldn't happen, as no Ethnic Group Minor results returned",
													"            //     break;",
													"            case 24:",
													"                pm.expect(respJson.footnotes[i].id).to.not.equal(24); // Should only show for absence for four year olds",
													"                break;",
													"        }",
													"    }",
													"});",
													"",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.result.length).to.equal(8); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"Country\");",
													"    }",
													"});",
													"",
													"pm.test(\"First result should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].geographicLevel\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].location\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].measures\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].timePeriod\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"country\": [\n    \t\"E92000001\"\n    ],\n    \"timePeriod\": {\n    \t\"startYear\": 2014,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2014,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{FILT_GenderMale}}, {{FILT_GenderFemale}}\n    ],\n    \"indicators\": [\n        23, 26, 28, 30, 31\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Absence by characteristic - England - Primary, EthMinorIrish",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"respJson = pm.response.json();",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"footnotes\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodRange\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
													"});",
													"",
													"pm.test(\"Validate footnotes\", function () {",
													"    for(var i = 0; i < respJson.footnotes.length; i++) {",
													"        switch(respJson.footnotes[i].id) {",
													"            case 1:",
													"                pm.expect(respJson.footnotes[i].label).to.equal(\"State-funded primary and secondary schools include middle schools as deemed.\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"23\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"26\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"28\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"30\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"31\");",
													"                pm.expect(respJson.footnotes[i].indicators.length).to.equal(5);",
													"                break;",
													"            case 2:",
													"                pm.expect(respJson.footnotes[i].label).to.equal(\"State-funded primary schools include all primary academies, including free schools.\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"23\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"26\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"28\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"30\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"31\");",
													"                pm.expect(respJson.footnotes[i].indicators.length).to.equal(5);",
													"                break;",
													"            // NOTE(mark): Shouldn't return as no school_type secondary returned. To be implemented in future ticket.",
													"            // case 3:",
													"            //     pm.expect(respJson.footnotes[i].id).to.not.equal(3);",
													"            //     break;",
													"            case 8:",
													"                pm.expect(respJson.footnotes[i].label).to.equal(\"Absence rates are the number of absence sessions expressed as a percentage of the total number of possible sessions.\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"23\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"26\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"28\");",
													"                pm.expect(respJson.footnotes[i].indicators.length).to.equal(3);",
													"                break;",
													"            // NOTE(mark): Fixed by https://github.com/dfe-analytical-services/explore-education-statistics/pull/447/files",
													"            case 9:",
													"                pm.expect(respJson.footnotes[i].label).to.equal(\"Pupil enrolments missing 10 percent or more of their own possible sessions (due to authorised or unauthorised absence) are classified as persistent absentees.\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"30\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"31\");",
													"                pm.expect(respJson.footnotes[i].indicators.length).to.equal(2);",
													"                break;",
													"            case 10:",
													"                pm.expect(respJson.footnotes[i].label).to.equal(\"The definition of persistent absence changed from the 2015/16 academic year - The information presented for years prior to 2015/16 has been produced using the same methodology in order to allow users to make comparisons on a consistent basis over time.\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"30\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.include(\"31\");",
													"                pm.expect(respJson.footnotes[i].indicators.length).to.equal(2);",
													"                break;",
													"            case 11:",
													"                pm.expect(respJson.footnotes[i].label).to.equal(\"The persistent absentee rate is the number of persistent absentees expressed as a percentage of the total number of enrolments.\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.eql([\"30\"]);",
													"                break;",
													"            case 24:",
													"                pm.expect(respJson.footnotes[i].id).to.not.equal(24); // Should only show for absence for four year olds",
													"                break;",
													"        }",
													"    }",
													"});",
													"",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.result.length).to.equal(1); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"Country\");",
													"    }",
													"});",
													"",
													"pm.test(\"First result should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].geographicLevel\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].location\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].measures\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].timePeriod\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"country\": [\n    \t\"E92000001\"\n    ],\n    \"timePeriod\": {\n    \t\"startYear\": 2014,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2014,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{FILT_StateFundedPrimary}}, {{FILT_EthMinor_Irish}}\n    ],\n    \"indicators\": [\n        23, 26, 28, 30, 31\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Absence by characteristic - LA - *",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa8ea708-fc9c-4520-8df9-a388dd26508d",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"",
													"pm.test(\"timePeriodRange length should be correct\", function () {",
													"    pm.expect(respJson.timePeriodRange.length).to.equal(2); ",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.result.length).to.equal(2412); });",
													"",
													"pm.test(\"First result should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].geographicLevel\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].location\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].measures\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].timePeriod\"));",
													"});",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"Local_Authority\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"geographicLevel\": \"Local_Authority\",\n    \"timePeriod\": {\n    \t\"startYear\": 2014,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2015,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{FILT_GenderMale}}, {{FILT_GenderFemale}}\n    ],\n    \"indicators\": [\n        23, 26, 28\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Absence by characteristic - Wandsworth",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa8ea708-fc9c-4520-8df9-a388dd26508d",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"timePeriodRange length should be correct\", function () {",
													"    pm.expect(respJson.timePeriodRange.length).to.equal(2); ",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.result.length).to.equal(16); });",
													"",
													"pm.test(\"First result should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].geographicLevel\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].location\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].measures\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].timePeriod\"));",
													"});",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"Local_Authority\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"localAuthority\": [\n    \t\"E09000032\"\n    ],\n    \"timePeriod\": {\n    \t\"startYear\": 2014,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2015,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{FILT_GenderMale}}, {{FILT_GenderFemale}}\n    ],\n    \"indicators\": [\n        23, 26, 28\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Absence by characteristic - LA district - *",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa8ea708-fc9c-4520-8df9-a388dd26508d",
												"exec": [
													"respJson = pm.response.json();",
													"",
													"",
													"pm.test(\"timePeriodRange length should be correct\", function () {",
													"    pm.expect(respJson.timePeriodRange.length).to.equal(1); ",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { ",
													"    pm.expect(respJson.result.length).to.equal(3688); ",
													"});",
													"",
													"pm.test(\"First result should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].geographicLevel\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].location\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].measures\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].timePeriod\"));",
													"});",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"Local_Authority_District\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"geographicLevel\": \"Local_Authority_District\",\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{FILT_FSMEligible}}, {{FILT_FSMNotEligible}}, {{FILT_FSMUnclassified}}\n    ],\n    \"indicators\": [\n        23, 26, 28\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Absence by characteristic - Adur",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa8ea708-fc9c-4520-8df9-a388dd26508d",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.result.length).to.equal(11); });",
													"",
													"pm.test(\"First result should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].geographicLevel\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].location\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].measures\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].timePeriod\"));",
													"});",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"Local_Authority_District\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"geographicLevel\": \"Local_Authority_District\",\n    \"localAuthorityDistrict\": [\n    \t\"E07000223\"\n    ],\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{FILT_FSMEligible}}, {{FILT_FSMNotEligible}}, {{FILT_FSMUnclassified}}\n    ],\n    \"indicators\": [\n        23, 26, 28\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1b454eae-43c4-4e92-a06e-1a803aa8858b",
										"type": "text/javascript",
										"exec": [
											"pm.globals.set(\"FILT_AllPupils\", \"70\");",
											"pm.globals.set(\"FILT_GenderMale\", \"4\");",
											"pm.globals.set(\"FILT_GenderFemale\", \"5\");",
											"pm.globals.set(\"FILT_StateFundedPrimary\", \"71\");",
											"pm.globals.set(\"FILT_StateFundedSecondary\", \"75\");",
											"pm.globals.set(\"FILT_FSMEligible\", \"43\");",
											"pm.globals.set(\"FILT_FSMNotEligible\", \"44\");",
											"pm.globals.set(\"FILT_FSMUnclassified\", \"45\");",
											"pm.globals.set(\"FILT_EthMinor_Irish\", \"24\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9b07e3a7-08a0-4256-ab4a-53508f6331c5",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Compulsory fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodRange\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
											"});"
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "By geographic level",
							"item": [
								{
									"name": "Tablebuilder - Absence by geographic level - Country - *",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Compulsory fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodRange\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
													"});",
													"",
													"pm.test(\"timePeriodRange length should be correct\", function () {",
													"    pm.expect(respJson.timePeriodRange.length).to.equal(11); ",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.result.length).to.equal(33); });",
													"",
													"pm.test(\"First result should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].geographicLevel\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].location\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].measures\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].timePeriod\"));",
													"});",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"Country\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 2,\n    \"geographicLevel\": \"Country\",\n    \"timePeriod\": {\n    \t\"startYear\": 2006,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n    \t{{FILT_StateFundedPrimary}}, {{FILT_StateFundedSecondary}}, {{FILT_Special}}\n    ],\n    \"indicators\": [\n        57, 59, 66\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Absence by geographic level - England - 200607 - all schoolTypes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ca61e14b-1422-4898-a302-90665970c869",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"// DFE-1034",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Compulsory fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodRange\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
													"});",
													"",
													"pm.test(\"timePeriodRange length should be correct\", function () {",
													"    pm.expect(respJson.timePeriodRange.length).to.equal(1); ",
													"});",
													"",
													"pm.test(\"Expect correct number of results\", function() {",
													"   pm.expect(respJson.result.length).to.equal(4);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"geographicLevel\": \"Country\",\n\t\"country\":[\"E92000001\"],\n\t\"subjectId\":\"2\",\n\t\"indicators\":[\"48\"],\n\t\"filters\": [\n\t\t{{FILT_Total}}, {{FILT_StateFundedPrimary}}, {{FILT_StateFundedSecondary}}, {{FILT_Special}}\n\t],\n\t\"timePeriod\": {\n    \t\"startYear\": 2006,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2006,\n    \t\"endCode\": \"AY\"\n    }\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Absence by geographic level - LA - *",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Compulsory fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodRange\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.result.length).to.equal(451); });",
													"",
													"pm.test(\"First result should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].geographicLevel\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].location\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].location.localAuthority\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].measures\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].timePeriod\"));",
													"});",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"Local_Authority\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 2,\n    \"geographicLevel\": \"Local_Authority\",\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n    \t{{FILT_StateFundedPrimary}}, {{FILT_StateFundedSecondary}}, {{FILT_Special}}\n    ],\n    \"indicators\": [\n        57, 59, 66\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Absence by geographic level - Region - *",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Compulsory fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodRange\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.result.length).to.equal(30); });",
													"",
													"pm.test(\"First result should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].geographicLevel\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].location\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].location.region\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].measures\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result[0].timePeriod\"));",
													"});",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"Region\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 2,\n    \"geographicLevel\": \"Region\",\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n    \t{{FILT_StateFundedPrimary}}, {{FILT_StateFundedSecondary}}, {{FILT_Special}}\n    ],\n    \"indicators\": [\n        57, 59, 66\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Absence by geographic level - Inner London",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Compulsory fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodRange\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
													"});",
													"",
													"pm.test(\"timePeriodRange length should be correct\", function () {",
													"    pm.expect(respJson.timePeriodRange.length).to.equal(11); ",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.result.length).to.equal(33); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"Region\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 2,\n    \"region\": [\n\t\t\"E13000001\"\n\t],\n    \"timePeriod\": {\n    \t\"startYear\": 2006,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n    \t{{FILT_StateFundedPrimary}}, {{FILT_StateFundedSecondary}}, {{FILT_Special}}\n    ],\n    \"indicators\": [\n        57, 59, 66\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Absence by geographic level - School - Region Inner London",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Compulsory fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodRange\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
													"});",
													"",
													"pm.test(\"timePeriodRange length should be correct\", function () {",
													"    pm.expect(respJson.timePeriodRange.length).to.equal(1); ",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.result.length).to.equal(938); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"School\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 2,\n    \"geographicLevel\": \"School\",\n    \"region\": [ \"E13000001\" ],\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n    \t{{FILT_StateFundedPrimary}}, {{FILT_StateFundedSecondary}}, {{FILT_Special}}\n    ],\n    \"indicators\": [\n        57, 59, 66\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Absence by geographic level - School - LA Barking and Dagenham",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Compulsory fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodRange\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.result.length).to.equal(60); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"School\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 2,\n    \"geographicLevel\": \"School\",\n    \"localAuthority\": [ \"E09000002\" ],\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n    \t{{FILT_StateFundedPrimary}}, {{FILT_StateFundedSecondary}}, {{FILT_Special}}\n    ],\n    \"indicators\": [\n        57, 59, 66\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Absence by geographic level - School - * - Primary AND Special",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2c8281ce-e56c-4542-9cb2-b90dcac8f445",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.result.length).to.equal(17838); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"School\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 2,\n    \"geographicLevel\": \"School\",\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n    \t{{FILT_StateFundedPrimary}}, {{FILT_Special}}\n    ],\n    \"indicators\": [\n        57, 59, 66\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Absence by geographic level - School - Region Inner London - All Schools AND Primary",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6ef52a6e-a307-4849-b277-6f929e629b1c",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Compulsory fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodRange\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.result.length).to.equal(706); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"School\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"subjectId\": 2,\n\t\"geographicLevel\": \"School\",\n\t\"region\": [ \"E13000001\" ],\n\t\"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n\t\"filters\" : [\n\t\t{{FILT_Total}}, {{FILT_StateFundedPrimary}}\n\t],\n\t\"indicators\": [\n\t\t42, 61, 57, 59, 66, 111212\n\t]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6354b6c5-34ad-43c1-b2d7-45f006621e28",
										"type": "text/javascript",
										"exec": [
											"pm.globals.set(\"FILT_Total\", \"83\");",
											"pm.globals.set(\"FILT_StateFundedPrimary\", \"86\");",
											"pm.globals.set(\"FILT_StateFundedSecondary\", \"87\");",
											"pm.globals.set(\"FILT_Special\", \"85\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a06c2178-26b4-4c5d-966b-2bc10331373a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "By term",
							"item": [
								{
									"name": "Tablebuilder - Absence by term - England - * - HT6",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"",
													"pm.test(\"timePeriodRange length should be correct\", function () {",
													"    pm.expect(respJson.timePeriodRange.length).to.equal(3); ",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.result.length).to.equal(9); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"Country\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 3,\n    \"country\": [\"E92000001\"],\n    \"timePeriod\": {\n    \t\"startYear\": 2014,\n    \t\"startCode\": \"HT6\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"HT6\"\n    },\n    \"filters\" : [\n        {{FILT_StateFundedPrimary}}, {{FILT_StateFundedSecondary}}, {{FILT_Special}}\n    ],\n    \"indicators\": [\n        68, 86, 87, 88\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Absence by term - England - * - T1,T2,T3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"// NOTE(mark): Asked to disable these tests due to DFE-1044",
													"// pm.test(\"timePeriodRange length should be correct\", function () {",
													"//     pm.expect(respJson.timePeriodRange.length).to.equal(11); ",
													"// });",
													"",
													"// pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.result.length).to.equal(33); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"Country\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 3,\n    \"country\": [\"E92000001\"],\n    \"timePeriod\": {\n    \t\"startYear\": 2013,\n    \t\"startCode\": \"T2\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"T3\"\n    },\n    \"filters\" : [\n        {{FILT_StateFundedPrimary}}, {{FILT_StateFundedSecondary}}, {{FILT_Special}}\n    ],\n    \"indicators\": [\n        68, 86, 87, 88\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Absence by term - England - HT6",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.result.length).to.equal(2); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"Country\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 3,\n    \"country\": [ \"E92000001\" ],\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"HT6\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"HT6\"\n    },\n    \"filters\" : [\n        {{FILT_StateFundedPrimary}}, {{FILT_StateFundedSecondary}}\n    ],\n    \"indicators\": [\n        68, 86, 87, 88\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Absence by term - no geoLevel - Country England, Region Inner London + Outer London, LA City of London + Barking and Dagenham - HT6",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.result.length).to.equal(9); });",
													"",
													"pm.expect(respJson.result[0].geographicLevel).to.equal(\"Region\");",
													"pm.expect(respJson.result[0].location.region.code).to.equal(\"E13000001\");",
													"pm.expect(respJson.result[0].location.region.name).to.equal(\"Inner London\");",
													"",
													"pm.expect(respJson.result[1].geographicLevel).to.equal(\"Region\");",
													"pm.expect(respJson.result[1].location.region.code).to.equal(\"E13000001\");",
													"pm.expect(respJson.result[1].location.region.name).to.equal(\"Inner London\");",
													"",
													"pm.expect(respJson.result[2].geographicLevel).to.equal(\"Local_Authority\");",
													"pm.expect(respJson.result[2].location.localAuthority.code).to.equal(\"E09000001\");",
													"pm.expect(respJson.result[2].location.localAuthority.name).to.equal(\"City of London\");",
													"",
													"pm.expect(respJson.result[3].geographicLevel).to.equal(\"Region\");",
													"pm.expect(respJson.result[3].location.region.code).to.equal(\"E13000002\");",
													"pm.expect(respJson.result[3].location.region.name).to.equal(\"Outer London\");",
													"",
													"pm.expect(respJson.result[4].geographicLevel).to.equal(\"Region\");",
													"pm.expect(respJson.result[4].location.region.code).to.equal(\"E13000002\");",
													"pm.expect(respJson.result[4].location.region.name).to.equal(\"Outer London\");",
													"",
													"pm.expect(respJson.result[5].geographicLevel).to.equal(\"Country\");",
													"pm.expect(respJson.result[5].location.country.code).to.equal(\"E92000001\");",
													"pm.expect(respJson.result[5].location.country.name).to.equal(\"England\");",
													"",
													"pm.expect(respJson.result[6].geographicLevel).to.equal(\"Country\");",
													"pm.expect(respJson.result[6].location.country.code).to.equal(\"E92000001\");",
													"pm.expect(respJson.result[6].location.country.name).to.equal(\"England\");",
													"",
													"pm.expect(respJson.result[7].geographicLevel).to.equal(\"Local_Authority\");",
													"pm.expect(respJson.result[7].location.localAuthority.code).to.equal(\"E09000002\");",
													"pm.expect(respJson.result[7].location.localAuthority.name).to.equal(\"Barking and Dagenham\");",
													"",
													"pm.expect(respJson.result[8].geographicLevel).to.equal(\"Local_Authority\");",
													"pm.expect(respJson.result[8].location.localAuthority.code).to.equal(\"E09000002\");",
													"pm.expect(respJson.result[8].location.localAuthority.name).to.equal(\"Barking and Dagenham\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 3,\n    \"country\": [ \"E92000001\" ],\n    \"region\": [ \"E13000001\", \"E13000002\" ],\n    \"localAuthority\": [ \"E09000001\", \"E09000002\" ],\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"HT6\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"HT6\"\n    },\n    \"filters\" : [\n        {{FILT_StateFundedPrimary}}, {{FILT_StateFundedSecondary}}\n    ],\n    \"indicators\": [\n        68, 86, 87, 88\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Absence by term - Region - *",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.result.length).to.equal(100); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"Region\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 3,\n    \"geographicLevel\": \"Region\",\n    \"timePeriod\": {\n    \t\"startYear\": 2012,\n    \t\"startCode\": \"HT6\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"HT6\"\n    },\n    \"filters\" : [\n        {{FILT_StateFundedPrimary}}, {{FILT_StateFundedSecondary}}\n    ],\n    \"indicators\": [\n        68, 86, 87, 88\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f28d57d5-c4a2-4c3c-a90c-e672993bec6d",
										"type": "text/javascript",
										"exec": [
											"pm.globals.set(\"FILT_StateFundedPrimary\", \"89\");",
											"pm.globals.set(\"FILT_StateFundedSecondary\", \"90\");",
											"pm.globals.set(\"FILT_Special\", \"91\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f54a546f-c365-4bfc-831e-2e3cbfdef1d6",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Compulsory fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodRange\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
											"});"
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "For four year olds",
							"item": [
								{
									"name": "Tablebuilder - Absence for four year olds - England - *",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"",
													"pm.test(\"timePeriodRange length should be correct\", function () {",
													"    pm.expect(respJson.timePeriodRange.length).to.equal(4); ",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.result.length).to.equal(8); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"Country\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 4,\n    \"country\": [\"E92000001\"],\n    \"timePeriod\": {\n    \t\"startYear\": 2013,\n    \t\"startCode\": \"HT6\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"HT6\"\n    },\n    \"filters\" : [\n        {{FILT_Special}}, {{FILT_StateFundedSecondary}}\n    ],\n    \"indicators\": [\n        95, 94\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Absence for four year olds - School - *",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"timePeriodRange length should be correct\", function () {",
													"    pm.expect(respJson.timePeriodRange.length).to.equal(1); ",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.result.length).to.equal(538); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"School\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 4,\n    \"geographicLevel\": \"School\",\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"HT6\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"HT6\"\n    },\n    \"filters\" : [\n        {{FILT_Special}}\n    ],\n    \"indicators\": [\n        95, 94\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Absence for four year olds England - Secondary, Special",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"footnotes\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodRange\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
													"});",
													"",
													"pm.test(\"Validate footnotes\", function () {",
													"    for(var i = 0; i < respJson.footnotes.length; i++) {",
													"        switch(respJson.footnotes[i].id) {",
													"            // NOTE(mark): To be implemented in DFE-1127",
													"            // case 2:",
													"            //     pm.expect(respJson.footnotes[i].id).to.not.equal(2); // Since school_type !== primary",
													"            //     break;",
													"            case 12:",
													"                pm.expect(respJson.footnotes[i].id).to.not.equal(12); // Since subject == absence for four year olds",
													"                break;",
													"            case 24:",
													"                pm.expect(respJson.footnotes[i].label).to.equal(\"Includes pupils on the school roll for at least one session who are aged 4, excluding boarders. Some pupils may be counted more than once (if they moved schools during the academic year or are registered at more than one school).\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.eql([\"92\"]);",
													"                break;",
													"            case 25:",
													"                pm.expect(respJson.footnotes[i].label).to.equal(\"Only overall absence is recorded for pupils aged 4, absences are not categorised as authorised or unauthorised.\");",
													"                pm.expect(respJson.footnotes[i].indicators).to.eql([\"94\",\"95\"]);",
													"                break;",
													"        }",
													"    }",
													"});",
													"",
													"pm.test(\"timePeriodRange length should be correct\", function () {",
													"    pm.expect(respJson.timePeriodRange.length).to.equal(1); ",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.result.length).to.equal(2); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"Country\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 4,\n    \"country\": [\"E92000001\"],\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"HT6\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"HT6\"\n    },\n    \"filters\" : [\n        {{FILT_StateFundedSecondary}}, {{FILT_Special}}\n    ],\n    \"indicators\": [\n        92, 95, 94\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Absence for four year olds - Region West Midlands, South East, South West",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"",
													"pm.test(\"timePeriodRange length should be correct\", function () {",
													"    pm.expect(respJson.timePeriodRange.length).to.equal(5); ",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.result.length).to.equal(15); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"Region\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 4,\n    \"region\": [\"E12000005\", \"E12000008\", \"E12000009\"],\n    \"timePeriod\": {\n    \t\"startYear\": 2012,\n    \t\"startCode\": \"HT6\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"HT6\"\n    },\n    \"filters\" : [\n        {{FILT_SchoolType__Total}}\n    ],\n    \"indicators\": [\n        95, 94\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2cb67ee0-9a6d-4616-8d92-02a3aa5184e4",
										"type": "text/javascript",
										"exec": [
											"pm.globals.set(\"FILT_SchoolType__Total\", \"95\");",
											"pm.globals.set(\"FILT_StateFundedSecondary\", \"92\");",
											"pm.globals.set(\"FILT_Special\", \"93\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "540c3551-b43a-4768-a64e-bcdd881d9a7b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Compulsory fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodRange\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
											"});"
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "In PRUs",
							"item": [
								{
									"name": "Tablebuilder - Absence in PRUs - England",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"// DFE-998 - If no geographicLevel is provided, respond with all geographicLevels",
													"var respJson = pm.response.json()",
													"",
													"pm.test(\"timePeriodRange length should be correct\", function () {",
													"    pm.expect(respJson.timePeriodRange.length).to.equal(4); ",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.result.length).to.equal(4); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"Country\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 5,\n    \"country\": [\"E92000001\"],\n    \"timePeriod\": {\n    \t\"startYear\": 2013,\n    \t\"startCode\": \"HT6\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"HT6\"\n    },\n    \"filters\" : [\n        {{FILT_PupilReferralUnit}}\n    ],\n    \"indicators\": [\n        96\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Absence in PRUs - LA Bexley, Buckinghamshire, Derby",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"timePeriodRange length should be correct\", function () {",
													"    pm.expect(respJson.timePeriodRange.length).to.equal(2); ",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.result.length).to.equal(6); });",
													"",
													"pm.test(\"geographicLevel and indicators/measures should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"Local_Authority\");",
													"        pm.expect(pm.response.to.have.jsonBody(`result[${i}].measures.113`));",
													"        pm.expect(pm.response.to.have.jsonBody(`result[${i}].measures.114`));",
													"        pm.expect(pm.response.to.have.jsonBody(`result[${i}].measures.115`));",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 5,\n    \"localAuthority\": [\"E09000004\", \"E10000002\", \"E06000015\"],\n    \"timePeriod\": {\n    \t\"startYear\": 2014,\n    \t\"startCode\": \"HT6\",\n    \t\"endYear\": 2015,\n    \t\"endCode\": \"HT6\"\n    },\n    \"filters\" : [\n        {{FILT_PupilReferralUnit}}\n    ],\n    \"indicators\": [\n        113, 114, 115\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Absence in PRUs - Region - *",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.result.length).to.equal(10); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"Region\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 5,\n    \"geographicLevel\": \"Region\",\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"HT6\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"HT6\"\n    },\n    \"filters\" : [\n        {{FILT_PupilReferralUnit}}\n    ],\n    \"indicators\": [\n        113, 114, 115\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Absence in PRUs - LA Bury, Devon + Region East of England",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.result.length).to.equal(6); }); // LA 4 + Region 2",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.satisfy(function (geoLevel) {",
													"            return geoLevel === \"Region\" || geoLevel === \"Local_Authority\";",
													"        });",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 5,\n    \"localAuthority\": [\"E08000002\", \"E10000008\"],\n    \"region\": [\"E12000006\"],\n    \"timePeriod\": {\n    \t\"startYear\": 2015,\n    \t\"startCode\": \"HT6\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"HT6\"\n    },\n    \"filters\" : [\n        {{FILT_PupilReferralUnit}}\n    ],\n    \"indicators\": [\n        113, 114, 115\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "52135f05-03ae-4080-bbbb-dddcd7ee3e42",
										"type": "text/javascript",
										"exec": [
											"pm.globals.set(\"FILT_PupilReferralUnit\", \"96\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6dbbadee-c752-4d88-b613-f2953c175a62",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Compulsory fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodRange\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
											"});"
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Number missing at least one session by reason",
							"item": [
								{
									"name": "Tablebuilder - Absence number missing at least one session by reason - LA - *",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.result.length).to.equal(2255); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"Local_Authority\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 6,\n    \"geographicLevel\": \"Local_Authority\",\n    \"timePeriod\": {\n    \t\"startYear\": 2012,\n    \t\"startCode\": \"HT6\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"HT6\"\n    },\n    \"filters\" : [\n        {{FILT_StateFundedPrimary}}, {{FILT_StateFundedSecondary}}, {{FILT_Special}}\n    ],\n    \"indicators\": [\n        135, 136, 137\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tablebuilder - Absence number missing at least one session by reason - Region - *",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"pm.test(\"Number of results should be correct\", function () { pm.expect(pm.response.json().result.length).to.equal(150); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < pm.response.json().result.length; i++) {",
													"        pm.expect(pm.response.json().result[i].geographicLevel).to.equal(\"Region\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 6,\n    \"geographicLevel\": \"Region\",\n    \"timePeriod\": {\n    \t\"startYear\": 2012,\n    \t\"startCode\": \"HT6\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"HT6\"\n    },\n    \"filters\" : [\n        {{FILT_StateFundedPrimary}}, {{FILT_StateFundedSecondary}}, {{FILT_Special}}\n    ],\n    \"indicators\": [\n        135, 136, 137\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e04223f2-1e08-4ff6-9984-732c655dbcdf",
										"type": "text/javascript",
										"exec": [
											"pm.globals.set(\"FILT_StateFundedPrimary\", \"98\");",
											"pm.globals.set(\"FILT_StateFundedSecondary\", \"99\");",
											"pm.globals.set(\"FILT_Special\", \"100\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "368397eb-8cbb-4195-ac61-415b8c3abe28",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Compulsory fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodRange\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
											"});"
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Rate percent bands",
							"item": [
								{
									"name": "Tablebuilder - Absence rate percent bands - Country - *",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"pm.test(\"Number of results should be correct\", function () { pm.expect(pm.response.json().result.length).to.equal(306); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < pm.response.json().result.length; i++) {",
													"        pm.expect(pm.response.json().result[i].geographicLevel).to.equal(\"Country\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 7,\n    \"geographicLevel\": \"Country\",\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"HT6\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"HT6\"\n    },\n    \"filters\" : [\n        {{FILT_StateFundedPrimary}}, {{FILT_Special}}, {{FILT_StateFundedSecondary}}\n    ],\n    \"indicators\": [\n        140, 142, 144\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/tablebuilder",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"tablebuilder"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "49522da0-95a0-4ddf-9a8a-9ca103db1df2",
										"type": "text/javascript",
										"exec": [
											"pm.globals.set(\"FILT_StateFundedPrimary\", \"149\");",
											"pm.globals.set(\"FILT_StateFundedSecondary\", \"151\");",
											"pm.globals.set(\"FILT_Special\", \"150\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ca434135-2e41-4ff4-806d-48a458f28b61",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Compulsory fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodRange\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
											"});"
										]
									}
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "fbc8c7a0-54dc-48b7-ac2f-ab840c45cc29",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8141f36f-4bf9-49a4-822c-0c6087cadbbe",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Data",
			"item": [
				{
					"name": "Pupil absence in schools in England",
					"item": [
						{
							"name": "By characteristic",
							"item": [
								{
									"name": "Data - Absence by characteristic - Country - *",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"respJson = pm.response.json()",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodRange\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
													"});",
													"",
													"pm.test(\"Number of metaData filters should be correct\", function () {",
													"   pm.expect(Object.keys(respJson.metaData.filters).length).to.equal(7); ",
													"});",
													"",
													"pm.test(\"Number of metaData locations should be correct\", function () {",
													"   pm.expect(Object.keys(respJson.metaData.locations).length).to.equal(1); ",
													"});",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"Country\");",
													"    }",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { ",
													"    pm.expect(respJson.result.length).to.equal(16); ",
													"});",
													"",
													"pm.test(\"Every result should contain location country England only\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].location.country.name).to.equal(\"England\");",
													"        pm.expect(pm.response.to.not.have.jsonBody(`result[${i}].location.localAuthority`));",
													"        pm.expect(pm.response.to.not.have.jsonBody(`result[${i}].location.localAuthorityDistrict`));",
													"        pm.expect(pm.response.to.not.have.jsonBody(`result[${i}].location.region`));",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"geographicLevel\": \"Country\",\n    \"timePeriod\": {\n    \t\"startYear\": 2014,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2015,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{FILT_GenderMale}}, {{FILT_GenderFemale}}\n    ],\n    \"indicators\": [\n        23, 26, 28\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/data",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"data"
											]
										}
									},
									"response": []
								},
								{
									"name": "Data - Absence by characteristic - Country - * - Male, Female AND Primary, Secondary",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"respJson = pm.response.json()",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodRange\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
													"});",
													"",
													"pm.test(\"Number of metaData filters should be correct\", function () {",
													"   pm.expect(Object.keys(respJson.metaData.filters).length).to.equal(5); ",
													"});",
													"",
													"pm.test(\"Number of metaData locations should be correct\", function () {",
													"   pm.expect(Object.keys(respJson.metaData.locations).length).to.equal(1); ",
													"});",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"Country\");",
													"    }",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { ",
													"    pm.expect(respJson.result.length).to.equal(4); ",
													"});",
													"",
													"pm.test(\"Every result should contain location country England only\", function () {",
													"    for(var i = 0; i < pm.response.json().result.length; i++) {",
													"        pm.expect(respJson.result[i].location.country.name).to.equal(\"England\");",
													"        pm.expect(pm.response.to.not.have.jsonBody(`result[${i}].location.localAuthority`));",
													"        pm.expect(pm.response.to.not.have.jsonBody(`result[${i}].location.localAuthorityDistrict`));",
													"        pm.expect(pm.response.to.not.have.jsonBody(`result[${i}].location.region`));",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"geographicLevel\": \"Country\",\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{FILT_GenderMale}}, {{FILT_GenderFemale}}, {{FILT_StateFundedPrimary}}, {{FILT_StateFundedSecondary}}\n    ],\n    \"indicators\": [\n        23, 26, 28\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/data",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"data"
											]
										}
									},
									"response": []
								},
								{
									"name": "Data - Absence by characteristic - LA - *",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa8ea708-fc9c-4520-8df9-a388dd26508d",
												"exec": [
													"respJson = pm.response.json()",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodRange\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
													"});",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"Local_Authority\");",
													"    }",
													"});",
													"",
													"pm.test(\"Number of metaData filters should be correct\", function () {",
													"   pm.expect(Object.keys(respJson.metaData.filters).length).to.equal(7); ",
													"});",
													"",
													"/*",
													"$ csvgrep -p time_period/201415\\|201516/ -p geographic_level/local\\ authority/ -p characteristic/Gender\\ [M,m]ale\\|Gender\\ [F,f]emale/ csvs/absence_by_characteristic.csv | csvcut -k country_name | sed 1d | sort | uniq | wc -l",
													"1",
													"$ csvgrep -p time_period/201415\\|201516/ -p geographic_level/local\\ authority/ -p characteristic/Gender\\ [M,m]ale\\|Gender\\ [F,f]emale/ csvs/absence_by_characteristic.csv | csvcut -k region_name | sed 1d | sort | uniq | wc -l",
													"10",
													"$ csvgrep -p time_period/201415\\|201516/ -p geographic_level/local\\ authority/ -p characteristic/Gender\\ [M,m]ale\\|Gender\\ [F,f]emale/ csvs/absence_by_characteristic.csv | csvcut -k la_name | sed 1d | sort | uniq | wc -l",
													"152",
													"1 + 10 + 152 = 163",
													"*/",
													"",
													"pm.test(\"Number of metaData locations should be correct\", function () {",
													"    var locations = Object.keys(respJson.metaData.locations)",
													"    pm.expect(locations.length).to.equal(163);",
													"    //locations.forEach(item => item !== \"E13000001\" && item !== \"E13000002\" ? pm.expect(pm.response.to.have.jsonBody(`metaData.locations.${item}.geoJson`)) : null);",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.result.length).to.equal(2412); });",
													"",
													"// NOTE(mark): Takes a long time to run this test",
													"// pm.test(\"Every result should contain location country, localAuthority, and region\", function () {",
													"//     for(var i = 0; i < respJson.result.length; i++) {",
													"//         pm.expect(respJson.result[i].location.country.name).to.equal(\"England\");",
													"//         pm.expect(pm.response.to.have.jsonBody(`result[${i}].location.localAuthority`));",
													"//         pm.expect(pm.response.to.not.have.jsonBody(`result[${i}].location.localAuthorityDistrict`));",
													"//         pm.expect(pm.response.to.have.jsonBody(`result[${i}].location.region`));",
													"//     }",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"geographicLevel\": \"Local_Authority\",\n    \"timePeriod\": {\n    \t\"startYear\": 2014,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2015,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{FILT_GenderMale}}, {{FILT_GenderFemale}}\n    ],\n    \"indicators\": [\n        23, 26, 28\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/data",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"data"
											]
										}
									},
									"response": []
								},
								{
									"name": "Data - Absence by characteristic - Wandsworth",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa8ea708-fc9c-4520-8df9-a388dd26508d",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodRange\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
													"});",
													"",
													"pm.test(\"Number of metaData filters should be correct\", function () {",
													"   pm.expect(Object.keys(respJson.metaData.filters).length).to.equal(4); ",
													"});",
													"",
													"pm.test(\"Number of metaData locations should be correct and have associated geoJson data\", function () {",
													"   pm.expect(Object.keys(respJson.metaData.locations).length).to.equal(3);",
													"   pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E92000001.geoJson\"));",
													"   pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E09000032.geoJson\"));",
													"   pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E13000001\")); // No geoJson for Inner London -- DFE-729",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { pm.expect(respJson.result.length).to.equal(4); });",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"Local_Authority\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"localAuthority\": [\n    \t\"E09000032\"\n    ],\n    \"timePeriod\": {\n    \t\"startYear\": 2014,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2015,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{FILT_GenderMale}}, {{FILT_GenderFemale}}, {{FILT_Special}}\n    ],\n    \"indicators\": [\n        23, 26, 28\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/data",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"data"
											]
										}
									},
									"response": []
								},
								{
									"name": "Data - Absence by characteristic - LAD - *",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa8ea708-fc9c-4520-8df9-a388dd26508d",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodRange\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
													"});",
													"",
													"pm.test(\"Number of metaData filters should be correct\", function () {",
													"   pm.expect(Object.keys(respJson.metaData.filters).length).to.equal(8);",
													"});",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"Local_Authority_District\");",
													"    }",
													"});",
													"",
													"/*",
													"$ csvgrep -p time_period/201617/ -p geographic_level/local\\ authority\\ district/ -p characteristic/FSM\\ eligible$\\|FSM\\ not\\ eligible$\\|FSM\\ unclassified$/ csvs/absence_by_characteristic.csv | csvcut -k country_name | sed 1d | sort | uniq | wc -l",
													"1",
													"$ csvgrep -p time_period/201617/ -p geographic_level/local\\ authority\\ district/ -p characteristic/FSM\\ eligible$\\|FSM\\ not\\ eligible$\\|FSM\\ unclassified$/ csvs/absence_by_characteristic.csv | csvcut -k region_name | sed 1d | sort | uniq | wc -l",
													"10",
													"$ csvgrep -p time_period/201617/ -p geographic_level/local\\ authority\\ district/ -p characteristic/FSM\\ eligible$\\|FSM\\ not\\ eligible$\\|FSM\\ unclassified$/ csvs/absence_by_characteristic.csv | csvcut -k sch_lad_name | sed 1d | sort | uniq | wc -l",
													"326",
													"1 + 10 + 326 = 337",
													"*/",
													"pm.test(\"Number of metaData locations should be correct\", function () {",
													"   pm.expect(Object.keys(respJson.metaData.locations).length).to.equal(337);",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () {",
													"    pm.expect(respJson.result.length).to.equal(3688);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"geographicLevel\": \"Local_Authority_District\",\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{FILT_FSMEligible}}, {{FILT_FSMNotEligible}}, {{FILT_FSMUnclassified}}\n    ],\n    \"indicators\": [\n        23, 26, 28\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/data",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"data"
											]
										}
									},
									"response": []
								},
								{
									"name": "Data - Absence by characteristic - Hartlepool",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa8ea708-fc9c-4520-8df9-a388dd26508d",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodRange\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
													"});",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"Local_Authority_District\");",
													"    }",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { ",
													"    pm.expect(respJson.result.length).to.equal(7);",
													"});",
													"",
													"pm.test(\"Number of metaData locations should be correct and to have associated geoJson data\", function () {",
													"   pm.expect(Object.keys(respJson.metaData.locations).length).to.equal(3);",
													"   pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E92000001.geoJson\"));",
													"   pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E06000001.geoJson\"));",
													"   pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E12000001.geoJson\"));",
													"});",
													"",
													"pm.test(\"All results should have LA District name Hartlepool\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].location.country.name).to.equal(\"England\");",
													"        pm.expect(respJson.result[i].location.localAuthorityDistrict.name).to.equal(\"Hartlepool\");",
													"        pm.expect(respJson.result[i].location.region.name).to.equal(\"North East\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"localAuthorityDistrict\": [\"E06000001\"],\n    \"filters\" : [\n    \t{{FILT_AllPupils}}, {{FILT_FSMEligible}}\n    ],\n    \"indicators\": [\n        23, 26, 28\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/data",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"data"
											]
										}
									},
									"response": []
								},
								{
									"name": "Data - Absence by characteristic - Hartlepool - boundaryLevel 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa8ea708-fc9c-4520-8df9-a388dd26508d",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodRange\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
													"});",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"Local_Authority_District\");",
													"    }",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { ",
													"    pm.expect(respJson.result.length).to.equal(7);",
													"});",
													"",
													"pm.test(\"Number of metaData locations should be correct and not have associated geoJson data\", function () {",
													"   pm.expect(Object.keys(respJson.metaData.locations).length).to.equal(3);",
													"   // boundaryLevel 1 only includes geoJson for countries",
													"   pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E92000001.geoJson\"));",
													"   pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E06000001\"));",
													"   pm.expect(pm.response.to.not.have.jsonBody(\"metaData.locations.E06000001.geoJson\"));",
													"   pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E12000001\"));",
													"   pm.expect(pm.response.to.not.have.jsonBody(\"metaData.locations.E12000001.geoJson\"));",
													"});",
													"",
													"pm.test(\"All results should have LA District name Hartlepool\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].location.country.name).to.equal(\"England\");",
													"        pm.expect(respJson.result[i].location.localAuthorityDistrict.name).to.equal(\"Hartlepool\");",
													"        pm.expect(respJson.result[i].location.region.name).to.equal(\"North East\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"localAuthorityDistrict\": [\"E06000001\"],\n    \"filters\" : [\n    \t{{FILT_AllPupils}}, {{FILT_FSMEligible}}\n    ],\n    \"indicators\": [\n        23, 26, 28\n    ],\n    \"boundaryLevel\": 1\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/data",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"data"
											]
										}
									},
									"response": []
								},
								{
									"name": "Data - Absence by characteristic - Hartlepool - boundaryLevel 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa8ea708-fc9c-4520-8df9-a388dd26508d",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodRange\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
													"});",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"Local_Authority_District\");",
													"    }",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { ",
													"    pm.expect(respJson.result.length).to.equal(7);",
													"});",
													"",
													"pm.test(\"Number of metaData locations should be correct and to have associated geoJson data\", function () {",
													"   pm.expect(Object.keys(respJson.metaData.locations).length).to.equal(3);",
													"   // Because LAD boundaryLevel is explicitly asked for, no geoJson returned for country or region",
													"   pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E92000001\"));",
													"   pm.expect(pm.response.to.not.have.jsonBody(\"metaData.locations.E92000001.geoJson\"));",
													"   pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E06000001.geoJson\"));",
													"   pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E12000001\"));",
													"   pm.expect(pm.response.to.not.have.jsonBody(\"metaData.locations.E12000001.geoJson\"));",
													"});",
													"",
													"pm.test(\"All results should have LA District name Hartlepool\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].location.country.name).to.equal(\"England\");",
													"        pm.expect(respJson.result[i].location.localAuthorityDistrict.name).to.equal(\"Hartlepool\");",
													"        pm.expect(respJson.result[i].location.region.name).to.equal(\"North East\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"localAuthorityDistrict\": [\"E06000001\"],\n    \"filters\" : [\n    \t{{FILT_AllPupils}}, {{FILT_FSMEligible}}\n    ],\n    \"indicators\": [\n        23, 26, 28\n    ],\n    \"boundaryLevel\": 3\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/data",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"data"
											]
										}
									},
									"response": []
								},
								{
									"name": "Data - Absence by characteristic - Hartlepool - boundaryLevel 6",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa8ea708-fc9c-4520-8df9-a388dd26508d",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodRange\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
													"});",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"Local_Authority_District\");",
													"    }",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { ",
													"    pm.expect(respJson.result.length).to.equal(7);",
													"});",
													"",
													"pm.test(\"Number of metaData locations should be correct and to have associated geoJson data\", function () {",
													"   pm.expect(Object.keys(respJson.metaData.locations).length).to.equal(3);",
													"   // boundaryLevel 6 should only have geoJson data for regions",
													"   pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E92000001\"));",
													"   pm.expect(pm.response.to.not.have.jsonBody(\"metaData.locations.E92000001.geoJson\"));",
													"   pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E06000001\"));",
													"   pm.expect(pm.response.to.not.have.jsonBody(\"metaData.locations.E06000001.geoJson\"));",
													"   pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E12000001.geoJson\"));",
													"});",
													"",
													"pm.test(\"All results should have LA District name Hartlepool\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].location.country.name).to.equal(\"England\");",
													"        pm.expect(respJson.result[i].location.localAuthorityDistrict.name).to.equal(\"Hartlepool\");",
													"        pm.expect(respJson.result[i].location.region.name).to.equal(\"North East\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"localAuthorityDistrict\": [\"E06000001\"],\n    \"filters\" : [\n    \t{{FILT_AllPupils}}, {{FILT_FSMEligible}}\n    ],\n    \"indicators\": [\n        23, 26, 28\n    ],\n    \"boundaryLevel\": 6\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/data",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"data"
											]
										}
									},
									"response": []
								},
								{
									"name": "Data - Absence by characteristic - Adur",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa8ea708-fc9c-4520-8df9-a388dd26508d",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodRange\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
													"});",
													"",
													"pm.test(\"Number of metaData filters should be correct\", function () {",
													"   pm.expect(Object.keys(respJson.metaData.filters).length).to.equal(4); ",
													"});",
													"",
													"pm.test(\"Number of metaData indicators should be correct\", function () {",
													"   pm.expect(Object.keys(respJson.metaData.indicators).length).to.equal(3); ",
													"});",
													"",
													"pm.test(\"Number of metaData locations should be correct\", function () {",
													"   pm.expect(Object.keys(respJson.metaData.locations).length).to.equal(3); ",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { ",
													"    pm.expect(respJson.result.length).to.equal(2);",
													"});",
													"",
													"pm.test(\"All results should have correction location attributes\", function () {",
													"    for(var i = 0; i < pm.response.json().result.length; i++) {",
													"        pm.expect(respJson.result[i].location.country.name).to.equal(\"England\");",
													"        pm.expect(respJson.result[i].location.localAuthorityDistrict.name).to.equal(\"Adur\");",
													"        pm.expect(respJson.result[i].location.region.name).to.equal(\"South East\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"localAuthorityDistrict\": [\n    \t\"E07000223\"\n    ],\n    \"timePeriod\": {\n    \t\"startYear\": 2014,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{FILT_FSMEligible}}, {{FILT_FSMNotEligible}}, {{FILT_FSMUnclassified}}, {{FILT_Special}}\n    ],\n    \"indicators\": [\n        23, 26, 28\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/data",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"data"
											]
										}
									},
									"response": []
								},
								{
									"name": "Data - Absence by characteristic - Adur (LAD) + Wandsworth (LA)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa8ea708-fc9c-4520-8df9-a388dd26508d",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodRange\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
													"});",
													"",
													"pm.test(\"Number of metaData filters should be correct\", function () {",
													"   pm.expect(Object.keys(respJson.metaData.filters).length).to.equal(8); ",
													"});",
													"",
													"pm.test(\"Number of metaData indicators should be correct\", function () {",
													"   pm.expect(Object.keys(respJson.metaData.indicators).length).to.equal(5); ",
													"});",
													"",
													"pm.test(\"Number of metaData locations should be correct\", function () {",
													"   pm.expect(Object.keys(respJson.metaData.locations).length).to.equal(5);",
													"   pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E92000001\")); // England",
													"   pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E09000032\")); // LA Wandsworth",
													"   pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E07000223\")); // LAD Adur",
													"   pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E13000001\")); // Region Inner London",
													"   pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E12000008\")); // Region South East",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { ",
													"    pm.expect(respJson.result.length).to.equal(35); // LA 24 + LAD 11",
													"});",
													"",
													"pm.test(\"All results should have correction geographicLevel\", function () {",
													"    for(var i = 0; i < pm.response.json().result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.satisfy(function(geoLevel) {",
													"           return geoLevel === \"Local_Authority\" || geoLevel === \"Local_Authority_District\"; ",
													"        });",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 1,\n    \"localAuthority\": [\"E09000032\"],\n    \"localAuthorityDistrict\": [\"E07000223\"],\n    \"timePeriod\": {\n    \t\"startYear\": 2015,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{FILT_FSMEligible}}, {{FILT_FSMNotEligible}}, {{FILT_FSMUnclassified}}\n    ],\n    \"indicators\": [\n        6, 7, 8, 9, 10\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/data",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"data"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ec9d2b73-2598-40e5-abd3-b8598bbf2497",
										"type": "text/javascript",
										"exec": [
											"pm.globals.set(\"FILT_AllPupils\", \"70\");",
											"pm.globals.set(\"FILT_GenderMale\", \"4\");",
											"pm.globals.set(\"FILT_GenderFemale\", \"5\");",
											"pm.globals.set(\"FILT_StateFundedPrimary\", \"71\");",
											"pm.globals.set(\"FILT_Special\", \"74\");",
											"pm.globals.set(\"FILT_StateFundedSecondary\", \"75\");",
											"pm.globals.set(\"FILT_FSMEligible\", \"43\");",
											"pm.globals.set(\"FILT_FSMNotEligible\", \"44\");",
											"pm.globals.set(\"FILT_FSMUnclassified\", \"45\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "65c89d21-118a-4749-bd42-fa874f4a7be9",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d788e097-9c6f-43c3-89bc-db3db49c5404",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "07a946d0-b2d1-44a1-acc5-a04c987e7a69",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Early years foundation stage results",
					"item": [
						{
							"name": "Early learning goal underlying data 2013-2018",
							"item": [
								{
									"name": "Data - Early learning goal 2013-18 - LA - Lambeth, Sefton, Luton - Male, Female",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
												"exec": [
													"respJson = pm.response.json()",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Should have correct fields\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodRange\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
													"});",
													"",
													"pm.test(\"geographicLevel should be same as request\", function () {",
													"    for(var i = 0; i < respJson.result.length; i++) {",
													"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"Local_Authority\");",
													"    }",
													"});",
													"",
													"pm.test(\"Should have correct filters metaData\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.filters\"));",
													"    pm.expect(Object.keys(respJson.metaData.filters).length).to.equal(2); ",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.filters.\" + pm.globals.get(\"FILT_GenderFemale\")));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.filters.\" + pm.globals.get(\"FILT_GenderMale\")));",
													"});",
													"",
													"pm.test(\"Should have correct indicators metaData\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.indicators\"));",
													"    pm.expect(Object.keys(respJson.metaData.indicators).length).to.equal(2);",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.indicators.\" + pm.globals.get(\"INDI_TotalPointScoreBasedOnAssessmentRating\")));",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.indicators.\" + pm.globals.get(\"INDI_AveragePointScore\")));",
													"});",
													"",
													"pm.test(\"Should have correct locations metaData\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations\"));",
													"    pm.expect(Object.keys(respJson.metaData.locations).length).to.equal(7);",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E92000001\")); // Country - England",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E09000022\")); // LA - Lambeth",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E08000014\")); //      Sefton",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E06000032\")); //      Luton",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E13000001\")); // Region - Inner London",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E12000002\")); //          North West",
													"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E12000006\")); //          East of England",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () { ",
													"    pm.expect(respJson.result.length).to.equal(24); ",
													"});",
													"",
													"pm.test(\"All results have filter 884 or 885\", function () {",
													"    for(var i = 0; i < pm.response.json().result.length; i++) {",
													"        if(respJson.result[i].filters[0] !== pm.globals.get(\"FILT_GenderFemale\") && respJson.result[i].filters[0] !== pm.globals.get(\"FILT_GenderMale\")) {",
													"            pm.expect(respJson.result[i].filters[0]).to.equal(-99999);",
													"        }",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjectId\": 10,\n    \"geographicLevel\": \"Local_Authority\",\n    \"localAuthority\": [\n    \t\"E09000022\",\n    \t\"E08000014\",\n    \t\"E06000032\"\n    ],\n    \"timePeriod\": {\n    \t\"startYear\": 2014,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2017,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{FILT_GenderMale}}, {{FILT_GenderFemale}}\n    ],\n    \"indicators\": [\n        {{INDI_TotalPointScoreBasedOnAssessmentRating}},\n        {{INDI_AveragePointScore}}\n    ]\n}"
										},
										"url": {
											"raw": "{{data_api_url}}/data",
											"host": [
												"{{data_api_url}}"
											],
											"path": [
												"data"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fda225ab-c571-4c3a-908a-d9d99051e238",
										"type": "text/javascript",
										"exec": [
											"pm.globals.set(\"FILT_Total\", \"583\");",
											"pm.globals.set(\"FILT_GenderFemale\", \"584\");",
											"pm.globals.set(\"FILT_GenderMale\", \"585\");",
											"pm.globals.set(\"INDI_TotalPointScoreBasedOnAssessmentRating\", \"268\");",
											"pm.globals.set(\"INDI_AveragePointScore\", \"269\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a50021c8-3c9a-46f9-bce7-d5f222d0253e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Secondary and primary schools applications and offers",
					"item": [
						{
							"name": "Data - Applications and offers by school phase - LA Wirral, York",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f812d8b1-7373-4d5b-8abc-0c6e464f28ba",
										"exec": [
											"respJson = pm.response.json()",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Should have correct fields\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"metaData\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"metaData.filters\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"metaData.indicators\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodRange\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"result\"));",
											"});",
											"",
											"pm.test(\"Number of metaData filters should be correct\", function () {",
											"   pm.expect(Object.keys(respJson.metaData.filters).length).to.equal(1); ",
											"});",
											"",
											"pm.test(\"Number of metaData locations should be correct\", function () {",
											"   pm.expect(Object.keys(respJson.metaData.locations).length).to.equal(5); ",
											"});",
											"",
											"pm.test(\"Correct metaData locations should be returned\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E92000001\"));  // Country England",
											"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E12000002\"));  // Region North West",
											"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E12000003\"));  // Region Yorkshire and the Humber",
											"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E08000015\"));  // LA Wirral",
											"    pm.expect(pm.response.to.have.jsonBody(\"metaData.locations.E06000014\"));  // LA York",
											"});",
											"",
											"pm.test(\"geographicLevel should be same as request\", function () {",
											"    for(var i = 0; i < respJson.result.length; i++) {",
											"        pm.expect(respJson.result[i].geographicLevel).to.equal(\"Local_Authority\");",
											"    }",
											"});",
											"",
											"pm.test(\"Number of results should be correct\", function () { ",
											"    pm.expect(respJson.result.length).to.equal(6); ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"subjectId\": 17,\n    \"localAuthority\": [\"E08000015\", \"E06000014\"],\n    \"timePeriod\": {\n    \t\"startYear\": 2015,\n    \t\"startCode\": \"CY\",\n    \t\"endYear\": 2017,\n    \t\"endCode\": \"CY\"\n    },\n    \"filters\" : [\n        {{FILT_Primary__R}}\n    ],\n    \"indicators\": [\n        189, 190, 191\n    ]\n}"
								},
								"url": {
									"raw": "{{data_api_url}}/data",
									"host": [
										"{{data_api_url}}"
									],
									"path": [
										"data"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "06185e19-060d-44b4-9adf-3c424694ae9e",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"FILT_Primary__R\", \"538\");",
									"pm.globals.set(\"FILT_Secondary__9\", \"541\");",
									"pm.globals.set(\"FILT_Secondary__7\", \"542\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a725cb4a-8a8f-477e-85f1-8ead50eacf42",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Permalink",
			"item": [
				{
					"name": "Permalink - Absence by characteristic - create permalink",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bf224cd6-d62d-4b6b-afd4-8cf2e352fcbd",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"",
									"// NOTE: Save permalink id for use in the next request",
									"pm.globals.set(\"permalink_id\", respJson.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Fields are present\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"title\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"created\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"url\"));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2cec492a-fc8e-4e42-9663-af2f42ae27c7",
								"exec": [
									"pm.globals.set(\"FILT_AllPupils\", \"70\");",
									"pm.globals.set(\"FILT_GenderMale\", \"4\");",
									"pm.globals.set(\"FILT_GenderFemale\", \"5\");",
									"pm.globals.set(\"FILT_StateFundedPrimary\", \"71\");",
									"pm.globals.set(\"FILT_StateFundedSecondary\", \"75\");",
									"pm.globals.set(\"FILT_FSMEligible\", \"43\");",
									"pm.globals.set(\"FILT_FSMNotEligible\", \"44\");",
									"pm.globals.set(\"FILT_FSMUnclassified\", \"45\");",
									"pm.globals.set(\"FILT_EthMinor_Irish\", \"24\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"subjectId\": 1,\n    \"country\": [\"E92000001\"],\n    \"timePeriod\": {\n    \t\"startYear\": 2016,\n    \t\"startCode\": \"AY\",\n    \t\"endYear\": 2016,\n    \t\"endCode\": \"AY\"\n    },\n    \"filters\" : [\n        {{FILT_AllPupils}}\n    ],\n    \"indicators\": [\n        1, 23, 26\n    ]\n}"
						},
						"url": {
							"raw": "{{data_api_url}}/permalink",
							"host": [
								"{{data_api_url}}"
							],
							"path": [
								"permalink"
							]
						}
					},
					"response": []
				},
				{
					"name": "Permalink - Absence by characteristic - get created permalink",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4305c315-122a-4d29-ace3-0af70e73d69a",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Should have correct fields\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"title\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"created\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"url\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"data.metaData\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"data.metaData.filters\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"data.metaData.indicators\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"data.metaData.locations\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"data.timePeriodRange\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"data.result\"));",
									"});",
									"",
									"pm.test(\"Response id should match request permalink id\", function () {",
									"    pm.expect(respJson.id).to.equal(pm.globals.get(\"permalink_id\"));",
									"});",
									"",
									"pm.test(\"Number of metaData filters should be correct\", function () {",
									"   pm.expect(Object.keys(respJson.data.metaData.filters).length).to.equal(5);",
									"   ",
									"   pm.expect(pm.response.to.have.jsonBody(\"data.metaData.filters.3\"));",
									"   pm.expect(pm.response.to.have.jsonBody(\"data.metaData.filters.70\"));",
									"   pm.expect(pm.response.to.have.jsonBody(\"data.metaData.filters.71\"));",
									"   pm.expect(pm.response.to.have.jsonBody(\"data.metaData.filters.74\"));",
									"   pm.expect(pm.response.to.have.jsonBody(\"data.metaData.filters.75\"));",
									"});",
									"",
									"pm.test(\"Number of metaData locations should be correct\", function () {",
									"   pm.expect(Object.keys(respJson.data.metaData.locations).length).to.equal(1); ",
									"   pm.expect(pm.response.to.have.jsonBody(\"data.metaData.locations.E92000001\"));",
									"});",
									"",
									"pm.test(\"geographicLevel should be same as request\", function () {",
									"    for(var i = 0; i < respJson.data.result.length; i++) {",
									"        pm.expect(respJson.data.result[i].geographicLevel).to.equal(\"Country\");",
									"    }",
									"});",
									"",
									"pm.test(\"Number of results should be correct\", function () { ",
									"    pm.expect(respJson.data.result.length).to.equal(3); ",
									"});",
									"",
									"pm.test(\"Every result should contain location country England only\", function () {",
									"    for(var i = 0; i < respJson.data.result.length; i++) {",
									"        pm.expect(respJson.data.result[i].location.country.name).to.equal(\"England\");",
									"        pm.expect(pm.response.to.not.have.jsonBody(`data.result[${i}].location.localAuthority`));",
									"        pm.expect(pm.response.to.not.have.jsonBody(`data.result[${i}].location.localAuthorityDistrict`));",
									"        pm.expect(pm.response.to.not.have.jsonBody(`data.result[${i}].location.region`));",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{data_api_url}}/permalink/{{permalink_id}}",
							"host": [
								"{{data_api_url}}"
							],
							"path": [
								"permalink",
								"{{permalink_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Permalink - Absence by characteristic - invalid permalinkId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4305c315-122a-4d29-ace3-0af70e73d69a",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{data_api_url}}/permalink/invalid",
							"host": [
								"{{data_api_url}}"
							],
							"path": [
								"permalink",
								"invalid"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Download",
			"item": [
				{
					"name": "Download - Absence by term",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a8450e2f-c9ab-49e3-ade8-a3a285209058",
								"exec": [
									"(pm.environment.get(\"data_api_url\") === \"http://localhost:5000/api\" ? pm.test.skip : pm.test)(\"Status code is 200\", function () { ",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"(pm.environment.get(\"data_api_url\") === \"http://localhost:5000/api\" ? pm.test.skip : pm.test)(\"First line of CSV should be correct\", function () { ",
									"    pm.expect(pm.response.text()).to.contain(\"time_identifier,time_period,geographic_level,country_code,country_name,region_code,region_name,old_la_code,new_la_code,la_name,school_type,sess_possible,sess_overall,sess_authorised,sess_unauthorised,sess_overall_percent,sess_authorised_percent,sess_unauthorised_percent,sess_auth_illness,sess_auth_appointments,sess_auth_religious,sess_auth_study,sess_auth_traveller,sess_auth_holiday,sess_auth_ext_holiday,sess_auth_excluded,sess_auth_other,sess_auth_totalreasons,sess_unauth_holiday,sess_unauth_late,sess_unauth_other,sess_unauth_noyet,sess_unauth_totalreasons,sess_overall_totalreasons\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{data_api_url}}/download/pupil-absence-in-schools-in-england/2016-17/absence_by_term.csv",
							"host": [
								"{{data_api_url}}"
							],
							"path": [
								"download",
								"pupil-absence-in-schools-in-england",
								"2016-17",
								"absence_by_term.csv"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Debug",
			"item": [
				{
					"name": "Debug",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "90830933-d7da-4502-b316-ed7887c913cf",
								"exec": [
									"pm.test(\"Filter count is above the expected count\", function () {",
									"    pm.expect(pm.response.json().filterCount).to.be.above(31);",
									"});",
									"",
									"pm.test(\"Indicator count is above the expected count\", function () {",
									"    pm.expect(pm.response.json().indicatorCount).to.be.above(224);",
									"});",
									"",
									"pm.test(\"Location count is above the expected count\", function () {",
									"    pm.expect(pm.response.json().locationCount).to.be.above(529);",
									"});",
									"",
									"pm.test(\"Observation count is above the expected count\", function () {",
									"    pm.expect(pm.response.json().observationCount).to.be.above(1183283);",
									"});",
									"",
									"pm.test(\"Release count is above the expected count\", function () {",
									"    pm.expect(pm.response.json().releaseCount).to.be.above(3);",
									"});",
									"",
									"pm.test(\"School count is above the expected count\", function () {",
									"    pm.expect(pm.response.json().schoolCount).to.be.above(25215);",
									"});",
									"",
									"pm.test(\"Subject count is above the expected count\", function () {",
									"    pm.expect(pm.response.json().subjectCount).to.be.above(16);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{data_api_url}}/debug/report",
							"host": [
								"{{data_api_url}}"
							],
							"path": [
								"debug",
								"report"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "134cd34a-d839-401e-bc0b-88090d1b51c9",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "9279878e-d394-4bcd-a0d0-a638c88016dc",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}